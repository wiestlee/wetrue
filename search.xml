<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
    
    <entry>
      <title><![CDATA[React-native flux（alt）架构学习]]></title>
      <url>https://wiestlee.github.io/2017/03/25/flux%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/</url>
      <content type="html"><![CDATA[<h3 id="flux-框架介绍"><a href="#flux-框架介绍" class="headerlink" title="flux 框架介绍"></a>flux 框架介绍</h3><h3 id="flux的四大元素："><a href="#flux的四大元素：" class="headerlink" title="flux的四大元素："></a>flux的四大元素：</h3><ul>
<li>Dispatchre ： 根据注册派发动作（action）</li>
<li>Store ：（数据层）存储数据，用来存放应用的状态，一旦发生变动，就提醒Views要更新页面。</li>
<li>Action ：（动作）视图层发出的消息（比如onClick）。</li>
<li>View : 用户界面的视图层</li>
</ul>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png" alt="数据关系"></p>
<h4 id="Flux-的最大的特点就是”单向数据流动”。"><a href="#Flux-的最大的特点就是”单向数据流动”。" class="headerlink" title="Flux 的最大的特点就是”单向数据流动”。"></a>Flux 的最大的特点就是”单向数据流动”。</h4><ul>
<li>用户访问 View</li>
<li>View 发出用户的Action</li>
<li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li>
<li>Store 更新后，发出一个”change”事件</li>
<li>View 收到”change”事件后，更新页面</li>
</ul>
<h2 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h2><p>是全局唯一的Dispather对象，关系网的中心<br>文件： <strong>AppDispather.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Dispather&#125; <span class="keyword">from</span> <span class="string">'flux'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Dispather();</div></pre></td></tr></table></figure></p>
<p>AppDispather.register() 方法用来登记各种Action的回调函数<br>文件： AppDispatcher.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Counterstore <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</div><div class="line"><span class="keyword">import</span> ActionTypes <span class="keyword">from</span> <span class="string">'./ActionTypes'</span>;</div><div class="line">AppDispatcher.register(<span class="function">(<span class="params">action</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">        <span class="attr">case</span>:ActionTypes.INCREMENT:</div><div class="line">        Counterstore.increment();</div><div class="line">        Counterstore.emitChange();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">        <span class="comment">// no op</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>Store 保存整个应用的状态。他的角色有点像MVC 架构中的 Model。<br>所有的数据都存放在哪里。<br>注册（register）:把当前的Store注册到Dispather下，加入Dispather关系网通过emit广播、on挂载事件，Store需要注册到全局唯一的Dispather上才有效。<br><strong>flux核心部分</strong>：当register函数把一个回调函数注册到Dispather后,所有派发Dispather的Action对象，都会传递到这个回调函数中。<br><strong>文件：<br>        CounterStore.js<br>        声明、生成Store对象</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const CounterStore = object.assign(&#123;&#125;,EventEmitter.prototype,&#123;</div><div class="line">  couterValue = &#123;</div><div class="line">          First: 0,</div><div class="line">          Second: 10,</div><div class="line">          Third: 30</div><div class="line">  &#125;;</div><div class="line">  getCounterValues: function()&#123;</div><div class="line">     return this.counterValues;</div><div class="line">  &#125;,</div><div class="line">  increment: function()&#123;</div><div class="line">     this.couterValue.First++;</div><div class="line">  &#125;,</div><div class="line">  emitChange: function()&#123;</div><div class="line">     this.emit(CHANGE_EVENT); // 广播事件</div><div class="line">  &#125;,</div><div class="line">  addChangeListener: function()&#123;</div><div class="line">      this.on(CHANGE_EVENT,callback); //挂载事件</div><div class="line">  &#125;,</div><div class="line">  removeChangeListener: function ()&#123;</div><div class="line">    this.removeListener(CHANGE_EVENT,callback);     //移除监听</div><div class="line">  &#125;</div><div class="line">  /* 把CounterStore 注册到全局唯一的Dispather上，register函数接受一个回调函数做参数 */</div><div class="line">  /* 注册token(控制权令牌) */</div><div class="line">  CounterStore.dispatchToken = AppDispather.register((action)=&gt;&#123;</div><div class="line">   if(action.type === ActionTypes.INCREMENT)&#123;</div><div class="line">    /* do increment */</div><div class="line">    /* 根据action对象，修改当前Store中的counterValue变量 */</div><div class="line">       CounterStore.increment();</div><div class="line">   &#125;else if (action.type === ActionTypes.DECREMENT)&#123;</div><div class="line">    /* do decrement */</div><div class="line">    /* 根据 action的对象,修改当前Store中的counterValues变量 */</div><div class="line">&#125;</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>代表一个动作的纯数据对象<br>是js对象，且不自带方法，用于驱动Dispather，来自用户的请求<br>Action并不包含数据处理逻辑，而是调用函数，来创建对应的action对象<br>文件： <strong>// ActionTypes.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'decrement'</span>;</div></pre></td></tr></table></figure></p>
<p>文件：<strong>// action.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ActionTypes form <span class="string">'./ActionTypes.js'</span>;</div><div class="line"><span class="keyword">import</span> AppDispatcher <span class="keyword">from</span> <span class="string">'./AppDispatcher.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> increment = <span class="function">(<span class="params">counterCaption</span>) =&gt;</span>&#123;</div><div class="line">  AppDispatcher.dispatch(&#123; </div><div class="line">     <span class="attr">type</span>: ActionTypes.INCREMENT, <span class="comment">// action对象类型</span></div><div class="line">     counterCaption:counterCaption <span class="comment">// 用于标识发出的action的来源（即网页元素）</span></div><div class="line">     </div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>用户在界面中调用action</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line">impor CounterStore <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</div><div class="line"><span class="keyword">import</span> Actions <span class="keyword">from</span> <span class="string">'./action'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">   <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">          <span class="attr">couterValue</span>:CounterStore.getCounterValues(),</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"> componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    CounterStore.addChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line"> <span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    CounterStore.removeChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line"> <span class="attr">_onChange</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">couterValue</span>:CounterStore.getCounterValues()</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">    <span class="comment">/* react 组件中的事件 */</span></div><div class="line"> onClickBtn()&#123;</div><div class="line">    <span class="comment">/* increment 已经在对应的Store中完成注册，Dispather可识别 */</span></div><div class="line">    Actions.increment(<span class="keyword">this</span>.props.caption);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Flux-的拟物化描述"><a href="#Flux-的拟物化描述" class="headerlink" title="Flux 的拟物化描述"></a>Flux 的拟物化描述</h2><h3 id="Dispather"><a href="#Dispather" class="headerlink" title="Dispather"></a><strong>Dispather</strong></h3><p>在十字路口中央指挥交通的交警，不会离开工作地点，是唯一的；<br>当有人督促我派发（Dispatch）一下action,我就要打电话给我的小协警了，叫他赶紧把这个家伙的事情处理一下</p>
<h3 id="Store-1"><a href="#Store-1" class="headerlink" title="Store"></a><strong>Store</strong></h3><p>注册：协警把自己的电话号码给了十字路口的交警并告诉他：”发生交通事故就打这个电话找我，我自己处理现场”<br>emit广播事件：如果有人叫我处理交通事故；<br>on 挂载事件：如果有人叫我处理交通事故，我要给出反应</p>
<h3 id="View-1"><a href="#View-1" class="headerlink" title="View"></a><strong>View</strong></h3><p>路上的车主，一旦和别人的车撞上了，我要发出一个Action（下车跑去找交警我的事故属于那种类型）让交警知道我撞车了，不然他会不理我的</p>
<h3 id="Action-1"><a href="#Action-1" class="headerlink" title="Action"></a><strong>Action</strong></h3><p>车督促交警，赶紧把我的action派发（Dispatch）出去，让交警快来处理一下</p>
<h2 id="Flux总结"><a href="#Flux总结" class="headerlink" title="Flux总结"></a><strong>Flux总结</strong></h2><ul>
<li><strong>flux的目的</strong> ：纠正MVC框架的无法禁绝View与model通信的缺点；</li>
<li><strong>flux的做法</strong> ：Store只有get方法，没有set方法；因此View只能通过get获取Store状态，不能修改状态；如果想要修改Store的状态，只能<strong>派发一个action给Dispatcher</strong>，由action中的ActionType对应的Store方法修改Store本身。</li>
<li><strong>flux的缺点</strong> ： <ul>
<li>Store之间相互依赖：需要建立依赖，需要token</li>
<li>可以但是很难进行服务器端的渲染（）</li>
<li>Store替换后，无法保持原有的存储状态（指在开发中，Store逻辑的修改无法热加载）</li>
</ul>
</li>
</ul>
<h2 id="ALt-是什么？"><a href="#ALt-是什么？" class="headerlink" title="ALt 是什么？"></a>ALt 是什么？</h2><p>解释： alt是flux的另一种实现方法<br>简单的实现就是四步：</p>
<ol>
<li>创建View，在View监听Store的变化</li>
<li>在View里，调用相应的action，在action里处理相应的逻辑，使用dispatcher把结果发送给Store</li>
<li>在Store里，做相应的处理，存储数据。</li>
<li>View监听到Store有变化，调用this.setState()或this.forceUpdate()触发render(),在render()根据不同的state渲染不同的页面。</li>
</ol>
<ul>
<li>ALT在各种flux的设计思路中是比较容易上手的。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1847986-1a91b1a23f8b0b05.png?imageMogr2/auto-orient/strip" alt="ALT"></p>
<p>创建一个alt 把action和Store都放进去。</p>
<h2 id="alt使用方法"><a href="#alt使用方法" class="headerlink" title="alt使用方法"></a><strong>alt使用方法</strong></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install alt</div></pre></td></tr></table></figure>
<h3 id="文件夹的厄目录结构"><a href="#文件夹的厄目录结构" class="headerlink" title="文件夹的厄目录结构"></a>文件夹的厄目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">your_project</div><div class="line"> |--action/</div><div class="line">    |--MyActions.js</div><div class="line"> |--stores/</div><div class="line">    |--MyStore.js</div><div class="line"> |--components/</div><div class="line">    |--MyComponent.js</div><div class="line"> |--alt.js</div><div class="line"> |--app.js</div></pre></td></tr></table></figure>
<h3 id="创建一个alt"><a href="#创建一个alt" class="headerlink" title="创建一个alt"></a>创建一个alt</h3><p>在项目的根目录下创建一个名字为alt.js的文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Alt = <span class="built_in">require</span>(<span class="string">'alt'</span>);</div><div class="line"><span class="keyword">var</span> alt = <span class="keyword">new</span> Alt();</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = alt;</div></pre></td></tr></table></figure></p>
<h3 id="创建一个Action"><a href="#创建一个Action" class="headerlink" title="创建一个Action"></a>创建一个Action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* actions/LocationAction.js */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> alt  = <span class="built_in">require</span>(<span class="string">'../alt'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationActions</span> </span>&#123;</div><div class="line">    updateLocations(locations)&#123;</div><div class="line">      <span class="keyword">return</span> locations;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = alt.createActions(LocaActions);</div></pre></td></tr></table></figure>
<h3 id="创建一个Store"><a href="#创建一个Store" class="headerlink" title="创建一个Store"></a>创建一个Store</h3><p>可以使用常规构造函数和原型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> alt = <span class="built_in">require</span>(<span class="string">'../alt'</span>);</div><div class="line"><span class="keyword">var</span> LocationActions = <span class="built_in">require</span>(<span class="string">'../actions/LocationActions'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationStore</span></span>&#123;</div><div class="line">   construtor()&#123;</div><div class="line">      <span class="keyword">this</span>.locations = [];</div><div class="line">      <span class="comment">/* 在构造函数中 我们将我们的的action绑定 */</span></div><div class="line">      <span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">        <span class="attr">handleUpdateLocations</span>: LocationActions.UPDATE_LOCATIONS</div><div class="line">      &#125;)</div><div class="line">   &#125;</div><div class="line">  <span class="comment">/* 接下来 我们在Store中定义处理这些操作的方法。*/</span></div><div class="line">  handleUpdateLocations(locations)&#123;</div><div class="line">     <span class="keyword">this</span>.locations = locations;</div><div class="line">     <span class="comment">/*可以返回 false 去抑制Store更改事件*/</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"><span class="comment">// 导出创建的store</span></div><div class="line"><span class="built_in">module</span>.exports = alt.createStore(LocationStore,<span class="string">'LocationStore'</span>);</div></pre></td></tr></table></figure>
<h3 id="使用View"><a href="#使用View" class="headerlink" title="使用View"></a>使用View</h3><p>创建 components/Locations.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> LocationStore <span class="keyword">from</span> <span class="string">'../stores/LocationStore'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Locations</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">   construtor()&#123;</div><div class="line">       <span class="keyword">super</span>();</div><div class="line">       <span class="keyword">this</span>.state=&#123;</div><div class="line">          <span class="attr">locations</span>:LocationStore.getState()</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   componentDidMount() &#123;</div><div class="line">         LocationStore.listen(<span class="keyword">this</span>.onChange);</div><div class="line">   &#125;,</div><div class="line">   componentWillUnmount()&#123;</div><div class="line">         LocationStore.unlisten(<span class="keyword">this</span>.onchange);</div><div class="line">   &#125;,</div><div class="line">   onChange(state)&#123;</div><div class="line">     <span class="keyword">this</span>.setState(state);</div><div class="line">   &#125;,</div><div class="line">   render()&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">      &lt;ul&gt;</div><div class="line">         &#123;this.state.locations.map((location)=&gt;&#123;</div><div class="line">            return (</div><div class="line">              &lt;li&gt;&#123;location.name&#125;&lt;/li&gt;</div><div class="line">            );</div><div class="line">         &#125;)&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">      );</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Locations;</div></pre></td></tr></table></figure></p>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>使用异步的方法获取数据，你可以把它放在action或者Store，在这我们将放在action中进行异步请求数据</p>
<p>首先，创建source/LocationSource.js 你可以使用类似于fetch从服务器获取某些数据，在这里，我们将使用setTimeout和Promise模拟使用fetch API 进行资源请求；</p>
<p><strong>创建</strong> source/LocationSource.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">/*模拟数据*/</span></div><div class="line"><span class="keyword">var</span> mockData = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'Abu Dhabi'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Berlin'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Bogota'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'Buenos Aires'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'Cairo'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'Chicago'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'Lima'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'London'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'Miami'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'Moscow'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">'Mumbai'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">name</span>: <span class="string">'Paris'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">'San Francisco'</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> LocationSource = &#123;</div><div class="line">   <span class="attr">fetch</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">         setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             resolve(mockData);</div><div class="line">         &#125;,<span class="number">250</span>)</div><div class="line">     &#125;)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们需要更改action使用我们创建的这种新方法,我们将添加一个action调用这个方法,fetchLocations,它将获取location然后调用updateLocations，当完成之后，一个新的Action locationsFailed 来处理得不到的location 在这个class 添加这个方法;</p>
<p>文件： actions/LocationActions.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> fetchLocations() &#123;</div><div class="line">     <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</div><div class="line">         dispatch();</div><div class="line">         LocationSource.fetch()</div><div class="line">           .then(<span class="function">(<span class="params">locations</span>)=&gt;</span>&#123;</div><div class="line">               <span class="keyword">this</span>.updateLocations(locations);</div><div class="line">           &#125;)</div><div class="line">           .catch(<span class="function">(<span class="params">errorMessage</span>)=&gt;</span>&#123;</div><div class="line">                <span class="keyword">this</span>.locationsFailed(errorMessage);</div><div class="line">           &#125;)</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line">locationsFailed(errorMessage) &#123;</div><div class="line">     <span class="keyword">return</span> errorMessage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后更新Store去处理新的action，这只是添加一个新的actions 通过bindListeners去处理,增加一个新的状态’errorMessage’去处理错误的信息,</p>
<p>文件: stores/LocationStore.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationStore</span> </span>&#123;</div><div class="line">   <span class="keyword">constructor</span>() &#123;</div><div class="line">      <span class="keyword">this</span>.locatoions = [];</div><div class="line">      <span class="keyword">this</span>.errorMessage = <span class="literal">null</span>;</div><div class="line">      <span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">          <span class="attr">handleUpdateLocations</span>: LocationActions.UPDATE_LOCATIONS,</div><div class="line">          <span class="attr">handleFetchLocations</span>: LocationActions.FETCH_LOCATIONS,</div><div class="line">          <span class="attr">handleLocationsFailed</span>: LocationActions.LOCATIONS_FAILED</div><div class="line">      &#125;)</div><div class="line">   &#125;  </div><div class="line">   </div><div class="line">  handleUpdateLocations(locations) &#123;</div><div class="line">        <span class="keyword">this</span>.locations = locations;</div><div class="line">        <span class="keyword">this</span>.errorMessage = <span class="literal">null</span>;</div><div class="line">   &#125;,</div><div class="line">  handleFetchLocations() &#123;</div><div class="line">        <span class="keyword">this</span>.locations = [];</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  handleLocationsFailed(errorMessage) &#123;</div><div class="line">        <span class="keyword">this</span>.errorMessage = errorMessage;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们给View加上缓冲数据的动画：<br>文件： components/Locations.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">  LocationStore.listen(<span class="keyword">this</span>.onChange);</div><div class="line">  </div><div class="line">  LocationActions.fetchLocations();</div><div class="line">&#125;</div><div class="line">render() &#123;</div><div class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>.state.errorMessage)&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;Something is wrong&lt;/div&gt;</div><div class="line">      );</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span>(!<span class="keyword">this</span>.state.locations.length)&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;image src="/my-cool-spinner.gif" /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      );</div><div class="line">   &#125;</div><div class="line">   return (</div><div class="line">   &lt;ul&gt;</div><div class="line">     &#123;this.state.locations.map((location) =&gt; &#123;</div><div class="line">       return (</div><div class="line">         &lt;li&gt;&#123;location.name&#125;&lt;/li&gt;</div><div class="line">       );</div><div class="line">     &#125;)&#125;</div><div class="line">   &lt;/ul&gt;</div><div class="line"> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h3><p>处理Store之间的数据依赖往往是一个棘手和耗时的工作，FLux提供的这种方法，称之为waitFor，哪个信号发送给调度程序，这个store就依赖于哪个store的数据。<br>我们新建一个FavoriteStore 可以标记你想要的location，只有在FavoriteStore获取更新后，才需要更新LocationStore。</p>
<ul>
<li><p>首先我们在LocationActions添加一个新的action。<br>文件： <strong>actions/LocationActions.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">favoriteLocation(locationId)&#123;</div><div class="line">   <span class="keyword">this</span>.dispatch(locationId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接下来，新建一个store<br>文件： stores/FavoriteStore.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> alt form <span class="string">'../alt'</span>;</div><div class="line"><span class="keyword">import</span> LocationActions form <span class="string">'../actions/LocationActions'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FavoritesStore</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">       <span class="keyword">this</span>.locations = [];</div><div class="line">       </div><div class="line">       <span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">         <span class="attr">addFavoriteLocation</span>: LocationActions.FAVORITE_LOCATION</div><div class="line">       &#125;);</div><div class="line">    &#125;</div><div class="line">    addFavoriteLocation(locations)&#123;</div><div class="line">         <span class="keyword">this</span>.locations.push(location);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = alt.creteStore(FavoritesStore,<span class="string">'FavoritesStore'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后我们在LocationStore中设置waitFor 依赖关系，首先确保将新的action绑定到Store中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">  <span class="attr">handleUpdateLocations</span>: LocationActions.UPDATE_LOCATIONS,</div><div class="line">  <span class="attr">handleFetchLocations</span>: LocationActions.FETCH_LOCATIONS,</div><div class="line">  <span class="attr">handleLocationsFailed</span>: LocationActions.LOCATIONS_FAILED,</div><div class="line">  <span class="attr">setFavorites</span>: LocationActions.FAVORITE_LOCATION</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>创建一个action处理waitFor</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">resetAllFavorites() &#123;</div><div class="line">  <span class="keyword">this</span>.locations = <span class="keyword">this</span>.locations.map(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">id</span>: location.id,</div><div class="line">      <span class="attr">name</span>: location.name,</div><div class="line">      <span class="attr">has_favorite</span>: <span class="literal">false</span></div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">setFavorites(location) &#123;</div><div class="line">  <span class="keyword">this</span>.waitFor(FavoritesStore);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> favoritedLocations = FavoritesStore.getState().locations;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.resetAllFavorites();</div><div class="line">favoritedLocations.forEach(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// find each location in the array</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.locations.length; i += <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">      <span class="comment">// set has_favorite to true</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.locations[i].id === location.id) &#123;</div><div class="line">        <span class="keyword">this</span>.locations[i].has_favorite = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="容器组件（container-component）"><a href="#容器组件（container-component）" class="headerlink" title="容器组件（container component）"></a>容器组件（container component）</h3><p>什么是container component ？<br>它是负责管理你状态的组件，记得在View中我们如何进行混合状态渲染吗？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Locations = React.createClass(&#123;</div><div class="line">     getInitialState() &#123;</div><div class="line">         <span class="keyword">return</span> LocationStore.getState();</div><div class="line">     &#125;,</div><div class="line">     componentDidMount() &#123;</div><div class="line">       LocationStore.listen(<span class="keyword">this</span>.onChange);</div><div class="line">     &#125;,</div><div class="line">     onChange(state)&#123;</div><div class="line">      <span class="keyword">this</span>.setState(state);</div><div class="line">     &#125;,</div><div class="line">     render() &#123;</div><div class="line">       <span class="keyword">return</span>(</div><div class="line">          &lt;ul&gt;</div><div class="line">             &#123;this.state.location.map((location)=&gt;&#123;</div><div class="line">               return (</div><div class="line">                 &lt;li&gt;&#123;location.name&#125;&lt;/li&gt;</div><div class="line">               );</div><div class="line">             &#125;)&#125;</div><div class="line">          &lt;/ul&gt;</div><div class="line">       );</div><div class="line">     &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这实际上是一个糟糕的模式，因为它很难复用。您的组件应分为两种类型：管理状态（状态组件）和处理数据显示（纯组件）的组件.</p>
<p>纯组件的目标是写它们，以便他们只接受props，并负责将这些props渲染成一个view。这样可以更容易地测试和重新使用这些组件。一个简单的例子是UserComponent，您可以将其与UserStore相结合.<br>纯location组件如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var Locations = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;ul&gt;</div><div class="line">        &#123;this.props.locations.map((location, i) =&gt; &#123;</div><div class="line">          return (</div><div class="line">            &lt;li key=&#123;i&#125;&gt;</div><div class="line">              &#123;location.name&#125;</div><div class="line">            &lt;/li&gt;</div><div class="line">          );</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>看起来足够简单，我们真正做到了从this.state到this.props和移除所有store的监听，so，如何监听Store呢？<br>有两种方式去创建一个 container component 在alt，通过一个声明式,通过一个函数,我们可以看出两者的不同。  </p>
<h3 id="connectStores"><a href="#connectStores" class="headerlink" title="connectStores"></a>connectStores</h3><p>通过一个uilt我们将连接component到store</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> LocationsContainer = connectToStores(&#123;</div><div class="line">     getStore() &#123;</div><div class="line">        <span class="keyword">return</span> [locationStore]</div><div class="line">     &#125;,</div><div class="line">     getPropsFormStore() &#123;</div><div class="line">        <span class="keyword">var</span> locationState = LocationStore.getState()</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">           <span class="attr">locations</span>: locationState.locations</div><div class="line">        &#125;</div><div class="line">     &#125;,</div><div class="line">     React.createClass(&#123;</div><div class="line">        render() &#123;</div><div class="line">           <span class="keyword">return</span> &lt;Locations locations=&#123;this.props.locations&#125; /&gt;</div><div class="line">        &#125;</div><div class="line">     &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>您可以看到，现在可以在其他地方重新使用location，因为它不会绑定到特定的store。所有的location都会接受一系列的location，并关心自己的render。这可能看起来像额外的样板，但是稍后再回到应用程序来维护它时，将会很方便。connectToStores处理store店的listen和unlisten。每次store改变时，getPropsFromStores都会被调用，其结果作为props传递给连接的组件。</p>
<p>请注意，如上所述，connectToStores实际上是使用一个容器组件来包装您的React组件，该容器组件处理监听存储并将该状态作为道具传递给组件。如果您正在使用connectToStores装饰器，您将需要确保它是最外面的装饰器，以确保其他装饰器应用于实际组件而不是包装组件。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@connectToStores</div><div class="line">@someDecorator</div><div class="line">@anotherDecorator</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等价于  connectToStores(someDecorator(anotherDecorator(MyComponent)))</span></div></pre></td></tr></table></figure>
<h3 id="AltContainer"><a href="#AltContainer" class="headerlink" title="AltContainer"></a>AltContainer</h3><p>这是一个可以用来声明性地connect一个store，或将action或上下文传递给纯组件的组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> LocationsContainer = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;AltContainer store=&#123;LocationStore&#125;&gt;</div><div class="line">        &lt;Locations /&gt;</div><div class="line">      &lt;/AltContainer&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<p>使用AltContainer，将单个store连接到单个组件相当简单，我们使用store prop。这将自动listen和unlisten您的store，并且每当状态更改时，它将重新render子组件将整个store的状态作为props传递给每个组件。</p>
]]></content>
      
        
        <tags>
            
            <tag> React </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[初识Vue-简介]]></title>
      <url>https://wiestlee.github.io/2017/03/20/%E5%88%9D%E8%AF%86vue/</url>
      <content type="html"><![CDATA[<h3 id="Vue-js简介"><a href="#Vue-js简介" class="headerlink" title="Vue.js简介"></a>Vue.js简介</h3><p>Vue.js是一款轻量级的以数据驱动的前端JS框架，其和JQuery最大的不同点在于JQuery通过操作DOM来改变页面的显示，而Vue通过操作数据来实现页面的更新与展示。</p>
<p>Vue.js主要负责的是ViewModel的部分，其在View层（即DOM层）与Model层（即JSl逻辑层）之间通过ViewModel绑定了DOM Listeners与Data Bingings两个相当于监听器的东西。</p>
<p>当View层的视图发生改变时，Vue会通过DOM Listeners来监听并改变Model层的数据。相反，当Model层的数据发生改变时，其也会通过Data Bingings来监听并改变View层的展示。这样便实现了一个双向数据绑定的功能，也是Vue.js数据驱动的原理所在。</p>
<h3 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">    el:&apos;#demo&apos;,</div><div class="line">    data:&#123;</div><div class="line">        a:1,</div><div class="line">        b:2</div><div class="line">    &#125;,</div><div class="line">    created:function()&#123;</div><div class="line">       //this 指向 vm 实例</div><div class="line">       console.log(&apos;a is&apos;+this.a)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在一个html文件中，我们直接可以通过script标签引入Vue.js，然后就可以在页面里写Vue.js代码了。上图中我们通过new Vue()构建了一个Vue的实例，在实例中，可以包含挂在元素（el），数据（data），模板（template），方法（methods）与生命周期钩子（created等）等选项。不同的实例选项拥有不同的功能，如：</p>
<blockquote>
<ul>
<li>（1）el表明我们的Vue需要操作哪一个元素下的区域，’#demo’表示操作id为demo的元素下区域。</li>
<li>（2）data表示Vue 实例的数据对象，data 的属性能够响应数据的变化。</li>
<li>（3）created表示实例生命周期中创建完成的那一步，当实例已经创建完成之后将调用其方法。</li>
</ul>
</blockquote>
<h3 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;demo&quot;&gt;</div><div class="line">   &lt;p v-text=&quot;p1&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-html=&quot;p2&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-if=&quot;p3&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-else&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-show=&quot;p5&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-for=&quot;p in p6&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-on:click=&quot;showP3&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-bind:title=&quot;p7&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;input v-model=&quot;p8&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-cloak&gt;&#123;&#123; p9 &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>在Vue项目的开发中，我们使用的最多的应该就属Vue的指令了。通过Vue提供的常用指令，我们可以淋漓尽致地发挥Vue数据驱动的强大功能。以下便是图中常用指令的简单介绍：</p>
<p>（1）v-text: 用于更新绑定元素中的内容，类似于jQuery的text()方法<br>（2）v-html: 用于更新绑定元素中的html内容，类似于jQuery的html()方法<br>（3）v-if: 用于根据表达式的值的真假条件渲染元素，如果上图P3为false则不会渲染P标签<br>（4）v-show: 用于根据表达式的值的真假条件显示隐藏元素，切换元素的 display CSS 属性<br>（5）v-for: 用于遍历数据渲染元素或模板，如图中P6为[1,2,3]则会渲染3个P标签，内容依次为1，2，3<br>（6）v-on: 用于在元素上绑定事件，图中在P标签上绑定了showP3的点击事件</p>
<p>关于更多的Vue指令可以查看Vue2.0文档，地址：<a href="https://vuefe.cn/api/#指令" target="_blank" rel="external">https://vuefe.cn/api/#指令</a></p>
<h3 id="Vue-js技术栈"><a href="#Vue-js技术栈" class="headerlink" title="Vue.js技术栈"></a>Vue.js技术栈</h3><p>以上我们讲到可以直接在一个html页面里通过引入Vue.js来直接写Vue代码，但是这样的方式并不常用。因为如果我们的项目比较大，项目中会存在很多页面，一旦每个页面都引入一个Vue.js或者声明一个Vue实例，这样非常不利于后期的维护和代码的公用，也会存在实例名冲突的情况，所以我们需要用到Vue提供的技术栈来构建强大的前端项目。</p>
<p>除了Vue.js我们还需要用到：<br>（1）vue-cli：Vue的脚手架工具，用于自动生成Vue项目的目录及文件。<br>（2）vue-router： Vue提供的前端路由工具，利用其我们实现页面的路由控制，局部刷新及按需加载，构建单页应用，实现前后端分离。<br>（3）vuex：Vue提供的状态管理工具，用于同一管理我们项目中各种数据的交互和重用，存储我们需要用到数据对象。<br>（4）ES6：Javascript的新版本，ECMAScript6的简称。利用ES6我们可以简化我们的JS代码，同时利用其提供的强大功能来快速实现JS逻辑。<br>（5）NPM：node.js的包管理工具，用于同一管理我们前端项目中需要用到的包、插件、工具、命令等，便于开发和维护。<br>（6）webpack：一款强大的文件打包工具，可以将我们的前端项目文件同一打包压缩至js中，并且可以通过vue-loader等加载器实现语法转化与加载。<br>（7）Babel：一款将ES6代码转化为浏览器兼容的ES5代码的插件</p>
<p>利用以上等技术，我们便可以开始构建我们的Vue项目了。</p>
<h3 id="构建大型应用"><a href="#构建大型应用" class="headerlink" title="构建大型应用"></a>构建大型应用</h3><blockquote>
<ul>
<li>项目前端目录文件构建 (vue-cli)</li>
<li>组件编写及通信 （什么是组件）</li>
<li>插件使用与文件打包 （webpack）</li>
</ul>
</blockquote>
<p>在构建我们的中大型Vue项目中，我们主要介绍如何利用vue-cli来自动生成我们项目的前端目录及文件，了解Vue中一切皆组件的概念及父子组件的通信问题，讲解在Vue项目中我们如何使用第三方插件，最后利用webpack来打包及部署我们的项目。</p>
<h3 id="vue-cli-构建"><a href="#vue-cli-构建" class="headerlink" title="vue-cli 构建"></a>vue-cli 构建</h3><blockquote>
<ul>
<li>npm install -g vue-cli</li>
<li>vue init webpack my-project</li>
<li>cd my-project</li>
<li>npm install</li>
<li>npm run dev</li>
</ul>
</blockquote>
<p>在使用vue-cli之前我们需要安装node.js，利用其提供的npm命令来安装vue-cli。安装node.js只需去其官网下载软件并安装即可，地址为：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p>
<p>安装完成之后我们打开电脑的cmd命令行工具依次输入上图中的命令：</p>
<p>（1）npm install -g vue-cli：全局安装vue-cli<br>（2）vue init webpack my-project: 利用vue-cli在目录地址生成一个基于webpack的名为’my-project‘的Vue项目文件及目录<br>（3）cd my-project：打开刚刚创建的文件夹<br>（4）npm intall：安装项目所依赖的包文件<br>（5）npm run dev：利用本地node服务器在浏览器中打开并浏览项目页面</p>
<p>这样我们的一个基于webpack的vue项目目录就构建好了。</p>
<h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>在刚刚构建好的vue项目中，我们会发现一个App.vue和Hello.vue的文件，那么像这样的以.vue后缀结尾的文件便是我们Vue项目中常见的单文件组件。单文件组件包含了一个功能或模块的html、js及css。在.vue文件中，我们可以在template标签中写html，在script标签中写js，在style标签中写css。这样一个功能或模块就是一个.vue组件，对于组件公用和后期的维护也非常便捷。</p>
<h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><p>那么像这样在以单文件组件为核心的项目开发中，我们一定会想到一个问题，就是.vue父子组件之间是如何交换数据来实现通信的呢？在Vue2.0中提供了props来实现父组件向子组件传递数据，通过$emit来实现子组件向父组件传递数据。当然如果是较为复杂和普遍的数据交互，建议大家使用vuex来同一管理数据。详情请见：<a href="https://vuefe.cn/guide/components.html#使用Props传递数据" target="_blank" rel="external">https://vuefe.cn/guide/components.html#使用Props传递数据</a></p>
<h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><p>插件使用<br>接下来我们介绍下在基于webpack的vue项目中我们是如何使用插件的，主要有两种情况：</p>
<p>（一）全局使用<br>（1）在index.html引入：这样的方式不推荐使用，因为存在先后加载顺序的问题，有些插件不支持这一方式。<br>（2）通过webpack配置文件引入：主要通过plugin配置项的webpack.ProvidePlugin()方法实现，不过只适合支持CommonJs规范并提供一个全局变量的插件，如jQuery中的$。<br>（3）通过import + Vue.use()引入：这种方式需要在全局.vue文件中import需要加载的插件，然后通过Vue.use(‘插件变量名’)来实现，不过此方法只支持遵循Vue.js插件编写规范的插件使用，如vue-resourece。</p>
<p>（二）单文件使用<br>（1）通过import直接引入：这种方式可以在需要调用插件的.vue文件中使用，不过需要注意和实例的创建顺序问题，或者也可以通过require引入。<br>（2）import + components注册：此方式为Vue组件的使用方式，可以在一个组件中注册并使用一个子组件。</p>
<h3 id="部署及优化"><a href="#部署及优化" class="headerlink" title="部署及优化"></a>部署及优化</h3><blockquote>
<ul>
<li>使用Webpack的DefinePlugin来指定生产环境</li>
<li>使用UglifyJS自动删除代码块内的警告语句</li>
<li>使用v-if减少不必要的组件加载</li>
</ul>
</blockquote>
<p>当我们搞定整个Vue项目的前端编码阶段后，我们需要对我们的前端项目文件进行部署和优化工作，主要的几个方式如下：<br>（1）使用webpack的DefinePlugin指定生产环境：通过plugin中的DefinePlugin配置，我们可以声明’process.env’属性为’development’(开发环境)或者’production’(生产环境)，结合npm配置文件package.json中scripts的命令来切换环境模式十分方便。<br>（2）使用UglifyJs自动删除代码块内的警告语句：一般在生产环境的webpack配置文件中使用，通过new webpack.optimize.UglifyJsPlugin()来进行配置，删除警告语句可以缩减文件的体积。<br>（3）使用Webpack hash处理缓存：当我们需要对发布到线上的文件进行修改时，重新编译的文件名如果和之前版本的相同会引起浏览器无法识别而加载缓存文件的问题。这样我们需要自动的生成带hash值的文件名来阻止缓存。详见：<a href="https://segmentfault.com/a/1190000006178770#articleHeader7" target="_blank" rel="external">https://segmentfault.com/a/1190000006178770#articleHeader7</a><br>（4）使用v-if减少不必要的组件加载：v-if指令其实很有用处，它可以让我们项目中暂时不需要的组件不进行渲染，等需要用到的时候在渲染，比如某个弹窗组件等。这样我们可以减少页面首次加载的时间和文件量。</p>
<p>除了以上几点的优化，还有很多优化选择，有兴趣的可以好好地了解下webpack的API文档，毕竟webpack的功能十分强大。</p>
]]></content>
      
        
        <tags>
            
            <tag> Vue </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML全局属性]]></title>
      <url>https://wiestlee.github.io/2017/03/18/tags-%20%20%5BJavaScript%5D-3/</url>
      <content type="html"><![CDATA[<p>HTML 定义了少量的属性，这些属性适用于所有的HTML elements，这些属性可以用在所有的element中，尽管有些属性对一些element没什么作用。</p>
<h3 id="accesskey"><a href="#accesskey" class="headerlink" title="accesskey"></a>accesskey</h3><p>这个属性提供了一种使用快捷键访问当前元素的途径。它是用一个字符（单个Unicode code）列表的独立规范构成。浏览器应该使用键盘的第一布局。</p>
<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>这个属性是一个element的class的独立规范列表。class允许css和javascript通过class选择器或者类似下面的DOM方法来选择和访问element<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Document.getElementsByClassName(&quot;className&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h3><p>HTML5 :这个可枚举的属性表示这个<strong><em>element可以被用户编辑</em></strong>。如果是这样，浏览器会修改widget让它允许编辑。这个属性必须拥有以下值中的其中一个：</p>
<blockquote>
<ul>
<li>true 或者空字符串,表明这个element可编辑;</li>
<li>false, 表明这个element一定不能被编辑.</li>
</ul>
</blockquote>
<p>如果这个属性没有被设置，他的默认值会继承他父element的。<br><strong>使用说明: 这个属性是一个可枚举的属性，而不是一个布尔属性。这意味着true,false或空字符串的显式使用是强制的正确使用方式是：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div contenteditable=&quot;true&quot;&gt;Example Label&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="data"><a href="#data" class="headerlink" title="data-*"></a>data-*</h3><p>HTML5 这类的属性，被称为自定义属性，允许HTML与和它对应DOM表现形式之间的专有信息交换，这或许对script来说有用。这样被设置了这个属性的element就可以通过的HTMLElement的接口访问所有的自定义数据。HTMLElement.dataset属性提供了访问它们的权限。<br><strong><em> </em>可以被任何符合以下限制的the producton rule of xml names(xml的命名规则)代替：*</strong></p>
<blockquote>
<ul>
<li>名字不能以xml开头，除此之外其他任何情形都可是使用这3个字母； </li>
<li>名字不能含有分号；</li>
<li>名字不能含有大写字母。</li>
</ul>
</blockquote>
<p><strong><em> 注意：HTMLElement.dataset是一个 StringMap。一个名叫data-test-value的自定义属性可以通过HTMLElment.dataset.testValue来访问，属性的名字中的中线(U+002D)被挨着它字母的大写字母代替了（驼峰命名） </em></strong></p>
<h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><p>这个可枚举属性表明element的文本方向。它可以有以下值：</p>
<blockquote>
<ul>
<li>ltr, left to right，适用于从左向右写的语言（比如：英语）；</li>
<li>rtl, right to left，适用于从右向左写的语言（比如：阿拉伯语）</li>
<li>auto, 由代理决定。用一个最基础的算法来解析element中的字符，如果发现有一个字符具有很强的方向性，那么就把这个方向作为整个element的方向。<h3 id="draggable"><a href="#draggable" class="headerlink" title="draggable"></a>draggable</h3>这个可枚举的属性决定一个element是否能够被拖动，可以使用Drag and Drop API。它的能使用的值如下：</li>
<li>true, 表示这个element可以被拖动</li>
<li>false, 表示这个值不可以被拖动</li>
</ul>
</blockquote>
<p>如果这个属性没有被设置，默认是auto,这就意味着它的行为默认由浏览器定义。<br><strong><em> 这个属性是一个可枚举的属性，但不是一个布尔类型属性。这意味着显式使用true 或flase其中之一是强制性的，像这样的简写<label draggable="">Example Label</label>是不允许的。正确用法是<label draggable="true">Example Label</label>。 </em></strong></p>
<h3 id="dropzone"><a href="#dropzone" class="headerlink" title="dropzone"></a>dropzone</h3><p> 这个可枚举的属性决定丢到一个element上的内容类型，可以使用的Drag and Drop API。它能够使用的值如下：</p>
<blockquote>
<ul>
<li>copy, 表示丢放时会创建一个被拖拽element的副本；</li>
<li>move, 表示被拖拽的element被移动到这个新位置；</li>
<li>link, 将会给拖拽的数据（dragged data）创建一个链接；<h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3>这个布尔（Boolean）属性表示element还没有或是不再存在，当然这都是相对的。例如，你经常在页面上使用隐藏element,只有在登录处理完成后才可以被使用。浏览器不渲染这样的element。<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3>这个属性是唯一的标识，它在整个document里应该是唯一的。当需要链接（使用片段标识符，锚点），执行脚本，控制样式时，可以用它来定位识别元素。<h3 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h3>这个属性用于定义element的语言。不管这个element能不能够被编辑，都应该写上这个属性。这个标签包含单个条目值，它的格式规范定义在 Tags for Identifying Languages (BCP47)(BCP47)IETF 文档中。如果标签的内容是空字符串，那么语言就会被设置为unknown；如果标签的内容是无效的，它就被设置为 invalid<h3 id="spellcheck"><a href="#spellcheck" class="headerlink" title="spellcheck"></a>spellcheck</h3>这个可枚举的属性定义element是否检查拼写错误。它的值可以是以下：</li>
<li>true, 表示如果可能的话，element应该被检查拼写错误；</li>
<li>false, 表示element不应该检查拼写错误；</li>
</ul>
</blockquote>
<p>如果这个属性没有被设置，他默认的值是element的类型以及浏览器定义的。它也可能是 inherited,这意味着element的元素内容将被检查拼写错误，如果离它最近的祖先元素有spellcheck并且值为true。<br><strong><em> 这个属性是可枚举的，不是一个布尔属性。这意味着显式使用true 或 false 其中之一是强制性的。这样简写<label spellcheck="">Example Label</label> 是不允许的。这确的写法应该是<label spellcheck="true">Example Label</label>。<br>对于浏览器来说，这个属性只是一个提示，浏览器并不需要能够去验证拼写错误。通常不可编辑的element是不检查拼写错误的，即使spellcheck的值是true并且浏览器也支持拼写检查。 </em></strong></p>
<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>这个属性包含CSS样式声明，被应用到元素上。注意推荐将它定义在其他文件里。这个属性和<style>element主要的目的是快速编写样式，例如用来测试想要的效果。</p>
<h3 id="tabindex"><a href="#tabindex" class="headerlink" title="tabindex"></a>tabindex</h3><p>这个整数类型的属性决定element是否可以获得焦点，如果它参与到排序的键盘导航，就可以定位它。它可能需要几个值：</p>
<blockquote>
<ul>
<li>负数意味这element不可以获得焦点，也不可以通过排序的键盘导航到达；</li>
<li>0意味着element可以通过排序的键盘导航到达，但是相对顺序取决于平台惯例；</li>
<li>一个正数意味着可以通过排序的键盘导航获得焦点并到达。相对顺序去决议该属性的值，按照tabindex的增值排序。如果几个element有相同的tabindex,他们的相对顺序取决于他们在document中的位置。</li>
</ul>
</blockquote>
<p>在排序的键盘导航单上，如果一个元素的tabindex的值是一个0或者无效值或没有该属性，那么它应该被放在值是正数的element后边。</p>
<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>这个属性包含的的是文本信息，这信息代表element自己包含的内容的公告。这样的信息一般会包含，但是不是必要的，作为用户一个提示工具。这是几个关于这个属性的用法：</p>
<blockquote>
<ul>
<li>Link: 关于被链接文档的一个标题或一段描述；</li>
<li>和图片类似的媒体element:一段描述或相关的可信度；</li>
<li>Paragraph: 脚注活评论；</li>
<li>Quotation: 关于作者等一些信息。</li>
</ul>
</blockquote>
<p>如果这个属性清除了，这意味着离它最近的祖先元素的title和它相关（能够相应地成为这个元素的提示工具）。如果这个属性是空字符串，这很明显的表示离它最近的父元素的title和它没关系（不能作为这个元素的提示工具）。</p>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><p>这是一个可枚举的属性，用于确定当页面进行本地化(localized)时，元素的属性值以及元素的文本(Text)子节点中的内容是否要进行翻译。其可取的值如下：</p>
<blockquote>
<ul>
<li>空字符串(empty)或者 “yes”，表示这个元素相关的内容将会被翻译</li>
<li>“no”，表示这个元素相关的内容不会被翻译<br>这篇文章有帮助吗？</li>
</ul>
</blockquote>
</style></p>]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[HTML5前端性能优化-页面预加载]]></title>
      <url>https://wiestlee.github.io/2017/03/18/HTML5%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%A1%B5%E9%9D%A2%E9%A2%84%E5%8A%A0%E8%BD%BD/</url>
      <content type="html"><![CDATA[<p>当提到前端性能优化时，我们首先会联想到文件的合并、压缩，文件缓存和开启服务器端的 gzip压缩等，这使得页面加载更快。<br>现在，有很多已知的技术都可以让你的网站速度变得更快：使用CSS sprites，使用图片优化工具，使用.htaccess设置页面头信息和缓存时间，JavaScript压缩，使用CDN等。而在HTML5里，出现了一个新的用来优化网站速度的新功能：页面资源预加载/预读取(Link prefetch)。</p>
<h3 id="什么是资源预加载："><a href="#什么是资源预加载：" class="headerlink" title="什么是资源预加载："></a>什么是资源预加载：</h3><blockquote>
<p>预加载是浏览器对将来可能被使用资源的一种暗示，一些资源可以在当前页面使用到，一些可能在将来的某些页面中被使用。作为开发人员，我们比浏览器更加了解我们的应用，所以我们可以对我们的核心资源使用该技术。</p>
</blockquote>
<p>简单说来就是：让浏览器预先加载用户访问当前页后极有可能访问的其他资源(页面，图片，视频等)。</p>
<h4 id="HTML5页面资源预加载-Link-prefetch-写法"><a href="#HTML5页面资源预加载-Link-prefetch-写法" class="headerlink" title="HTML5页面资源预加载(Link prefetch)写法"></a>HTML5页面资源预加载(Link prefetch)写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 预加载整个页面 --&gt;</div><div class="line">&lt;link rel=&quot;prefetch&quot; href=&quot;http://www.webhek.com/misc/3d-album/&quot; /&gt;</div><div class="line"></div><div class="line">&lt;!-- 预加载一个图片 --&gt;</div><div class="line">&lt;link rel=&quot;prefetch&quot; href=&quot; http://www.webhek.com/wordpress/</div><div class="line">wp-content/uploads/2014/04/b-334x193.jpg &quot; /&gt;</div></pre></td></tr></table></figure>
<p><strong><em> HTML5页面资源预加载/预读取(Link prefetch)功能是通过Link标记实现的，将rel属性指定为“prefetch”，在href属性里指定要加载资源的地址。火狐浏览器里还提供了一种额外的属性支持： </em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;prefetch alternate stylesheet&quot; </div><div class="line">title=&quot;Designed for Mozilla&quot; href=&quot;mozspecific.css&quot; /&gt;</div><div class="line">&lt;link rel=&quot;next&quot; href=&quot;2.html&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="什么情况下应该预加载页面资源"><a href="#什么情况下应该预加载页面资源" class="headerlink" title="什么情况下应该预加载页面资源"></a>什么情况下应该预加载页面资源</h3><p>在你的页面里加载什么样的资源，什么时候加载，这完全取决于你。下面是一些建议：</p>
<blockquote>
<ul>
<li>当页面有幻灯片类似的服务时，预加载/预读取接下来的1-3页和之前的1-3页。</li>
<li>预加载那些整个网站通用的图片。</li>
<li>预加载网站上搜索结果的下一页。</li>
</ul>
</blockquote>
<h3 id="页面资源预加载-Link-prefetch-注意事项"><a href="#页面资源预加载-Link-prefetch-注意事项" class="headerlink" title="页面资源预加载(Link prefetch)注意事项"></a>页面资源预加载(Link prefetch)注意事项</h3><p>下面是一些关于页面资源预加载(Link prefetch)的注意事项：</p>
<blockquote>
<ul>
<li>预加载(Link prefetch)不能跨域工作，包括跨域拉取cookies。</li>
<li>预加载(Link prefetch)会污染你的网站访问量统计，因为有些预加载到浏览器的页面用户可能并未真正访问。</li>
</ul>
</blockquote>
]]></content>
      
        
        <tags>
            
            <tag> HTML </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[JS数组哪些事]]></title>
      <url>https://wiestlee.github.io/2017/03/16/3/</url>
      <content type="html"><![CDATA[<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">快速排序：</div><div class="line">var quickSort = function(arr) &#123;</div><div class="line">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class="line">　　var pivotIndex = Math.floor(arr.length / 2);</div><div class="line">　　var pivot = arr.splice(pivotIndex, 1)[0];</div><div class="line">　　var left = [];</div><div class="line">　　var right = [];</div><div class="line">　　for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">　　　　if (arr[i] &lt; pivot) &#123;</div><div class="line">　　　　　　left.push(arr[i]);</div><div class="line">　　　　&#125; else &#123;</div><div class="line">　　　　　　right.push(arr[i]);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　return quickSort(left).concat([pivot], quickSort(right));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="数组随机排序"><a href="#数组随机排序" class="headerlink" title="数组随机排序"></a>数组随机排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</div><div class="line">  		arr.sort(function()&#123;</div><div class="line">  			return Math.random() - 0.5;</div><div class="line">  		&#125;)</div><div class="line">  		console.log(arr);</div></pre></td></tr></table></figure>
<p>解释下：Math.random()得到的是0~1之间的随机数。sort()可以调用一个函数做为参数，如果这个函数返回的值为-1表示数组中的a项排在b项前。如此一来，可以写一个随机函数，让Math.random()随机出来的数与0.5做为一个比较，如果大于.5就返回 -1(a排在b前面)，反之返回1(b排在a前面)</p>
<h3 id="数组去重复"><a href="#数组去重复" class="headerlink" title="数组去重复"></a>数组去重复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">第一种：</div><div class="line">var arr = [1,1,2,3,3,4,5,6,5];</div><div class="line">function noRepeat(arr)&#123;</div><div class="line">    var n = [];</div><div class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">        if(n.indexOf(arr[i])==-1)&#123;</div><div class="line">            n.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">     console.log(n);</div><div class="line">&#125;</div><div class="line">noRepeat(arr);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">第二种：</div><div class="line">var arr = [1,2,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;];</div><div class="line">Array.prototype.noRepeat =function()&#123;</div><div class="line">    this.sort();</div><div class="line">    var res = [];</div><div class="line">    for(var i=0;i&lt;this.length;i++)&#123;</div><div class="line">      if(this[i]!==res[res.length-1])&#123;</div><div class="line">        res.push(this[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">        console.log(res);</div><div class="line">&#125;</div><div class="line">arr.noRepeat();</div></pre></td></tr></table></figure>
<h3 id="数组取最大值最小值"><a href="#数组取最大值最小值" class="headerlink" title="数组取最大值最小值"></a>数组取最大值最小值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">取最大值：</div><div class="line">Array.prototype.max = function ()&#123; </div><div class="line">  var max = this[0]; </div><div class="line">  this.forEach (function(ele,index,arr)&#123; </div><div class="line">       if(ele &gt; max) &#123; </div><div class="line">           max = ele; </div><div class="line">         &#125; </div><div class="line">    &#125;) </div><div class="line">    return max; </div><div class="line">&#125; </div><div class="line">var arr = [1,45,23,3,6,2,7,234,56]; </div><div class="line">arr.max();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">去最小值：</div><div class="line">Array.prototype.min = function ()&#123; </div><div class="line">  var max = this[0]; </div><div class="line">  this.forEach (function(ele,index,arr)&#123; </div><div class="line">       if(ele &lt; min) &#123; </div><div class="line">           min = ele; </div><div class="line">         &#125; </div><div class="line">    &#125;) </div><div class="line">    return min; </div><div class="line">&#125; </div><div class="line">var arr = [1,45,23,3,6,2,7,234,56]; </div><div class="line">arr.mii();</div></pre></td></tr></table></figure>
<p>内置函数：内置函数Math.max()和Math.min()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max(1,2,5,6); //6</div><div class="line">Math.min(9,40,2,3); //2</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> javascript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[实现对象的深度clone]]></title>
      <url>https://wiestlee.github.io/2017/03/16/%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/</url>
      <content type="html"><![CDATA[<p>简单来说，有个变量a，a的值是个对象（包括基本数据类型），现在我要创建一个变量b，使它拥有跟a一样的方法和属性等等。但是a和b之间不能相互影响，即a的值不会改变b值的变化。<br>干脆直接赋值不就行了嘛？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = a;</div><div class="line">console.log(b);// 1</div><div class="line"></div><div class="line">var a = &apos;hello&apos;;</div><div class="line">var b = a;</div><div class="line">a = &apos;world&apos;;</div><div class="line">console.log(b); // hello</div><div class="line"></div><div class="line">var a = true;</div><div class="line">var b = a;</div><div class="line">a = false;</div><div class="line">console.log(b); // true</div></pre></td></tr></table></figure></p>
<p>实践证明某些Javascript的原始数据类型，如果克隆直接赋值即可。</p>
<p>关于function的深度复制：查阅了一些资料，function的深度复制和原始数类型的深度复制似乎和原始数据类型的深度复制一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = function()&#123; console.log(1); &#125;;</div><div class="line">var b = a;</div><div class="line">a = function()&#123; console.log(2); &#125;;</div><div class="line">b();// 1</div></pre></td></tr></table></figure></p>
<p>是吗？ 思考后觉得function和普通对象一样，只是我们在平常应用中习惯了整体的重新赋值，导致它在深度复制中的表现和原始类型一致：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = function()&#123; console.log(1); &#125;;</div><div class="line">a.tmp = 10;</div><div class="line">var b = a;</div><div class="line">a.tmp = 20;</div><div class="line">console.log(b.tmp); // 20</div></pre></td></tr></table></figure></p>
<p>于是乎对于function类型的深度克隆，直接赋值似乎并不是一种最好的方法（尽管实际应用中足矣）。那么如何克隆呢？<br>对象呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = [0,1,2,3];</div><div class="line">var b = a;</div><div class="line">a.push(4);</div><div class="line">console.log(b); //[0,1,2,3,4]</div></pre></td></tr></table></figure></p>
<p>虽然与预期不符，为什么会这样？因为原始数据类型存储的是对象的实际数据，而对象类型存储的是对象的引用地址。上面的例子也就是说a和b对象引用了同一个地址，无论改变a还是改变b，其实根本操作是一样的，都是对那块空间地址中的的改变。<br>于是我们知道了，对于基本的对象来说，不能只能用=赋值，然后看下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function deepClone(obj)&#123;</div><div class="line">   var o = obj instanceof Array ? []:&#123;&#125;;</div><div class="line">   for (var k in obj)&#123;</div><div class="line">      o[k] = typeof obj[k] === Object ? deepClone(obj[k]):obj[k];</div><div class="line">      return o;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">var a = [[1,2,3],[4,5,6,7]];</div><div class="line">var b = deepClone(a);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function DeepCopy(obj,newobj)&#123;</div><div class="line">  var newobj = newobj || &#123;&#125;;</div><div class="line">  for(var i in obj)&#123;</div><div class="line">   if(typeof obj[i]==&quot;object&quot;)&#123;</div><div class="line">     newobj[i]=(obj[i].constructor===Array)?[]:&#123;&#125;;</div><div class="line">     Deepcopy(obj[i],newobj[i]);</div><div class="line">   &#125;else&#123;</div><div class="line">      newobj[i]=obj[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return newobj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>似乎可以解决一般的对象（包括Array）的深度克隆了，或许这会有个疑问，new String（…）这类的也是对象啊，可是你克隆不了啊，… 但是深度克隆的主要点不在这里，可能在于：</p>
<blockquote>
<ul>
<li>原始数据类型的直接赋值</li>
<li>function的exception</li>
<li>对象深度克隆中Array类型的判断</li>
<li>克隆函数的递归调用</li>
</ul>
</blockquote>
<p><a href="http://web.jobbole.com/82517/#article-comment" target="_blank" rel="external">分享来源</a></p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[点击页面空白处，弹窗消失的实现方法]]></title>
      <url>https://wiestlee.github.io/2017/03/13/tags-%5Bjavascript%5D-2/</url>
      <content type="html"><![CDATA[<h3 id="在浏览网页时，经常看到这样一个效果，当我们点击一个链接时，会弹出一个弹窗或弹出一个模块，当点击页面空白处（不包含弹窗模块部分），弹窗会消失。"><a href="#在浏览网页时，经常看到这样一个效果，当我们点击一个链接时，会弹出一个弹窗或弹出一个模块，当点击页面空白处（不包含弹窗模块部分），弹窗会消失。" class="headerlink" title="在浏览网页时，经常看到这样一个效果，当我们点击一个链接时，会弹出一个弹窗或弹出一个模块，当点击页面空白处（不包含弹窗模块部分），弹窗会消失。"></a>在浏览网页时，经常看到这样一个效果，当我们点击一个链接时，会弹出一个弹窗或弹出一个模块，当点击页面空白处（不包含弹窗模块部分），弹窗会消失。</h3><p>下面是在stackoverflow上看到的，比较简单的实现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">$(document).click(function(e)&#123;</div><div class="line">  var target_area = $(&quot;目标区域&quot;);//设置目标区域</div><div class="line">  if(!target_area.is(e.target)&amp;&amp;target_area.has(e.target).length === 0)&#123;</div><div class="line">    some code....</div><div class="line">  &#125;</div><div class="line">&#125;)</div><div class="line">/*</div><div class="line"> 原理说明：</div><div class="line"> 1、事件对象不是目标区域</div><div class="line"> 2、事件对象不是目标区域的子元素</div><div class="line">*/</div></pre></td></tr></table></figure></p>
<p>作者 [李伟振]     </p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[js中如何获取多个返回值]]></title>
      <url>https://wiestlee.github.io/2017/03/12/tags-%20%20%5BJavaScript%5D/</url>
      <content type="html"><![CDATA[<h3 id="在JS编程中，我们往往需要一个方法来返回一个或多个值，我们可以使用一下方法："><a href="#在JS编程中，我们往往需要一个方法来返回一个或多个值，我们可以使用一下方法：" class="headerlink" title="在JS编程中，我们往往需要一个方法来返回一个或多个值，我们可以使用一下方法："></a>在JS编程中，我们往往需要一个方法来返回一个或多个值，我们可以使用一下方法：</h3><h4 id="1、首先，如何接收一个返回值"><a href="#1、首先，如何接收一个返回值" class="headerlink" title="1、首先，如何接收一个返回值:"></a>1、首先，如何接收一个返回值:</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  function fun1()&#123;</div><div class="line">     var a = 6;</div><div class="line">     return a;</div><div class="line">  &#125;</div><div class="line">  function fun2()&#123;</div><div class="line">     var i = fun1();</div><div class="line">     console.log(i);</div><div class="line">  &#125;</div><div class="line">  fun2();//6</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="2、使用数组返回多个值："><a href="#2、使用数组返回多个值：" class="headerlink" title="2、使用数组返回多个值："></a>2、使用数组返回多个值：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  function fun1()&#123;</div><div class="line">    var names = [&quot;jack&quot;,&quot;tom&quot;];</div><div class="line">    return names;</div><div class="line">  &#125;</div><div class="line">  function fun2()&#123;</div><div class="line">     var names = fun1();</div><div class="line">     console.log(names);</div><div class="line">     console.log(names[0]);</div><div class="line">  &#125;</div><div class="line">  function fun3()&#123;</div><div class="line">     var names = fun1();</div><div class="line">     console.log(names[0]);</div><div class="line">  &#125;</div><div class="line">  fun2()// [&quot;jack&quot;,&quot;tom&quot;] </div><div class="line">  fun3()// jack</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="3、使用json数据返回，如下"><a href="#3、使用json数据返回，如下" class="headerlink" title="3、使用json数据返回，如下"></a>3、使用json数据返回，如下</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">  function fun1()&#123;</div><div class="line">     var info  = &#123;&quot;name&quot;:&quot;jack&quot;,&quot;age&quot;:21&#125;;</div><div class="line">     return info;</div><div class="line">  &#125;</div><div class="line">  function fun2()&#123;</div><div class="line">     var info = fun1();</div><div class="line">     var name = info[&quot;name&quot;];</div><div class="line">     var age  = info[&quot;age&quot;];</div><div class="line">     console.log(`我的名字是:$&#123;name&#125;\n我的年龄是$&#123;age&#125;`);</div><div class="line">  &#125;</div><div class="line">  fun2();//我的名字是:jack</div><div class="line">         //我的年龄是21</div><div class="line">&lt;/script&gt;</div></pre></td></tr></table></figure>
<h4 id="4、使用对象的方式："><a href="#4、使用对象的方式：" class="headerlink" title="4、使用对象的方式："></a>4、使用对象的方式：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">function fun1()&#123;</div><div class="line">     var info  = &#123;</div><div class="line">         name:&quot;jack&quot;,</div><div class="line">         age:21</div><div class="line">         &#125;;</div><div class="line">     return info;</div><div class="line">  &#125;</div><div class="line">  function fun2()&#123;</div><div class="line">     var info = fun1();</div><div class="line">     var name = info.name;</div><div class="line">     var age  = info.age;</div><div class="line">     console.log(`我的名字是:$&#123;name&#125;\n我的年龄是$&#123;age&#125;`);</div><div class="line">  &#125;</div><div class="line">  fun2();//我的名字是:jack</div><div class="line">         //我的年龄是21</div></pre></td></tr></table></figure>
<p>作者 [李伟振]     </p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[项目总结]]></title>
      <url>https://wiestlee.github.io/2017/02/28/tags-%20%20%5B%E6%8A%80%E6%9C%AF,%E6%80%BB%E7%BB%93%5D/</url>
      <content type="html"><![CDATA[<p>在历时四个月的学习中，自己在尝试着去做一个相对完整的项目，但是每一阶段都在经历着知识上的突破和技术的变革，残留的知识碎片在积累的越来越多，往往来不及整理，就开始了新的知识。想着在结束的时候整理一下，但是留下的坑有点多，导致每一个项目都不太完善，下面列举一下自己的项目并做下技术总结：</p>
<h2 id="项目列表"><a href="#项目列表" class="headerlink" title="项目列表"></a>项目列表</h2><blockquote>
<ul>
<li><a href="http://liweizhenapp.applinzi.com" target="_blank" rel="external">天猫商城</a></li>
<li>roseonly(一生只送一个人)</li>
<li>hovercamera 响应式首页</li>
<li><a href="http://roseonlyone.applinzi.com/" target="_blank" rel="external">roseonly 移动端APP</a></li>
</ul>
</blockquote>
<h2 id="项目介绍一、（pc端roseonly商城）"><a href="#项目介绍一、（pc端roseonly商城）" class="headerlink" title="项目介绍一、（pc端roseonly商城）"></a>项目介绍一、（pc端roseonly商城）</h2><p>roseonly，是一家网络花店，其定位是中国高端品牌花店，而该网站的一个特点是在该花店买花，“一生只送一人”。<br>用技术的角度去解释：它是一个商城类的购物网站，而该网站的需求是用户可以在在网站购买商品，但收货人只能填写一个，一个用户的ID一旦绑定一位收货人的姓名，确认后就无法修改，从而实现“一生只送一个人”。</p>
<h3 id="整站页面："><a href="#整站页面：" class="headerlink" title="整站页面："></a>整站页面：</h3><blockquote>
<ul>
<li>注册页面</li>
<li>首页  </li>
<li>产品列表页</li>
<li>产品详情页面</li>
<li>购物车页面</li>
<li>订单页面</li>
<li>支付页面（待完成）</li>
</ul>
</blockquote>
<h3 id="1、注册页面："><a href="#1、注册页面：" class="headerlink" title="1、注册页面："></a>1、注册页面：</h3><p>功能：ajax异步请求验证用户是否存在，用session存储技术实现随机验证码服务器端验证。更安全的保护用户信息。<br>1、绘制随机验证码</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div><div class="line">39</div><div class="line">40</div><div class="line">41</div><div class="line">42</div><div class="line">43</div><div class="line">44</div><div class="line">45</div><div class="line">46</div><div class="line">47</div><div class="line">48</div><div class="line">49</div><div class="line">50</div><div class="line">51</div><div class="line">52</div><div class="line">53</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line">/**</div><div class="line">*向客户端输出一个随机的验证码图片，同时在服务器保存该验证码</div><div class="line">*/</div><div class="line">header(&apos;Content-Type: image/png&apos;);</div><div class="line"></div><div class="line">$w = 75;</div><div class="line">$h = 22;</div><div class="line">//在服务器内存中创建一副图像</div><div class="line">$img = imagecreatetruecolor($w, $h);</div><div class="line">//分配一个随机颜色，作为背景颜色</div><div class="line">$c = imagecolorallocate($img, rand(200,200), rand(200,200),rand(200,200));</div><div class="line">//填充一个矩形，作为背景</div><div class="line">imagefilledrectangle($img, 0, 0, $w, $h, $c);</div><div class="line"></div><div class="line"></div><div class="line">//向图像上绘制四个随机的字符</div><div class="line">$src = &apos;ABCDEFGHJKLMNPQRSTWXY3456789&apos;;</div><div class="line">$code = &apos;&apos;;</div><div class="line">for($i=0; $i&lt;4; $i++)&#123;</div><div class="line">  $char = $src[rand(0, strlen($src)-1)];</div><div class="line">  $code .= $char;</div><div class="line">  $c = imagecolorallocate($img,rand(90,90),rand(90,90), rand(90,90));</div><div class="line">  //绘制一个旋转的随机字符，使用指定字体文件</div><div class="line">  $fontSize = rand(12, 18);</div><div class="line">  $angle = rand(-45, 45);</div><div class="line">  $x = 20*$i+5;</div><div class="line">  $y = rand(12, $h);</div><div class="line">  $fontFile = &apos;../font/simhei.ttf&apos;;</div><div class="line">  imagettftext($img,$fontSize,$angle,$x,$y,$c,$fontFile,$char);</div><div class="line">&#125;</div><div class="line"></div><div class="line">/*</div><div class="line">*验证码必须保存在服务器端，同时每个客户端的验证码彼此不同</div><div class="line">*存储中服务器端Session空间中</div><div class="line">*/</div><div class="line">//为当前客户端分配新的Session空间，或查找它已有的Session空间</div><div class="line">session_start();</div><div class="line">$_SESSION[&apos;RegisterVcode&apos;] = $code;</div><div class="line"></div><div class="line"></div><div class="line"></div><div class="line">//绘制5条随机干扰线</div><div class="line">for($i=0; $i&lt;0; $i++)&#123;</div><div class="line">  $c = imagecolorallocate($img,rand(0,255),rand(0,255),rand(0,255));</div><div class="line">  imageline($img, rand(0,$w), rand(0,$h), rand(0,$w), rand(0,$h),$c);</div><div class="line">&#125;</div><div class="line"></div><div class="line"></div><div class="line">//把服务器中的图像发送给客户端</div><div class="line">imagepng($img);</div><div class="line">//从服务器的内存中删除随机图片</div><div class="line">imagedestroy($img);</div></pre></td></tr></table></figure>
<p>2、验证随机验证码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div><div class="line">36</div><div class="line">37</div><div class="line">38</div></pre></td><td class="code"><pre><div class="line">&lt;?php</div><div class="line"> header(&quot;Content-Type:application/json;charset=utf8&quot;);</div><div class="line"> $phone=$_REQUEST[&apos;phone&apos;] or die(&apos;&#123;&quot;code&quot;:-2,&quot;msg&quot;:&quot;手机号不能为空&quot;&#125;&apos;);</div><div class="line"> $vCode=$_REQUEST[&apos;vCode&apos;]or die(&apos;&#123;&quot;code&quot;:-3,&quot;msg&quot;:&quot;请输入4位数字验证码&quot;&#125;&apos;);</div><div class="line"> $pwd=$_REQUEST[&apos;pwd&apos;] or die (&apos;&#123;&quot;code&quot;:-4,&quot;msg&quot;:&quot;请输入正确的密码&quot;&#125;&apos;);</div><div class="line"> require(&quot;init.php&quot;);</div><div class="line">  $sql=&quot;select phone from roseOnlyUser where phone=&apos;$phone&apos;&quot;;</div><div class="line">  mysqli_query($conn,$sql);</div><div class="line">  $result=mysqli_query($conn,$sql);</div><div class="line">  $rows=mysqli_fetch_row($result);</div><div class="line">   session_start();</div><div class="line"> if($rows&gt;0)&#123;</div><div class="line">  $output=[</div><div class="line">      &apos;code&apos;=&gt;-5,</div><div class="line">      &apos;msg&apos;=&gt;&apos;手机号已被注册&apos;,</div><div class="line">     ];</div><div class="line">     echo json_encode($output);</div><div class="line"> &#125;</div><div class="line"> if($vCode!=$_SESSION[&apos;RegisterVcode&apos;])&#123;</div><div class="line">   $output=[</div><div class="line">      &apos;code&apos;=&gt;-6,</div><div class="line">      &apos;msg&apos;=&gt;&apos;验证码错误&apos;</div><div class="line">   ];</div><div class="line">   echo json_encode($output);</div><div class="line"> &#125;</div><div class="line"></div><div class="line"> else&#123;</div><div class="line">  $sql=&quot;insert into roseOnlyUser values(null,&apos;$phone&apos;,&apos;$pwd&apos;)&quot;;</div><div class="line">  mysqli_query($conn,$sql);</div><div class="line">  $uid=mysqli_insert_id($conn);</div><div class="line">     $output=[</div><div class="line">      &apos;code&apos;=&gt;1,</div><div class="line">      &apos;msg&apos;=&gt;&apos;新用户添加成功&apos;,</div><div class="line">      &apos;uid&apos;=&gt;$uid</div><div class="line">     ];</div><div class="line">     echo json_encode($output);</div><div class="line">   &#125;</div><div class="line">?&gt;</div></pre></td></tr></table></figure></p>
<p>3、最后客户端进行ajax异步验证（这里不在赘述代码）<br>4、验证通过后向数据库插入一条用户数据。</p>
<h3 id="2、登录页面"><a href="#2、登录页面" class="headerlink" title="2、登录页面"></a>2、登录页面</h3><ol>
<li>通过用户手机号和用户密码向数据库查找用户信息<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$sql = &quot;SELECT * FROM roseOnlyUser WHERE phone=&apos;$phone&apos; AND pwd=&apos;$pwd&apos;&quot;;</div></pre></td></tr></table></figure>
</li>
</ol>
<p>2、使用sessionStorage，保存用户的手机号/用户名到本地<br>3、异步加载页面的头部，假如本地存在用户的登录信息，就修改加载的头部，把用户的信息添加上去，添加退出登录按钮,清除本地的的回话储存。因为每个页面都要使用这个功能，所以我把这一段js代码直接写在了要异步加载的请求头部中，也就是PHP的header部分。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">sessionStorage.clear();</div></pre></td></tr></table></figure></p>
<h2 id="解决问题："><a href="#解决问题：" class="headerlink" title="解决问题："></a>解决问题：</h2><p>如何清除谷歌浏览器的自动填充表单的黄色背景：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">input:-webkit-autofill &#123;</div><div class="line">    -webkit-box-shadow: 0 0 0 1000px white inset !important;</div><div class="line">&#125;         //实现颜色可以自定义更改</div></pre></td></tr></table></figure></p>
<h3 id="3、首页"><a href="#3、首页" class="headerlink" title="3、首页"></a>3、首页</h3><p>功能：轮播图，选项卡的自动切换和手动切换。<br>1、轮播：点击条状按钮，获取index值，用index*1240px（图片的宽度），来改变的图片的位移，向右为正，想左为负，然后用一个定时器，来调整index的值，每两秒钟让index+1，当hover时候清除定时器，否则，调用自动轮播的函数。<br>2、选项卡切换：自动轮播同上</p>
<h3 id="4、产品列表页"><a href="#4、产品列表页" class="headerlink" title="4、产品列表页"></a>4、产品列表页</h3><p>功能：异步数据加载产品数据，实现按照价格排序，区间排序。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$sql=&apos;SELECT * FORM roseList ORDER BY rosePrice&apos;;//价格升序</div><div class="line">$sql=&apos;SELECT * FROM roseList ORDER BY rosePrice DESC&apos;; //价格降序</div><div class="line">$sql=&quot;SELECT * FROM roseList WHERE roesPrice BETWEEN start=&apos;$start&apos; and end=&apos;$end&apos;&quot;;//区间排序</div></pre></td></tr></table></figure></p>
<h3 id="5、产品详情页面"><a href="#5、产品详情页面" class="headerlink" title="5、产品详情页面"></a>5、产品详情页面</h3><p>功能：点击切换产品图片，并动态加载产品详情，当滚动到产品详情的位置时，才进行请求数据。<br>1、代码示例：通过判断子节点的长度为0的时候才进行，避免的重复请求。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">$(window).on(&apos;scroll&apos;,function()&#123;</div><div class="line">  if($(&apos;body&apos;).scrollTop()&gt;400&amp;&amp;$(&apos;.details_img&apos;).children().length==0)&#123;</div><div class="line">    $.ajax(&#123;...&#125;)</div><div class="line">&#125;&#125;</div></pre></td></tr></table></figure></p>
<h3 id="6、购物车页面"><a href="#6、购物车页面" class="headerlink" title="6、购物车页面"></a>6、购物车页面</h3><p>功能：购物车的增删改查功能。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$sql=&quot;insert into rose_cart_detail values(null,&apos;$cartId&apos;,&apos;$productId&apos;,1)&quot;;</div><div class="line">$sql=&quot;delete from rose_cart_detail where productId=&apos;$productId&apos;&quot;;</div><div class="line">$sql=&quot;update rose_cart_detail set count=$count where productId=&apos;$productId&apos;&quot;;</div></pre></td></tr></table></figure></p>
<h3 id="7、订单页面"><a href="#7、订单页面" class="headerlink" title="7、订单页面"></a>7、订单页面</h3><h4 id="功能：提交用户的购买信息，完成收货人提交后无法更改功能（表单禁用）。"><a href="#功能：提交用户的购买信息，完成收货人提交后无法更改功能（表单禁用）。" class="headerlink" title="功能：提交用户的购买信息，完成收货人提交后无法更改功能（表单禁用）。"></a>功能：提交用户的购买信息，完成收货人提交后无法更改功能（表单禁用）。</h4><p>1、当查询到数据库存在该用户曾经提交过收货人的信息时，表单始终为禁用状态。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">$(this).attr(&quot;disabled&quot;,&quot;disabled&quot;);</div></pre></td></tr></table></figure></p>
<blockquote>
<ul>
<li>支付页面（待完成）</li>
</ul>
</blockquote>
<p>作者 [李伟振]<br>2017 年 02月 28日    </p>
]]></content>
      
        
        <tags>
            
            <tag> 技术 </tag>
            
            <tag> 总结 </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[javascript获取随机整数]]></title>
      <url>https://wiestlee.github.io/2016/11/05/%E5%A6%82%E4%BD%95%E8%8E%B7%E5%8F%96%E9%9A%8F%E6%9C%BA%E6%95%B4%E6%95%B0/</url>
      <content type="html"><![CDATA[<h2 id="javascript-如何获取随机整数"><a href="#javascript-如何获取随机整数" class="headerlink" title="javascript 如何获取随机整数"></a>javascript 如何获取随机整数</h2><p>咱们先看下面这个方法：</p>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">function (end,start)&#123;</div><div class="line"></div><div class="line">   return Math.floor(Math.random()*(end - start) + start);</div><div class="line">   </div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>这是一个生成a到b之间的随机整数的方法;</p>
<p>下面逐步分析一下：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Math</span>.random();     <span class="comment">// [0,1);</span></div><div class="line"><span class="built_in">Math</span>.random()*(end-start);   <span class="comment">// [0,end-start)</span></div><div class="line"><span class="built_in">Math</span>.random()*(end-start)+start; <span class="comment">//[start,end)</span></div></pre></td></tr></table></figure></p>
<h2 id="然后介绍将小数值舍入为整数的几个方法：Math-ceil-、Math-floor-和Math-round-。-这三个方法分别遵循下列舍入规则："><a href="#然后介绍将小数值舍入为整数的几个方法：Math-ceil-、Math-floor-和Math-round-。-这三个方法分别遵循下列舍入规则：" class="headerlink" title="然后介绍将小数值舍入为整数的几个方法：Math.ceil()、Math.floor()和Math.round()。 这三个方法分别遵循下列舍入规则："></a>然后介绍将小数值舍入为整数的几个方法：Math.ceil()、Math.floor()和Math.round()。 这三个方法分别遵循下列舍入规则：</h2><blockquote>
<p>Math.ceil()执行向上舍入，即它总是将数值向上舍入为最接近的整数；<br>Math.floor()执行向下舍入，即它总是将数值向下舍入为最接近的整数；<br>Math.round()执行标准舍入，即它总是将数值四舍五入为最接近的整数(这也是我们在数学课上学到的舍入规则)。<br>parseInt() 仅为取整 不要浮点数部分 相当于Math.floor();</p>
</blockquote>
<p>例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">Math.round(Math.random()*10); // [0,10]</div><div class="line">Math.floor(Math.random()*10); // [0,10)</div><div class="line">Math.floor(Math.random()*(10-1)+1)  //[1,10)</div></pre></td></tr></table></figure></p>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
    <entry>
      <title><![CDATA[时间戳与日期的互相转换]]></title>
      <url>https://wiestlee.github.io/2016/10/23/%E6%97%B6%E9%97%B4%E6%88%B3%E4%B8%8E%E6%97%A5%E6%9C%9F%E7%9A%84%E4%BA%92%E7%9B%B8%E8%BD%AC%E6%8D%A2/</url>
      <content type="html"><![CDATA[<h4 id="Date-参数的形式有7种"><a href="#Date-参数的形式有7种" class="headerlink" title="Date()参数的形式有7种"></a>Date()参数的形式有7种</h4><blockquote>
<p>new Date(“month dd,yyyy hh:mm:ss”);<br>new Date(“month dd.yyy”);<br>new Date(“yyyy/MM/dd”);<br>new Date(“yyyy/MM/dd hh:mm:ss”);<br>new Date(yyyy,mth,dd,hh,mm,ss);<br>new Date(yyyy,mth,dd);<br>new Date(ms);<br>比如：<br>new Date(“September 16,2016 14:15:05”);<br>new Date(“September 16,2016”);<br>new Date(“2016/09/16 14:15:05”);<br>new Date(“2016/09/16”);<br>new Date(2016,8,16,14.15,5); //月份从0~11<br>new Date(2016,8,16);<br>new Date(147400680)</p>
</blockquote>
<h4 id="将时间戳转换成日期格式"><a href="#将时间戳转换成日期格式" class="headerlink" title="将时间戳转换成日期格式"></a>将时间戳转换成日期格式</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var date = new Date(); //获取一个时间对象</div><div class="line">/**</div><div class="line">1.以下获取时间的方法</div><div class="line">*/</div><div class="line">date.getFullYear();</div><div class="line">date.getMonth(); //获取月份注意是从0开始的 记得加上1</div><div class="line">date.getDay();</div><div class="line">date.getTime();</div><div class="line">date.getHours();</div><div class="line">date.getMinutes();</div><div class="line">date.getSeconds();</div></pre></td></tr></table></figure>
<p>栗子：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">//比如需要这样的格式 yyyy-MM-dd hh:mm:ss</div><div class="line">var date = new Date(1398250549450);</div><div class="line">Y = date.getFullYear() + &apos;-&apos;;</div><div class="line">M = (date.getMonth()+1 &lt; 10 ? &apos;0&apos;+(date.getMonth()+1):date.getMonth()+1)+&apos;-&apos;;</div><div class="line">D = date.getDate()+&apos; &apos;;</div><div class="line">h = date.getHours()+&apos;:&apos;;</div><div class="line">m = date.getMinutes()+&apos;:&apos;;</div><div class="line">s = date.getSeconds();</div><div class="line">console.log(Y+M+D+h+m+s); //2014-04-23 18:55:49</div></pre></td></tr></table></figure></p>
<h4 id="将日期格式转换成时间戳"><a href="#将日期格式转换成时间戳" class="headerlink" title="将日期格式转换成时间戳"></a>将日期格式转换成时间戳</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var startTime = &apos;2016-05-06 16:25:26:111&apos;;</div><div class="line">var date = new Date(startTime);</div><div class="line">var date = new Date(startTime.replace(/-/g,&apos;/&apos;));</div><div class="line"></div><div class="line">time1 = date.getTime();</div><div class="line">time2 = date.valueOf();</div><div class="line">time3 = date.parse(date);</div><div class="line">/*</div><div class="line">三种获取的区别；</div><div class="line">第一种、第二种：会精确到毫秒</div><div class="line">第三种：只能精确到秒，毫秒将用0来代替</div><div class="line">比如 上面的代码输出的结果 看出来了吧</div><div class="line">1462523126111</div><div class="line">1462523126111</div><div class="line">1462523126000</div></pre></td></tr></table></figure>
]]></content>
      
        
        <tags>
            
            <tag> JavaScript </tag>
            
        </tags>
        
    </entry>
    
  
  
    
    <entry>
      <title><![CDATA[关于]]></title>
      <url>https://wiestlee.github.io/about/index.html</url>
      <content type="html"><![CDATA[<p>欢迎来到我的个人技术博客。</p>
]]></content>
    </entry>
    
    <entry>
      <title><![CDATA[读书]]></title>
      <url>https://wiestlee.github.io/reading/index.html</url>
      <content type="html"></content>
    </entry>
    
  
</search>
