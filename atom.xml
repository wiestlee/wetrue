<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>wiestlee&#39;s blog</title>
  <subtitle>wiestlee&#39;s home</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://wiestlee.github.io/"/>
  <updated>2017-12-03T04:54:21.941Z</updated>
  <id>https://wiestlee.github.io/</id>
  
  <author>
    <name>Wiestlee</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>深入了解ES6第十三章-用模块封装代码</title>
    <link href="https://wiestlee.github.io/2017/07/02/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E5%8D%81%E4%B8%89%E7%AB%A0%E3%80%8B%E2%80%94%E7%94%A8%E6%A8%A1%E5%9D%97%E5%B0%81%E8%A3%85%E4%BB%A3%E7%A0%81/"/>
    <id>https://wiestlee.github.io/2017/07/02/《深入理解ES6第十三章》—用模块封装代码/</id>
    <published>2017-07-01T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:21.941Z</updated>
    
    <content type="html"><![CDATA[<h3 id="模块的定义"><a href="#模块的定义" class="headerlink" title="模块的定义"></a>模块的定义</h3><p>模块是自动运行在严格模式下并且没有办法退出运行的JavaScript代码。</p>
<p>模块可以是函数、数据、类，需要指定导出的模块名，才能被其他模块访问。</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据模块</span></div><div class="line"><span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</div><div class="line"><span class="comment">//函数模块</span></div><div class="line"><span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="comment">//类模块</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">My</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Components</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="模块的导出"><a href="#模块的导出" class="headerlink" title="模块的导出"></a>模块的导出</h3><p>给数据、函数、类添加一个export，就能导出模块。一个配置型的JavaScript文件中，你可能会封装多种函数，然后给每个函数加上一个export关键字，就能在其他文件访问到。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数据模块</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> obj = &#123;<span class="attr">a</span>: <span class="number">1</span>&#125;</div><div class="line"><span class="comment">//函数模块</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> sum = <span class="function">(<span class="params">a, b</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="comment">//类模块</span></div><div class="line"><span class="keyword">export</span> <span class="class"><span class="keyword">class</span> <span class="title">My</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Components</span> </span>&#123;</div><div class="line"></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="模块的引用"><a href="#模块的引用" class="headerlink" title="模块的引用"></a>模块的引用</h3><p>在另外的js文件中，我们可以引用上面定义的模块。使用import关键字，导入分2种情况，一种是导入指定的模块，另外一种是导入全部模块。</p>
<p>1、导入指定的模块。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导入obj数据，My类</span></div><div class="line"><span class="keyword">import</span> &#123;obj, My&#125; <span class="keyword">from</span> <span class="string">'./xx.js'</span></div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="built_in">console</span>.log(obj, My)</div></pre></td></tr></table></figure></p>
<p>2、导入全部模块<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//导入全部模块</span></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> all <span class="keyword">from</span> <span class="string">'./xx.js'</span></div><div class="line"></div><div class="line"><span class="comment">//使用</span></div><div class="line"><span class="built_in">console</span>.log(all.obj, all.sun(<span class="number">1</span>, <span class="number">2</span>), all.My)</div></pre></td></tr></table></figure></p>
<h3 id="默认模块的使用"><a href="#默认模块的使用" class="headerlink" title="默认模块的使用"></a>默认模块的使用</h3><p>如果给我们的模块加上default关键字，那么该js文件默认只导出该模块，你还需要把大括号去掉。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//默认模块的定义</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> sum</div><div class="line"></div><div class="line"><span class="comment">//导入默认模块</span></div><div class="line"><span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'./xx.js'</span></div></pre></td></tr></table></figure></p>
<h3 id="模块的使用限制"><a href="#模块的使用限制" class="headerlink" title="模块的使用限制"></a>模块的使用限制</h3><p>不能在语句和函数之内使用export关键字，只能在模块顶部使用，作为react和vue开发者的你，这个限制你应该很熟悉了。</p>
<p><strong>在react中，模块顶部导入其他模块。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> react <span class="keyword">from</span> <span class="string">'react'</span></div></pre></td></tr></table></figure></p>
<p><strong>在vue中，模块顶部导入其他模块。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;script&gt;</div><div class="line">    <span class="keyword">import</span> sum <span class="keyword">from</span> <span class="string">'./xx.js'</span></div><div class="line">&lt;<span class="regexp">/script&gt;</span></div></pre></td></tr></table></figure></p>
<h3 id="修改模块导入和导出名"><a href="#修改模块导入和导出名" class="headerlink" title="修改模块导入和导出名"></a>修改模块导入和导出名</h3><p>有2种修改方式，一种是模块导出时修改，一种是导入模块时修改。</p>
<p>1、导出时修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> &#123;sum <span class="keyword">as</span> add&#125;</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; add &#125; <span class="keyword">from</span> <span class="string">'./xx.js'</span></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<p>2、导入时修改：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">sum</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">&#125;</div><div class="line"><span class="keyword">export</span> sum</div><div class="line"></div><div class="line"><span class="keyword">import</span> &#123; sum <span class="keyword">as</span> add &#125; <span class="keyword">from</span> <span class="string">'./xx.js'</span></div><div class="line">add(<span class="number">1</span>, <span class="number">2</span>)</div></pre></td></tr></table></figure></p>
<h3 id="无绑定导入"><a href="#无绑定导入" class="headerlink" title="无绑定导入"></a>无绑定导入</h3><p>当你的模块没有可导出模块，全都是定义的全局变量的时候，你可以使用无绑定导入。</p>
<p>模块：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span></div><div class="line"><span class="keyword">const</span> PI = <span class="number">3.1314</span></div></pre></td></tr></table></figure></p>
<p>无绑定导入：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> <span class="string">'./xx.js'</span></div><div class="line"><span class="built_in">console</span>.log(a, PI)</div></pre></td></tr></table></figure></p>
<h3 id="浏览器加载模块"><a href="#浏览器加载模块" class="headerlink" title="浏览器加载模块"></a>浏览器加载模块</h3><p>有用过webpack打包js模块的同学可能有经验，使用webpack打包了多个js文件，然后放到HTML使用script加载时，如果加载顺序不对，就会出现找不到模块的错误。</p>
<p>这是因为模块之间是有依赖关系的，就像你使用jQuery的时候，必须先加载jQuery的代码，才能使用jQuery提供的方法。</p>
<p><strong>加载模块的方法，总是先加载模块1，再加载模块2，因为module类型默认使用defer属性。</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"module1.js"</span>&gt;&lt;/script&gt;</div><div class="line">&lt;script type=<span class="string">"module"</span> src=<span class="string">"module2.js"</span>&gt;&lt;/script&gt;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>模块还有很多有意思的特性，对react和vue开发有一定经验的人对这些基本知识应该了如指掌，新手不了解也不用太心急，写几个module.js做一下尝试。如果浏览器报错，不能识别export模块，你可能需要先加载babel的js插件来编译它。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;模块的定义&quot;&gt;&lt;a href=&quot;#模块的定义&quot; class=&quot;headerlink&quot; title=&quot;模块的定义&quot;&gt;&lt;/a&gt;模块的定义&lt;/h3&gt;&lt;p&gt;模块是自动运行在严格模式下并且没有办法退出运行的JavaScript代码。&lt;/p&gt;
&lt;p&gt;模块可以是函数、数据、类，需要指定导出的模块名，才能被其他模块访问。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第十二章-代理（Proxy）和反射（Reflection）API</title>
    <link href="https://wiestlee.github.io/2017/07/01/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E5%8D%81%E4%BA%8C%E7%AB%A0%E3%80%8B%E2%80%94%E4%BB%A3%E7%90%86%EF%BC%88Proxy%EF%BC%89%E5%92%8C%E5%8F%8D%E5%B0%84%EF%BC%88Reflection%EF%BC%89API/"/>
    <id>https://wiestlee.github.io/2017/07/01/《深入理解ES6第十二章》—代理（Proxy）和反射（Reflection）API/</id>
    <published>2017-06-30T16:00:00.000Z</published>
    <updated>2017-12-03T05:06:55.912Z</updated>
    
    <content type="html"><![CDATA[<h3 id="反射-Reflect"><a href="#反射-Reflect" class="headerlink" title="反射 Reflect"></a>反射 Reflect</h3><p>当你见到一个新的API，不明白的时候，就在浏览器打印出来看看它的样子。</p>
<p>![clipboard.png][<a href="https://segmentfault.com/img/bVR5HF?w=1722&amp;h=560" target="_blank" rel="external">https://segmentfault.com/img/bVR5HF?w=1722&amp;h=560</a>]</p>
<h4 id="反射的概念"><a href="#反射的概念" class="headerlink" title="反射的概念"></a>反射的概念</h4><a id="more"></a>
<p>Reflect 是一个内置的对象，它提供可拦截JavaScript操作的方法。方法与代理处理程序的方法相同。Reflect 不是一个函数对象，因此它是不可构造的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Reflect</span>() <span class="comment">//错误的写法</span></div></pre></td></tr></table></figure>
<h4 id="反射的使用"><a href="#反射的使用" class="headerlink" title="反射的使用"></a>反射的使用</h4><p>Reflect提供了一些静态方法，静态方法是指只能通过对象自身访问的的方法，这个知识在前面几章讲解过。<strong>所有方法的详细解析，前往 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Reflect" target="_blank" rel="external">Reflect详解</a> 查看。</strong></p>
<p><strong>静态方法列表：</strong>这么多静态方法，<strong>你需要学会的是如何使用它们</strong>。</p>
<p>1、Reflect.apply()<br>2、Reflect.construct()<br>3、Reflect.defineProperty()<br>4、Reflect.deleteProperty()<br>5、Reflect.enumerate()<br>6、Reflect.get()<br>7、Reflect.getOwnPropertyDescriptor()<br>8、Reflect.getPrototypeOf()<br>9、Reflect.has()<br>10、Reflect.isExtensible()<br>11、Reflect.ownKeys()<br>12、Reflect.preventExtensions()<br>13、Reflect.set()<br>14、Reflect.setPrototypeOf()</p>
<p><strong>静态方法的使用：</strong></p>
<p>demo1：使用Reflect.get()获取目标对象指定key的value。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">    <span class="attr">a</span>: <span class="number">1</span></div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">let</span> s1 = <span class="built_in">Reflect</span>.get(obj, <span class="string">"a"</span>)</div><div class="line"><span class="built_in">console</span>.log(s1) <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<p>demo2:使用Reflect.apply给目标函数floor传入指定的参数。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> s2 = <span class="built_in">Reflect</span>.apply(<span class="built_in">Math</span>.floor, <span class="literal">undefined</span>, [<span class="number">1.75</span>]); </div><div class="line"><span class="built_in">console</span>.log(s2) <span class="comment">// 1</span></div></pre></td></tr></table></figure></p>
<h4 id="进一步理解Reflect"><a href="#进一步理解Reflect" class="headerlink" title="进一步理解Reflect"></a>进一步理解Reflect</h4><p>看了上面的例子和方法，我们知道Reflect可以拦截JavaScript代码，包括拦截对象，拦截函数等，然后对拦截到的对象或者函数进行读写等操作。</p>
<p>比如demo1的get()方法，拦截obj对象，然后读取key为a的值。当然，不用反射也可以读取a的值。</p>
<p>再看demo2的apply()方法，这个方法你应该比较了解了，和数组中使用apply不同的是，Reflect.apply()提供了3个参数，第一个参数是反射的函数，后面2个参数才是和数组的apply一致。demo2的例子我们可以理解成是拦截了Math.floor方法，然后传入参数，将返回值赋值给s2，这样我们就能在需要读取这个返回值的时候调用s2。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组使用apply</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.concat.apply(<span class="literal">null</span>, <span class="built_in">arguments</span>)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> s = a(arr)</div><div class="line"><span class="built_in">console</span>.log(s) <span class="comment">// [1, 2 ,3]</span></div></pre></td></tr></table></figure></p>
<p>其实Reflect的作用和我们下面要讲的Proxy是差不多的。</p>
<h3 id="代理-Proxy"><a href="#代理-Proxy" class="headerlink" title="代理 Proxy"></a>代理 Proxy</h3><p>Proxy这个词相信你已经听过无数遍了，我曾经写过一篇webpack使用代理来拦截指定域的API请求，转发到新的目标URL的文章 <a href="https://segmentfault.com/a/1190000008635891" target="_blank" rel="external">webpack中使用proxy</a>。但是注意Proxy和proxy，大小写字母之间是不同的。本章讲的是大写字母开头的Proxy。</p>
<p><img src="https://segmentfault.com/img/bVR5W5?w=710&amp;h=182" alt="clipboard.png"></p>
<h4 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(target, handler);</div></pre></td></tr></table></figure>
<p>target：一个目标对象(可以是任何类型的对象，包括本机数组，函数，甚至另一个代理)用Proxy来包装。<br>handler：一个对象，其属性是当执行一个操作时定义代理的行为的函数。</p>
<h4 id="代理的使用"><a href="#代理的使用" class="headerlink" title="代理的使用"></a>代理的使用</h4><p><strong>基础demo：</strong>Proxy的demo有很多，我们只分析基础demo，主要看new Proxy({}, handler)的操作，指定目标obj对象，然后handler对象执行get()操作，get()返回值的判断是，如果name是target目标对象的属性，则返回target[name]的值，否则返回37，最后测试的时候，p.a是对象p的key，所以返回a的value，而p.b不存在，返回37。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> handler = &#123;</div><div class="line">    <span class="attr">get</span>: <span class="function"><span class="keyword">function</span>(<span class="params">target, name</span>)</span>&#123;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'test: '</span>, target, name)</div><div class="line">        <span class="comment">// test:  &#123;"a":10&#125; a</span></div><div class="line">        <span class="comment">// test:  &#123;"a":10&#125; b</span></div><div class="line">        <span class="keyword">return</span> name <span class="keyword">in</span> target ? target[name] : <span class="number">37</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, handler)</div><div class="line"><span class="built_in">console</span>.log(p.a, p.b) <span class="comment">// 10 37</span></div></pre></td></tr></table></figure></p>
<p>这个例子的作用是拦截目标对象obj，当执行obj的读写操作时，进入handler函数进行判断，如果读取的key不存在，则返回默认值。</p>
<p>我们使用一些http-proxy插件或者webpack的时候，有时候需要访问某个api时，跳转到指定的url，这种方式也能解决跨域访问。这种代理模式和Proxy的代理有异曲同工之妙。但是，别混为一体了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">module</span>.exports = &#123;</div><div class="line">    <span class="attr">devServer</span>: &#123;</div><div class="line">       <span class="attr">proxy</span>: [</div><div class="line">           &#123;</div><div class="line">                <span class="attr">context</span>: <span class="string">"/api/*"</span>, <span class="comment">//代理API</span></div><div class="line">                target: <span class="string">'https://www.hyy.com'</span>, <span class="comment">//目标URL</span></div><div class="line">                secure: <span class="literal">false</span></div><div class="line">          &#125;</div><div class="line">       ]</div><div class="line">    &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>无论是反射还是代理，除了他们使用方法不同之外，他们所作的事情非常相似，都可以理解成拦截某个东西，然后执行某个函数操作，再返回函数操作的结果。</p>
<p>大部分前端在日常业务需求中，几乎很少使用到这2个API，实际使用场景还得在以后的开发中慢慢挖掘。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;反射-Reflect&quot;&gt;&lt;a href=&quot;#反射-Reflect&quot; class=&quot;headerlink&quot; title=&quot;反射 Reflect&quot;&gt;&lt;/a&gt;反射 Reflect&lt;/h3&gt;&lt;p&gt;当你见到一个新的API，不明白的时候，就在浏览器打印出来看看它的样子。&lt;/p&gt;
&lt;p&gt;![clipboard.png][&lt;a href=&quot;https://segmentfault.com/img/bVR5HF?w=1722&amp;amp;h=560&quot;&gt;https://segmentfault.com/img/bVR5HF?w=1722&amp;amp;h=560&lt;/a&gt;]&lt;/p&gt;
&lt;h4 id=&quot;反射的概念&quot;&gt;&lt;a href=&quot;#反射的概念&quot; class=&quot;headerlink&quot; title=&quot;反射的概念&quot;&gt;&lt;/a&gt;反射的概念&lt;/h4&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第十一章-Promise与异步编程</title>
    <link href="https://wiestlee.github.io/2017/06/30/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E5%8D%81%E4%B8%80%E7%AB%A0%E3%80%8B%E2%80%94%20Promise%E4%B8%8E%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B/"/>
    <id>https://wiestlee.github.io/2017/06/30/《深入理解ES6第十一章》— Promise与异步编程/</id>
    <published>2017-06-29T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:26.898Z</updated>
    
    <content type="html"><![CDATA[<h4 id="为什么要异步编程"><a href="#为什么要异步编程" class="headerlink" title="为什么要异步编程"></a>为什么要异步编程</h4><p>我们在写前端代码时，经常会对dom做事件处理操作，比如点击、激活焦点、失去焦点等；再比如我们用ajax请求数据，使用回调函数获取返回值。这些都属于异步编程。</p>
<p>也许你已经大概知道JavaScript引擎单线程的概念，那么这种单线程模式和异步编程有什么关系呢？</p>
<a id="more"></a>
<p><strong>JavaScript引擎中，只有一个主线程，当执行JavaScript代码块时，不允许其他代码块执行，而事件机制和回调机制的代码块会被添加到任务队列中，当符合某个触发回调或者事件的时候，就会执行该事件或者回调函数。</strong></p>
<p>上面这段话的意思可以这样理解，假设你是一个修仙者，你去闯一个秘境，这个秘境就是主线程，你只能一直深入下去，直到找到宝物和出口，而你还有一个自身的储物空间，这个空间就类似存放任务队列的东西，你在储物空间放了很多你可能用到的法宝或者丹药，这些东西就是回调函数和事件函数，当你遇到危险或者满足某个条件时，就可以从储物空间拿出你当前需要的东西。</p>
<p>好吧，不扯这么远，下面看正题。</p>
<p><strong>事件模型：</strong><br>浏览器初次渲染DOM的时候，我们会给一些DOM绑定事件函数，只有当触发了这些DOM事件函数，才会执行他们。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> btn = <span class="built_in">document</span>.querySelector(<span class="string">'.button'</span>)</div><div class="line">btn.onclick = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(event)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>回调模式：</strong><br>nodejs中可能非常常见这种回调模式，但是对于前端来说，ajax的回调是最熟悉不过了。ajax回调有多个状态，当响应成功和失败都有不同的回调函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">$.post(<span class="string">'/router'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>回调也可能带来一个问题，那就是地狱回调，不过幸运的是，我从进入前端界开始，就使用react，跳过了很多坑，特别是地狱回调，一直没有机会在工作中遇见到，真是遗憾。</p>
<h3 id="Promise"><a href="#Promise" class="headerlink" title="Promise"></a>Promise</h3><p>事件函数没有问题，我们用的很爽，问题出在回调函数，尤其是指地狱回调，Promise的出现正是为了避免地狱回调带来的困扰。</p>
<p>推荐你看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Promise" target="_blank" rel="external">JavaScript MDN Promise教程</a>，然后再结合本文看，你就能学会使用Promise了。</p>
<h4 id="Promise是什么"><a href="#Promise是什么" class="headerlink" title="Promise是什么"></a>Promise是什么</h4><p>Promise的中文意思是承诺，也就是说，JavaScript对你许下一个承诺，会在未来某个时刻兑现承诺。</p>
<h4 id="Promise生命周期"><a href="#Promise生命周期" class="headerlink" title="Promise生命周期"></a>Promise生命周期</h4><p>react有生命周期，vue也有生命周期，就连Promise也有生命周期，现在生命周期咋这么流行了。</p>
<p><strong>Promise的生命周期：进行中（pending），已经完成（fulfilled），拒绝（rejected）</strong></p>
<p>Promise被称作异步结果的占位符，它不能直接返回异步函数的执行结果，需要使用then()，当获取异常回调的时候，使用catch()。</p>
<p>这次我们使用axios插件的代码做例子。axios是前端比较热门的http请求插件之一。</p>
<p>1、创建axios实例instance。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> axios <span class="keyword">from</span> <span class="string">'axios'</span></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> instance = axios.create()</div></pre></td></tr></table></figure></p>
<p>2、使用axios实例 + Promise获取返回值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> promise = instance.get(<span class="string">'url'</span>)</div><div class="line"></div><div class="line">promise.then(<span class="function"><span class="params">result</span> =&gt;</span> <span class="built_in">console</span>.log(result)).catch(<span class="function"><span class="params">err</span> =&gt;</span> <span class="built_in">console</span>.log(err))</div></pre></td></tr></table></figure>
<h4 id="使用Promise构建函数创建新的Promise"><a href="#使用Promise构建函数创建新的Promise" class="headerlink" title="使用Promise构建函数创建新的Promise"></a>使用Promise构建函数创建新的Promise</h4><p>Promise构造函数只有一个参数，该参数是一个函数，被称作执行器，执行器有2个参数，分别是resolve()和reject()，一个表示成功的回调，一个表示失败的回调。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">5</span>), <span class="number">0</span>)</div><div class="line">&#125;).then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v)) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p><strong>记住，Promise实例只能通过resolve或者reject函数来返回，并且使用then()或者catch()获取，不能在new Promise里面直接return，这样是获取不到Promise返回值的。</strong></p>
<p>1、我们也可以使用Promise直接resolve(value)。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.resolve(<span class="number">5</span>).then(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v)) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>2、也可以使用reject(value)</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.reject(<span class="number">5</span>).catch(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v)) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p>3、执行器错误通过catch捕捉。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error!!'</span>)</div><div class="line">    &#125;</div><div class="line">&#125;).catch(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v.message)) <span class="comment">// error!!</span></div></pre></td></tr></table></figure>
<h4 id="全局的Promise拒绝处理"><a href="#全局的Promise拒绝处理" class="headerlink" title="全局的Promise拒绝处理"></a>全局的Promise拒绝处理</h4><p>不重要的内容，不用细看。</p>
<p>这里涉及到nodejs环境和浏览器环境的全局，主要说的是如果执行了Promise.reject()，浏览器或者node环境并不会强制报错，只有在你调用catch的时候，才能知道Promise被拒绝了。</p>
<p>这种行为就像是，你写了一个函数，函数内部有true和false两种状态，而我们希望false的时候抛出错误，但是在Promise中，并不能直接抛出错误，<strong>无论Promise是成功还是拒绝状态，你获取Promise生命周期的方法只能通过then()和catch()。</strong></p>
<p><strong>nodejs环境：</strong></p>
<p>node环境下有个对象叫做process，即使你没写过后端node，如果写过前端node服务器，也应该知道可以使用process.ENV_NODE获取环境变量。为了监听Promise的reject（拒绝）情况，NodeJS提供了一个process.on()，类似jQuery的on方法，事件绑定函数。</p>
<p>process.on()有2个事件</p>
<p>unhandledRjection:在一个事件循环中，当Promise执行reject()，并且没有提供catch()时被调用。</p>
<p>正常情况下，你可以使用catch捕捉reject。<br> <figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.reject(<span class="string">"It was my wrong!"</span>).catch(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v))</div></pre></td></tr></table></figure></p>
<p>但是，有时候你不总是记得使用catch。你就需要使用process.on()</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> rejected</div><div class="line">rejected = <span class="built_in">Promise</span>.reject(<span class="string">"It was my wrong!"</span>)</div><div class="line"></div><div class="line">process.on(<span class="string">"unhandledRjection"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">reason, promise</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(reason.message) <span class="comment">// It was my wrong!</span></div><div class="line">  <span class="built_in">console</span>.log(rejected === promise) <span class="comment">// true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>rejectionHandled:在一个事件循环后，当Promise执行reject，并且没有提供catch()时被调用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> rejected</div><div class="line">rejected = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"It was my wrong!"</span>))</div><div class="line"></div><div class="line">process.on(<span class="string">"rejectionHandled"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">promise</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(rejected === promise) <span class="comment">// true</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>异同：</strong></p>
<p>事件循环中、事件循环后，你可能很难理解这2个的区别，但是这不重要，重要的是，如果你通过了catch()方法来捕捉reject操作，那么，这2个事件就不会生效。</p>
<p><strong>浏览器环境：</strong></p>
<p>和node环境一样，都提供了unhandledRjection、rejectionHandled事件，不同的是浏览器环境是通过window对象来定义事件函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> rejected</div><div class="line">rejected = <span class="built_in">Promise</span>.reject(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"It was my wrong!"</span>))</div><div class="line"></div><div class="line"><span class="built_in">window</span>.rejectionHandled = <span class="function"><span class="keyword">function</span>(<span class="params">event</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(event) <span class="comment">// true</span></div><div class="line">&#125;</div><div class="line">rejectionHandled()</div></pre></td></tr></table></figure>
<p>将代码在浏览器控制台执行一遍，你就会发现报错了：Uncaught (in promise) Error: It was my wrong!</p>
<p>耶，你成功了！报错内容正是你写的reject()方法里面的错误提示。</p>
<h4 id="Promise链式调用"><a href="#Promise链式调用" class="headerlink" title="Promise链式调用"></a>Promise链式调用</h4><p>这个例子中，使用了3个then，第一个then返回 s * s，第二个then捕获到上一个then的返回值，最后一个then直接输出end。这就叫链式调用，很好理解的。我只使用了then()，实际开发中，你还应该加上catch()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  <span class="keyword">try</span> &#123;</div><div class="line">    resolve(<span class="number">5</span>)</div><div class="line">  &#125; <span class="keyword">catch</span> (error) &#123;</div><div class="line">    reject(<span class="string">'It was my wrong!!!'</span>)</div><div class="line">  &#125;</div><div class="line">&#125;).then(<span class="function"><span class="params">s</span> =&gt;</span> s * s).then(<span class="function"><span class="params">s2</span> =&gt;</span> <span class="built_in">console</span>.log(s2)).then(<span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="string">'end'</span>))</div><div class="line"><span class="comment">// 25  "end"</span></div></pre></td></tr></table></figure>
<h4 id="Promise的其他方法"><a href="#Promise的其他方法" class="headerlink" title="Promise的其他方法"></a>Promise的其他方法</h4><p>在Promise的构造函数中，除了reject()和resolve()之外，还有2个方法，Promise.all()、Promise.race()。</p>
<p><strong>Promise.all()：</strong></p>
<p>前面我们的例子都是只有一个Promise，现在我们使用all()方法包装多个Promise实例。</p>
<p>语法很简单：参数只有一个，可迭代对象，可以是数组，或者Symbol类型等。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all(iterable).then().catch()</div></pre></td></tr></table></figure>
<p>示例：传入3个Promise实例<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.all([</div><div class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    resolve(<span class="number">1</span>)</div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    resolve(<span class="number">2</span>)</div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    resolve(<span class="number">3</span>)</div><div class="line">  &#125;)</div><div class="line">]).then(<span class="function"><span class="params">arr</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(arr) <span class="comment">// [1, 2, 3]</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p><strong>Promise.race()：</strong>语法和all()一样，但是返回值有所不同，race根据传入的多个Promise实例，只要有一个实例resolve或者reject，就只返回该结果，其他实例不再执行。</p>
<p>还是使用上面的例子，只是我给每个resolve加了一个定时器，最终结果返回的是3，因为第三个Promise最快执行。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Promise</span>.race([</div><div class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">1</span>), <span class="number">1000</span>)</div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">2</span>), <span class="number">100</span>)</div><div class="line">  &#125;),</div><div class="line">  <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> resolve(<span class="number">3</span>), <span class="number">10</span>)</div><div class="line">  &#125;)</div><div class="line">]).then(<span class="function"><span class="params">value</span> =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 3</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h4 id="Promise派生"><a href="#Promise派生" class="headerlink" title="Promise派生"></a>Promise派生</h4><p>派生的意思是定义一个新的Promise对象，继承Promise方法和属性。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyPromise</span> <span class="keyword">extends</span> <span class="title">Promise</span> </span>&#123;</div><div class="line"></div><div class="line">  <span class="comment">//重新封装then()</span></div><div class="line">  success(resolve, reject) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.then(resolve, reject)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//重新封装catch()</span></div><div class="line">  failer(reject) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.catch(reject)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>接着我们来使用一下这个派生类。<br>​<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> MyPromise(<span class="function"><span class="keyword">function</span>(<span class="params">resolve, reject</span>) </span>&#123;</div><div class="line">  resolve(<span class="number">10</span>)</div><div class="line">&#125;).success(<span class="function"><span class="params">v</span> =&gt;</span> <span class="built_in">console</span>.log(v)) <span class="comment">// 10</span></div></pre></td></tr></table></figure></p>
<p>如果只是派生出来和then、catch一样的方法，我想，你不会干这么无聊的事情。</p>
<h4 id="Promise和异步的联系"><a href="#Promise和异步的联系" class="headerlink" title="Promise和异步的联系"></a>Promise和异步的联系</h4><p>Promise本身不是异步的，只有他的then()或者catch()方法才是异步，也可以说Promise的返回值是异步的。通常Promise被使用在node，或者是前端的ajax请求、前端DOM渲染顺序等地方。</p>
<p>###比Promise更牛逼的异步方案</p>
<p>在本章你只需要了解有async这个未来的方案，推荐不会的赶紧去网上找资料学，反正我是已经在实际项目中全面开展async了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">async</span> <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">await</span> <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Promise是什么、怎么用、怎么获取返回值？是本章的中心内容，多看几遍，你会发现使用Promise是非常简单的事情。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;为什么要异步编程&quot;&gt;&lt;a href=&quot;#为什么要异步编程&quot; class=&quot;headerlink&quot; title=&quot;为什么要异步编程&quot;&gt;&lt;/a&gt;为什么要异步编程&lt;/h4&gt;&lt;p&gt;我们在写前端代码时，经常会对dom做事件处理操作，比如点击、激活焦点、失去焦点等；再比如我们用ajax请求数据，使用回调函数获取返回值。这些都属于异步编程。&lt;/p&gt;
&lt;p&gt;也许你已经大概知道JavaScript引擎单线程的概念，那么这种单线程模式和异步编程有什么关系呢？&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第十章-改进数组的功能</title>
    <link href="https://wiestlee.github.io/2017/06/29/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E5%8D%81%E7%AB%A0%E3%80%8B%E2%80%94%20%E6%94%B9%E8%BF%9B%E6%95%B0%E7%BB%84%E7%9A%84%E5%8A%9F%E8%83%BD/"/>
    <id>https://wiestlee.github.io/2017/06/29/《深入理解ES6第十章》— 改进数组的功能/</id>
    <published>2017-06-28T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:31.969Z</updated>
    
    <content type="html"><![CDATA[<p>ES5提供的数组已经很强大，但是ES6中继续改进了一些，主要是增加了新的数组方法，所以这章的知识非常少。</p>
<h3 id="创建数组"><a href="#创建数组" class="headerlink" title="创建数组"></a>创建数组</h3><p><strong>ES5中创建数组的方式：数组字面量、new一个数组。</strong></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr1 = [] <span class="comment">//数组字面量</span></div><div class="line"><span class="keyword">const</span> arr2 = <span class="keyword">new</span> <span class="built_in">Array</span>() <span class="comment">//new构建</span></div></pre></td></tr></table></figure>
<p><strong>ES6创建数组：Array.of()、Array.from()</strong></p>
<h4 id="Array-of"><a href="#Array-of" class="headerlink" title="Array.of()"></a>Array.of()</h4><p>ES5中new一个人数组的时候，会存在一个令人困惑的情况。当new一个数字的时候，生成的是一个长度为该数字的数组，当new一个字符串的时候，生成的是该字符串为元素的数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="number">2</span>)</div><div class="line"><span class="keyword">const</span> b = <span class="keyword">new</span> <span class="built_in">Array</span>(<span class="string">"2"</span>)</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">//[undefined, undefined] ["2"]</span></div></pre></td></tr></table></figure>
<p>这样一来，导致new Array的行为是不可预测的，Array.of()出现为的就是解决这个情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> c = <span class="built_in">Array</span>.of(<span class="number">2</span>)</div><div class="line"><span class="keyword">const</span> d = <span class="built_in">Array</span>.of(<span class="string">"2"</span>)</div><div class="line"><span class="built_in">console</span>.log(c, d) <span class="comment">// [2] ["2"]</span></div></pre></td></tr></table></figure>
<p>使用Array.of()创建的数组传入的参数都是作为数组的元素，而不在是数组长度，这样就避免了使用上的歧义。</p>
<h4 id="Array-from"><a href="#Array-from" class="headerlink" title="Array.from()"></a>Array.from()</h4><p>如果说Array.of()是创建一个新数组，而<strong>Array.from()是将类数组转换成数组</strong>。</p>
<p>下面的例子讲的是将arguments转换成数组。arguments是类数组对象，他表示的是当前函数的所有参数，如果函数没有参数，那么arguments就为空。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>)</div><div class="line">  <span class="built_in">console</span>.log(arr)</div><div class="line">&#125;</div><div class="line">test(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//[1, 2]</span></div></pre></td></tr></table></figure>
<p><strong>映射转换：</strong>Array.from(arg1, arg2)，我们可以给该方法提供2个参数，第二个参数作为第一个参数的转换。看个简单例子你就懂了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">a, b</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> arr = <span class="built_in">Array</span>.from(<span class="built_in">arguments</span>, value =&gt; value + <span class="number">2</span>)</div><div class="line">  <span class="built_in">console</span>.log(arr)</div><div class="line">&#125;</div><div class="line">test(<span class="number">1</span>, <span class="number">2</span>) <span class="comment">//[3, 4]</span></div></pre></td></tr></table></figure>
<p>Array.from还可以设置第三个参数，指定this。</p>
<p><strong>Array.from()转换可迭代对象：</strong>这个用法只需要一个例子，数组去重。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="built_in">Array</span>.from(<span class="keyword">new</span> <span class="built_in">Set</span>(...arguments))</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> s = test([<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">"2"</span>])</div><div class="line"><span class="built_in">console</span>.log(s) <span class="comment">// [1,"2",3]</span></div></pre></td></tr></table></figure>
<h3 id="给数组添加新方法"><a href="#给数组添加新方法" class="headerlink" title="给数组添加新方法"></a>给数组添加新方法</h3><p><strong>ES6给数组添加了几个新方法：find()、findIndex()、fill()、copyWithin()。</strong></p>
<p>1、find()：传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它，并且终止搜索。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">"2"</span>]</div><div class="line"><span class="built_in">console</span>.log(arr.find(<span class="function"><span class="params">n</span> =&gt;</span> <span class="keyword">typeof</span> n === <span class="string">"number"</span>)) <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>2、findIndex()：传入一个回调函数，找到数组中符合当前搜索规则的第一个元素，返回它的下标，终止搜索。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="string">"2"</span>, <span class="number">3</span>, <span class="number">3</span>, <span class="string">"2"</span>]</div><div class="line"><span class="built_in">console</span>.log(arr.findIndex(<span class="function"><span class="params">n</span> =&gt;</span> <span class="keyword">typeof</span> n === <span class="string">"number"</span>)) <span class="comment">// 0</span></div></pre></td></tr></table></figure>
<p>3、fill()：用新元素替换掉数组内的元素，可以指定替换下标范围。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.fill(value, start, end)</div></pre></td></tr></table></figure>
<p>测试一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="built_in">console</span>.log(arr.fill(<span class="number">4</span>)) <span class="comment">// [4, 4, 4] 不指定开始和结束，全部替换</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="built_in">console</span>.log(arr1.fill(<span class="number">4</span>, <span class="number">1</span>)) <span class="comment">// [1, 4, 4] 指定开始位置，从开始位置全部替换</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"><span class="built_in">console</span>.log(arr2.fill(<span class="number">4</span>, <span class="number">0</span>, <span class="number">2</span>)) <span class="comment">// [4, 4, 3] 指定开始和结束位置，替换当前范围的元素</span></div></pre></td></tr></table></figure>
<p>4、copyWithin()：选择数组的某个下标，从该位置开始复制数组元素，默认从0开始复制。也可以指定要复制的元素范围。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">arr.copyWithin(target, start, end)</div></pre></td></tr></table></figure>
<p>测试一下<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="built_in">console</span>.log(arr.copyWithin(<span class="number">3</span>)) <span class="comment">// [1,2,3,1,2] 从下标为3的元素开始，复制数组，所以4, 5被替换成1, 2</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr1 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="built_in">console</span>.log(arr1.copyWithin(<span class="number">3</span>, <span class="number">1</span>)) <span class="comment">// [1,2,3,2,3] 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，所以4, 5被替换成2, 3</span></div><div class="line"></div><div class="line"><span class="keyword">const</span> arr2 = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>, <span class="number">5</span>]</div><div class="line"><span class="built_in">console</span>.log(arr2.copyWithin(<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>)) <span class="comment">// [1,2,3,2,5] 从下标为3的元素开始，复制数组，指定复制的第一个元素下标为1，结束位置为2，所以4被替换成2</span></div></pre></td></tr></table></figure></p>
<h4 id="其他新增方法"><a href="#其他新增方法" class="headerlink" title="其他新增方法"></a>其他新增方法</h4><p>其他还有定型数组、数组缓冲区的概念，你可以详细查看书上教程。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>掌握新的创建数组的方式，以及数组新增的几个方法，就够你使用了。定型数组和数组缓冲区一般人可以不用了解的太详细。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;ES5提供的数组已经很强大，但是ES6中继续改进了一些，主要是增加了新的数组方法，所以这章的知识非常少。&lt;/p&gt;
&lt;h3 id=&quot;创建数组&quot;&gt;&lt;a href=&quot;#创建数组&quot; class=&quot;headerlink&quot; title=&quot;创建数组&quot;&gt;&lt;/a&gt;创建数组&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;ES5中创建数组的方式：数组字面量、new一个数组。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第九章-Javascript中的类class</title>
    <link href="https://wiestlee.github.io/2017/06/28/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E4%B9%9D%E7%AB%A0%E3%80%8B%E2%80%94%20JavaScript%E4%B8%AD%E7%9A%84%E7%B1%BBclass/"/>
    <id>https://wiestlee.github.io/2017/06/28/《深入理解ES6第九章》— JavaScript中的类class/</id>
    <published>2017-06-27T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:52.159Z</updated>
    
    <content type="html"><![CDATA[<h3 id="ES5中的近类结构"><a href="#ES5中的近类结构" class="headerlink" title="ES5中的近类结构"></a>ES5中的近类结构</h3><p>ES5以及之前的版本，没有类的概念，但是聪明的JavaScript开发者，为了实现面向对象，创建了特殊的近类结构。</p>
<p><strong>ES5中创建类的方法：新建一个构造函数，定义一个方法并且赋值给构造函数的原型。</strong></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="meta">'use strict'</span>;</div><div class="line"><span class="comment">//新建构造函数，默认大写字母开头</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">name</span>) </span>&#123;</div><div class="line">  <span class="keyword">this</span>.name = name;</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义一个方法并且赋值给构造函数的原型</span></div><div class="line">Person.prototype.sayName = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.name;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="keyword">var</span> p = <span class="keyword">new</span> Person(<span class="string">'eryue'</span>);</div><div class="line"><span class="built_in">console</span>.log(p.sayName() <span class="comment">// eryue</span></div><div class="line">);</div></pre></td></tr></table></figure>
<h3 id="ES6-class类"><a href="#ES6-class类" class="headerlink" title="ES6 class类"></a>ES6 class类</h3><p>ES6实现类非常简单，只需要类声明。推荐 <a href="https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=true&amp;presets=env,es2015,es2015-loose,es2016,es2017,stage-0,stage-1,stage-2,stage-3&amp;targets=&amp;browsers=%3E%202%25,%20ie%209,&amp;builtIns=false&amp;debug=false&amp;code_lz=MYGwhgzhAECC0G8BQ1rAPYDsIBcBOArsDungBS5g4CmAlIiqtDgBYCWEAdJTdALzQe1RgF9GAc2o5oAWwCeAOTAzqZesibQ8UgnkzN2XIZ0zLhqMaghTZis2VMr1jVKw7ccVaibP9oj82gxMRAbABNqCDw2AAcSPD8AeQAjACtqYk5JHESAd0wABTx0GOo8HDkAEUjgaLjSMlhOGOKSCtKAGmgAInklFW7aJAxsdFDOEHRxMgio2PjOakwCFTwwZNDaIA" target="_blank" rel="external">babel在线测试ES6</a> 测试下面的代码。</p>
<h4 id="类声明"><a href="#类声明" class="headerlink" title="类声明"></a>类声明</h4><p>如果你学过java，那么一定会非常熟悉这种声明类的方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Person</span> </span>&#123;</div><div class="line">  <span class="comment">//新建构造函数</span></div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name <span class="comment">//私有属性</span></div><div class="line">  &#125;</div><div class="line">  <span class="comment">//定义一个方法并且赋值给构造函数的原型</span></div><div class="line">  sayName() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person(<span class="string">'eryue'</span>)</div><div class="line"><span class="built_in">console</span>.log(p.sayName()) <span class="comment">// eryue</span></div></pre></td></tr></table></figure>
<p>和ES5中使用构造函数不同的是，在ES6中，我们将原型的实现写在了类中，但本质上还是一样的，都是需要新建一个类名，然后实现构造函数，再实现原型方法。</p>
<p><strong>私有属性：</strong>在class中实现私有属性，只需要在构造方法中定义this.xx = xx。</p>
<h4 id="类声明和函数声明的区别和特点"><a href="#类声明和函数声明的区别和特点" class="headerlink" title="类声明和函数声明的区别和特点"></a>类声明和函数声明的区别和特点</h4><p>1、函数声明可以被提升，类声明不能提升。</p>
<p>2、类声明中的代码自动强行运行在严格模式下。</p>
<p>3、类中的所有方法都是不可枚举的，而自定义类型中，可以通过Object.defineProperty()手工指定不可枚举属性。</p>
<p>4、每个类都有一个[[construct]]的方法。</p>
<p>5、只能使用new来调用类的构造函数。</p>
<p>6、不能在类中修改类名。</p>
<h4 id="类表达式"><a href="#类表达式" class="headerlink" title="类表达式"></a>类表达式</h4><p>类有2种表现形式：声明式和表达式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明式</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//匿名表达式</span></div><div class="line"><span class="keyword">let</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//命名表达式，B可以在外部使用，而B1只能在内部使用</span></div><div class="line"><span class="keyword">let</span> B = <span class="class"><span class="keyword">class</span> <span class="title">B1</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="类是一等公民"><a href="#类是一等公民" class="headerlink" title="类是一等公民"></a>类是一等公民</h4><p>JavaScript函数是一等公民，类也设计成一等公民。</p>
<p>1、可以将类作为参数传入函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新建一个类</span></div><div class="line"><span class="keyword">let</span> A = <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">  sayName() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'eryue'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//该函数返回一个类的实例</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">classA</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="keyword">new</span> classA()</div><div class="line">&#125;</div><div class="line"><span class="comment">//给test函数传入A</span></div><div class="line"><span class="keyword">let</span> t = test(A)</div><div class="line"><span class="built_in">console</span>.log(t.sayName()) <span class="comment">// eryue</span></div></pre></td></tr></table></figure>
<p>2、通过立即调用类构造函数可以创建单例。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> <span class="class"><span class="keyword">class</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">  sayName() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">  &#125;</div><div class="line">&#125;(<span class="string">'eryue'</span>)</div><div class="line"><span class="built_in">console</span>.log(a.sayName()) <span class="comment">// eryue</span></div></pre></td></tr></table></figure>
<h4 id="访问器属性"><a href="#访问器属性" class="headerlink" title="访问器属性"></a>访问器属性</h4><p>类支持在原型上定义访问器属性。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(state) &#123;</div><div class="line">    <span class="keyword">this</span>.state = state</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 创建getter</span></div><div class="line">  get myName() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.state.name</div><div class="line">  &#125;</div><div class="line">  <span class="comment">// 创建setter</span></div><div class="line">  set myName(name) &#123;</div><div class="line">    <span class="keyword">this</span>.state.name = name</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">// 获取指定对象的自身属性描述符。自身属性描述符是指直接在对象上定义（而非从对象的原型继承）的描述符。</span></div><div class="line"><span class="keyword">let</span> desriptor = <span class="built_in">Object</span>.getOwnPropertyDescriptor(A.prototype, <span class="string">"myName"</span>)</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"get"</span> <span class="keyword">in</span> desriptor) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(desriptor.enumerable) <span class="comment">// false 不可枚举</span></div></pre></td></tr></table></figure></p>
<h4 id="可计算成员名称"><a href="#可计算成员名称" class="headerlink" title="可计算成员名称"></a>可计算成员名称</h4><p>可计算成员是指使用方括号包裹一个表达式，如下面定义了一个变量m，然后使用[m]设置为类A的原型方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> m = <span class="string">"sayName"</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">  [m]() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A(<span class="string">"eryue"</span>)</div><div class="line"><span class="built_in">console</span>.log(a.sayName()) <span class="comment">// eryue</span></div></pre></td></tr></table></figure></p>
<h4 id="生成器方法"><a href="#生成器方法" class="headerlink" title="生成器方法"></a>生成器方法</h4><p>回顾一下上一章讲的生成器，生成器是一个返回迭代器的函数。在类中，我们也可以使用生成器方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  *printId() &#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A()</div><div class="line"><span class="built_in">console</span>.log(a.printId().next()) <span class="comment">// &#123;done: false, value: 1&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.printId().next()) <span class="comment">// &#123;done: false, value: 2&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.printId().next()) <span class="comment">// &#123;done: false, value: 3&#125;</span></div></pre></td></tr></table></figure>
<p>这个写法很有趣，我们新增一个原型方法稍微改动一下。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  *printId() &#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">  &#125;</div><div class="line">  render() &#123;</div><div class="line">  <span class="comment">//从render方法访问printId，很熟悉吧，这就是react中经常用到的写法。</span></div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.printId()</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A()</div><div class="line"><span class="built_in">console</span>.log(a.render().next()) <span class="comment">// &#123;done: false, value: 1&#125;</span></div></pre></td></tr></table></figure>
<h4 id="静态成员"><a href="#静态成员" class="headerlink" title="静态成员"></a>静态成员</h4><p>静态成员是指在方法名或属性名前面加上static关键字，和普通方法不一样的是，static修饰的方法不能在实例中访问，只能在类中直接访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(name) &#123;</div><div class="line">    <span class="keyword">this</span>.name = name</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> create(name) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">new</span> A(name)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = A.create(<span class="string">"eryue"</span>)</div><div class="line"><span class="built_in">console</span>.log(a.name) <span class="comment">// eryue</span></div><div class="line"></div><div class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> A()</div><div class="line"><span class="built_in">console</span>.log(t.create(<span class="string">"eryue"</span>)) <span class="comment">// t.create is not a function</span></div></pre></td></tr></table></figure></p>
<h4 id="继承与派生类"><a href="#继承与派生类" class="headerlink" title="继承与派生类"></a>继承与派生类</h4><p>我们在写react的时候，自定义的组件会继承React.Component。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">   <span class="keyword">constructor</span>(props)&#123;</div><div class="line">       <span class="keyword">super</span>(props)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>A叫做派生类</strong>，在派生类中，如果使用了构造方法，就必须使用super()。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>([a, b] = props) &#123;</div><div class="line">    <span class="keyword">this</span>.a = a</div><div class="line">    <span class="keyword">this</span>.b = b</div><div class="line">  &#125;</div><div class="line">  add() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> T([<span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="built_in">console</span>.log(t.add()) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<p><strong>关于super使用的几点要求：</strong></p>
<p>1、只可以在派生类中使用super。派生类是指继承自其它类的新类。</p>
<p>2、在构造函数中访问this之前要调用super()，负责初始化this。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">this</span>.name = <span class="number">1</span> <span class="comment">// 错误，必须先写super()</span></div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、如果不想调用super，可以让类的构造函数返回一个对象。</p>
<h4 id="类方法遮蔽"><a href="#类方法遮蔽" class="headerlink" title="类方法遮蔽"></a>类方法遮蔽</h4><p>我们可以在继承的类中重写父类的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>([a, b] = props) &#123;</div><div class="line">    <span class="keyword">this</span>.a = a</div><div class="line">    <span class="keyword">this</span>.b = b</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//父类的add方法，求和</span></div><div class="line">  add() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a + <span class="keyword">this</span>.b</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">  &#125;</div><div class="line">  <span class="comment">//重写add方法，求积</span></div><div class="line">  add() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.a * <span class="keyword">this</span>.b</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> t = <span class="keyword">new</span> T([<span class="number">2</span>, <span class="number">3</span>])</div><div class="line"><span class="built_in">console</span>.log(t.add()) <span class="comment">// 6</span></div></pre></td></tr></table></figure></p>
<h4 id="静态成员继承"><a href="#静态成员继承" class="headerlink" title="静态成员继承"></a>静态成员继承</h4><p><strong>父类中的静态成员，也可以继承到派生类中。</strong>静态成员继承只能通过派生类访问，不能通过派生类的实例访问。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>([a, b] = props) &#123;</div><div class="line">    <span class="keyword">this</span>.a = a</div><div class="line">    <span class="keyword">this</span>.b = b</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">static</span> printSum([a, b] = props) &#123;</div><div class="line">    <span class="keyword">return</span> a + b</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">T</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>(props) &#123;</div><div class="line">    <span class="keyword">super</span>(props)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(T.printSum([<span class="number">2</span>, <span class="number">3</span>])) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<h4 id="派生自表达式的类"><a href="#派生自表达式的类" class="headerlink" title="派生自表达式的类"></a>派生自表达式的类</h4><p>很好理解，就是指父类可以是一个表达式。</p>
<h4 id="内建对象的继承"><a href="#内建对象的继承" class="headerlink" title="内建对象的继承"></a>内建对象的继承</h4><p>有些牛逼的人觉得使用内建的Array不够爽，就希望ECMA提供一种继承内建对象的方法，然后那帮大神们就把这个功能添加到class中了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyArray</span> <span class="keyword">extends</span> <span class="title">Array</span> </span>&#123; &#125;</div><div class="line"><span class="keyword">let</span> colors = <span class="keyword">new</span> <span class="built_in">Array</span>()</div><div class="line">colors[<span class="number">0</span>] = <span class="string">"1"</span></div><div class="line"><span class="built_in">console</span>.log(colors) <span class="comment">// [1]</span></div></pre></td></tr></table></figure></p>
<h4 id="Symbol-species"><a href="#Symbol-species" class="headerlink" title="Symbol.species"></a>Symbol.species</h4><p>该用法我还没有接触过，目前只知道在内建对象中使用了该方法，如果在类中调用this.constructor，使用Symbol.species可以让派生类重写返回类型。</p>
<h4 id="在构造函数中使用new-target"><a href="#在构造函数中使用new-target" class="headerlink" title="在构造函数中使用new.target"></a>在构造函数中使用new.target</h4><p>new.target通常表示当前的构造函数名。通常我们使用new.target来阻止直接实例化基类，下面是这个例子的实现。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</div><div class="line">  <span class="keyword">constructor</span>() &#123;</div><div class="line">  <span class="comment">//如果当前的new.target为A类，就抛出异常</span></div><div class="line">    <span class="keyword">if</span> (<span class="keyword">new</span>.target === A) &#123;</div><div class="line">      <span class="keyword">throw</span> <span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">"error haha"</span>)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="keyword">new</span> A()</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// error haha</span></div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本章只有一个知识点，那就是class的使用，最开始的声明class，到后面的继承派生类，都是非常常用的写法，还有静态成员的使用。</p>
<p>如果上面的那些例子你练习的不够爽，或许你该找个react基础demo简单的使用class来练练手了。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;ES5中的近类结构&quot;&gt;&lt;a href=&quot;#ES5中的近类结构&quot; class=&quot;headerlink&quot; title=&quot;ES5中的近类结构&quot;&gt;&lt;/a&gt;ES5中的近类结构&lt;/h3&gt;&lt;p&gt;ES5以及之前的版本，没有类的概念，但是聪明的JavaScript开发者，为了实现面向对象，创建了特殊的近类结构。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ES5中创建类的方法：新建一个构造函数，定义一个方法并且赋值给构造函数的原型。&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第八章-迭代器和生成器</title>
    <link href="https://wiestlee.github.io/2017/06/27/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E5%85%AB%E7%AB%A0%E3%80%8B%E2%80%94%E8%BF%AD%E4%BB%A3%E5%99%A8%EF%BC%88Iterator%EF%BC%89%E5%92%8C%E7%94%9F%E6%88%90%E5%99%A8%EF%BC%88Generator%EF%BC%89/"/>
    <id>https://wiestlee.github.io/2017/06/27/《深入理解ES6第八章》—迭代器（Iterator）和生成器（Generator）/</id>
    <published>2017-06-26T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:43.810Z</updated>
    
    <content type="html"><![CDATA[<h3 id="迭代器（Iterator）"><a href="#迭代器（Iterator）" class="headerlink" title="迭代器（Iterator）"></a>迭代器（Iterator）</h3><h4 id="ES5实现迭代器"><a href="#ES5实现迭代器" class="headerlink" title="ES5实现迭代器"></a>ES5实现迭代器</h4><p>迭代器是什么？遇到这种新的概念，莫慌张。</p>
<p><strong>迭代器是一种特殊对象，每一个迭代器对象都有一个next()，该方法返回一个对象，包括value和done属性。</strong></p>
<p><strong>ES5实现迭代器的代码如下：</strong></p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实现一个返回迭代器对象的函数，注意该函数不是迭代器，返回结果才叫做迭代器。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">createIterator</span>(<span class="params">items</span>) </span>&#123;</div><div class="line">  <span class="keyword">var</span> i = <span class="number">0</span>;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    next() &#123;</div><div class="line">      <span class="keyword">var</span> done = (i &gt;= items.length); <span class="comment">// 判断i是否小于遍历的对象长度。</span></div><div class="line">      <span class="keyword">var</span> value = !done ? items[i++] : <span class="literal">undefined</span>; <span class="comment">//如果done为false，设置value为当前遍历的值。</span></div><div class="line">      <span class="keyword">return</span> &#123;</div><div class="line">        done,</div><div class="line">        value</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = createIterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"></div><div class="line"><span class="comment">//该方法返回的最终是一个对象，包含value、done属性。</span></div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: 2, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: 3, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure>
<h3 id="生成器（Generator）"><a href="#生成器（Generator）" class="headerlink" title="生成器（Generator）"></a>生成器（Generator）</h3><p><strong>生成器是函数：用来返回迭代器。</strong></p>
<p>这个概念有2个关键点，一个是函数、一个是返回迭代器。这个函数不是上面ES5中创建迭代器的函数，而是ES6中特有的，一个带有*（星号）的函数，同时你也需要使用到yield。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//生成器函数，ES6内部实现了迭代器功能，你要做的只是使用yield来迭代输出。</span></div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = createIterator();</div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: 2, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: 3, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure>
<p>生成器的yield关键字有个神奇的功能，就是当你执行一次next()，那么只会执行一个yield后面的内容，然后语句终止运行。</p>
<h4 id="在for循环中使用迭代器"><a href="#在for循环中使用迭代器" class="headerlink" title="在for循环中使用迭代器"></a>在for循环中使用迭代器</h4><p>即使你是在for循环中使用yield关键字，也会暂停循环。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params">items</span>) </span>&#123;</div><div class="line">  <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; items.length;  i++) &#123;</div><div class="line">    <span class="keyword">yield</span> items[i]</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = createIterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//&#123;value: 1, done: false&#125;</span></div></pre></td></tr></table></figure></p>
<h4 id="yield使用限制"><a href="#yield使用限制" class="headerlink" title="yield使用限制"></a>yield使用限制</h4><p>yield只可以在生成器函数内部使用，如果在非生成器函数内部使用，则会报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params">items</span>) </span>&#123;</div><div class="line">    <span class="comment">//你应该在这里使用yield</span></div><div class="line">  items.map(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">yield</span> value <span class="comment">//语法错误，在map的回调函数里面使用了yield</span></div><div class="line">  &#125;)</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = createIterator([<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]);</div><div class="line"><span class="built_in">console</span>.log(a.next()); <span class="comment">//无输出</span></div></pre></td></tr></table></figure>
<h4 id="生成器函数表达式"><a href="#生成器函数表达式" class="headerlink" title="生成器函数表达式"></a>生成器函数表达式</h4><p>函数表达式很简单，就是下面这种写法，也叫匿名函数，不用纠结。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> createIterator = <span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">    <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = createIterator();</div><div class="line"><span class="built_in">console</span>.log(a.next());</div></pre></td></tr></table></figure></p>
<h4 id="在对象中添加生成器函数"><a href="#在对象中添加生成器函数" class="headerlink" title="在对象中添加生成器函数"></a>在对象中添加生成器函数</h4><p>一个对象长这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;&#125;</div></pre></td></tr></table></figure>
<p>我们可以在obj中添加一个生成器，也就是添加一个带星号的方法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">  *createIterator() &#123;</div><div class="line">    <span class="keyword">yield</span> <span class="keyword">this</span>.a</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = obj.createIterator();</div><div class="line"><span class="built_in">console</span>.log(a.next());  <span class="comment">//&#123;value: 1, done: false&#125;</span></div></pre></td></tr></table></figure>
<h4 id="可迭代对象和for-of循环"><a href="#可迭代对象和for-of循环" class="headerlink" title="可迭代对象和for of循环"></a>可迭代对象和for of循环</h4><p>再次默读一遍，迭代器是对象，生成器是返回迭代器的函数。</p>
<p>凡是通过生成器生成的迭代器，都是可以迭代的对象(可迭代对象具有Symbol.iterator属性)，也就是可以通过for of将value遍历出来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = createIterator();</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> a) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 1 2 3</span></div></pre></td></tr></table></figure>
<p>上面的例子告诉我们生成器函数返回的迭代器是一个可以迭代的对象。其实我们这里要研究的是Symbol.iterator的用法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">  <span class="keyword">yield</span> <span class="number">3</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> a = createIterator(); <span class="comment">//a是一个迭代器</span></div><div class="line"><span class="keyword">const</span> s = a[<span class="built_in">Symbol</span>.iterator]();<span class="comment">//使用Symbol.iterator访问迭代器</span></div><div class="line"><span class="built_in">console</span>.log(s.next()) <span class="comment">//&#123;value: 1, done: false&#125;</span></div></pre></td></tr></table></figure>
<p>Symbol.iterator还可以用来检测一个对象是否可迭代：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">typeof</span> obj[<span class="built_in">Symbol</span>.iterator] === <span class="string">"function"</span></div></pre></td></tr></table></figure>
<h4 id="创建可迭代对象"><a href="#创建可迭代对象" class="headerlink" title="创建可迭代对象"></a>创建可迭代对象</h4><p><strong>在ES6中，数组、Set、Map、字符串都是可迭代对象。</strong></p>
<p><strong>默认情况下定义的对象（object）是不可迭代的，但是可以通过Symbol.iterator创建迭代器。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">items</span>: []</div><div class="line">&#125;</div><div class="line">obj.items.push(<span class="number">1</span>);<span class="comment">//这样子虽然向数组添加了新元素，但是obj不可迭代</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(x) <span class="comment">// _iterator[Symbol.iterator] is not a function</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//接下来给obj添加一个生成器，使obj成为一个可以迭代的对象。</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">items</span>: [],</div><div class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">of</span> <span class="keyword">this</span>.items) &#123;</div><div class="line">      <span class="keyword">yield</span> item;</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line">obj.items.push(<span class="number">1</span>)</div><div class="line"><span class="comment">//现在可以通过for of迭代obj了。</span></div><div class="line"><span class="keyword">for</span> (<span class="keyword">let</span> x <span class="keyword">of</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(x)</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h4 id="内建迭代器"><a href="#内建迭代器" class="headerlink" title="内建迭代器"></a>内建迭代器</h4><p>上面提到了，数组、Set、Map都是可迭代对象，即它们内部实现了迭代器，并且提供了3种迭代器函数调用。</p>
<p><strong>1、entries() 返回迭代器</strong>：返回键值对<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// [0, 'a'] [1, 'b'] [2, 'c']</span></div><div class="line"></div><div class="line"><span class="comment">//Set</span></div><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// ['a', 'a'] ['b', 'b'] ['c', 'c']</span></div><div class="line"></div><div class="line"><span class="comment">//Map</span></div><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">arr.set(<span class="string">'a'</span>, <span class="string">'a'</span>);</div><div class="line">arr.set(<span class="string">'b'</span>, <span class="string">'b'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// ['a', 'a'] ['b', 'b']</span></div></pre></td></tr></table></figure></p>
<p><strong>2、values() 返回迭代器</strong>：返回键值对的value</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">//'a' 'b' 'c'</span></div><div class="line"></div><div class="line"><span class="comment">//Set</span></div><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a' 'b' 'c'</span></div><div class="line"></div><div class="line"><span class="comment">//Map</span></div><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">arr.set(<span class="string">'a'</span>, <span class="string">'a'</span>);</div><div class="line">arr.set(<span class="string">'b'</span>, <span class="string">'b'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.values()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a' 'b'</span></div></pre></td></tr></table></figure>
<p><strong>3、keys() 返回迭代器</strong>：返回键值对的key</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>];</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 0 1 2</span></div><div class="line"></div><div class="line"><span class="comment">//Set</span></div><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Set</span>([<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>]);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a' 'b' 'c'</span></div><div class="line"></div><div class="line"><span class="comment">//Map</span></div><div class="line"><span class="keyword">const</span> arr = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">arr.set(<span class="string">'a'</span>, <span class="string">'a'</span>);</div><div class="line">arr.set(<span class="string">'b'</span>, <span class="string">'b'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> arr.keys()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a' 'b'</span></div></pre></td></tr></table></figure>
<p>虽然上面列举了3种内建的迭代器方法，但是不同集合的类型还有自己默认的迭代器，在for of中，数组和Set的默认迭代器是values()，Map的默认迭代器是entries()。<br>​    </p>
<h4 id="for-of循环解构"><a href="#for-of循环解构" class="headerlink" title="for of循环解构"></a>for of循环解构</h4><p>对象本身不支持迭代，但是我们可以自己添加一个生成器，返回一个key，value的迭代器，然后使用for of循环解构key和value。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">b</span>: <span class="number">2</span>,</div><div class="line">  *[<span class="built_in">Symbol</span>.iterator]() &#123;</div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> obj) &#123;</div><div class="line">      <span class="keyword">yield</span> [i, obj[i]]</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, value] <span class="keyword">of</span> obj) &#123;</div><div class="line">  <span class="built_in">console</span>.log(key, value)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a' 1, 'b' 2</span></div></pre></td></tr></table></figure></p>
<h4 id="字符串迭代器"><a href="#字符串迭代器" class="headerlink" title="字符串迭代器"></a>字符串迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> str = <span class="string">'abc'</span>;</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> v <span class="keyword">of</span> str) &#123;</div><div class="line">  <span class="built_in">console</span>.log(v)</div><div class="line">&#125;</div><div class="line"><span class="comment">// 'a' 'b' 'c'</span></div></pre></td></tr></table></figure>
<h4 id="NodeList迭代器"><a href="#NodeList迭代器" class="headerlink" title="NodeList迭代器"></a>NodeList迭代器</h4><p>迭代器真是无处不在啊，dom节点的迭代器你应该已经用过了。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> divs = <span class="built_in">document</span>.getElementByTagName(<span class="string">'div'</span>);</div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> d <span class="keyword">of</span> divs) &#123;</div><div class="line">  <span class="built_in">console</span>.log(d)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h4 id="展开运算符和迭代器"><a href="#展开运算符和迭代器" class="headerlink" title="展开运算符和迭代器"></a>展开运算符和迭代器</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="keyword">const</span> b = [<span class="number">4</span>, <span class="number">5</span>, <span class="number">6</span>];</div><div class="line"><span class="keyword">const</span> c = [...a, ...b]</div><div class="line"><span class="built_in">console</span>.log(c) <span class="comment">// [1, 2, 3, 4, 5, 6]</span></div></pre></td></tr></table></figure>
<h4 id="高级迭代器功能"><a href="#高级迭代器功能" class="headerlink" title="高级迭代器功能"></a>高级迭代器功能</h4><p>你说什么？上面讲了一堆废话都是基础功能？还有高级功能没讲？</p>
<p>高级功能不复杂，就是传参、抛出异常、生成器返回语句、委托生成器。</p>
<p>1、传参</p>
<p>生成器里面有2个yield，当执行第一个next()的时候，返回value为1，然后给第二个next()传入参数10，传递的参数会替代掉上一个next()的yield返回值。在下面的例子中就是first。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> first + <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> i = createIterator();</div><div class="line"><span class="built_in">console</span>.log(i.next()); <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(i.next(<span class="number">10</span>)); <span class="comment">// &#123;value: 12, done: false&#125;</span></div></pre></td></tr></table></figure></p>
<p>2、在迭代器中抛出错误</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">yield</span> first + <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> i = createIterator();</div><div class="line"><span class="built_in">console</span>.log(i.next()); <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(i.throw(<span class="keyword">new</span> <span class="built_in">Error</span>(<span class="string">'error'</span>))); <span class="comment">// error</span></div><div class="line"><span class="built_in">console</span>.log(i.next()); <span class="comment">//不再执行</span></div></pre></td></tr></table></figure>
<p>3、生成器返回语句</p>
<p>生成器中添加return表示退出操作。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">createIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> first = <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  <span class="keyword">return</span>;</div><div class="line">  <span class="keyword">yield</span> first + <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> i = createIterator();</div><div class="line"><span class="built_in">console</span>.log(i.next()); <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(i.next()); <span class="comment">// &#123;value: undefined, done: true&#125;</span></div></pre></td></tr></table></figure></p>
<p>4、委托生成器</p>
<p>生成器嵌套生成器</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">aIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">bIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> <span class="number">2</span>;</div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> *<span class="title">cIterator</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">yield</span> *aIterator()</div><div class="line">  <span class="keyword">yield</span> *bIterator()</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> i = cIterator();</div><div class="line"><span class="built_in">console</span>.log(i.next()); <span class="comment">// &#123;value: 1, done: false&#125;</span></div><div class="line"><span class="built_in">console</span>.log(i.next()); <span class="comment">// &#123;value: 2, done: false&#125;</span></div></pre></td></tr></table></figure>
<h3 id="异步任务执行器"><a href="#异步任务执行器" class="headerlink" title="异步任务执行器"></a>异步任务执行器</h3><p>ES6之前，我们使用异步的操作方式是调用函数并执行回调函数。</p>
<p>书上举的例子挺好的，在nodejs中，有一个读取文件的操作，使用的就是回调函数的方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> fs = <span class="built_in">require</span>(<span class="string">"fs"</span>);</div><div class="line">fs.readFile(<span class="string">"xx.json"</span>, <span class="function"><span class="keyword">function</span>(<span class="params">err, contents</span>) </span>&#123;</div><div class="line">  <span class="comment">//在回调函数中做一些事情</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>那么任务执行器是什么呢？</p>
<p><strong>任务执行器是一个函数，用来循环执行生成器，因为我们知道生成器需要执行N次next()方法，才能运行完，所以我们需要一个自动任务执行器帮我们做这些事情，这就是任务执行器的作用。</strong>    </p>
<p>下面我们编写一个异步任务执行器。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//taskDef是一个生成器函数，run是异步任务执行器</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">run</span>(<span class="params">taskDef</span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> task = taskDef(); <span class="comment">//调用生成器</span></div><div class="line">  <span class="keyword">let</span> result = task.next(); <span class="comment">//执行生成器的第一个next()，返回result</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">step</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(!result.done) &#123;</div><div class="line">    <span class="comment">//如果done为false，则继续执行next()，并且循环step，直到done为true退出。</span></div><div class="line">      result = task.next(result.value);</div><div class="line">      step();</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  step(); <span class="comment">//开始执行step()</span></div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>测试一下我们编写的run方法，我们不再需要console.log N个next了，因为run执行器已经帮我们做了循环执行操作：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">run(<span class="function"><span class="keyword">function</span> *(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">let</span> value = <span class="keyword">yield</span> <span class="number">1</span>;</div><div class="line">  value = <span class="keyword">yield</span> value + <span class="number">20</span>;</div><div class="line">  <span class="built_in">console</span>.log(value) <span class="comment">// 21</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本章讲了3个概念，迭代器、生成器、任务执行器。</p>
<p>迭代器是一个对象。</p>
<p>生成器是一个函数，它最终返回迭代器。</p>
<p>任务执行器一个函数（或者也叫生成器的回调函数），帮我们自动执行生成器的内部运算，最终返回迭代器。</p>
<p>不知道看到这里，你明白3者的区别和用法没？</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;迭代器（Iterator）&quot;&gt;&lt;a href=&quot;#迭代器（Iterator）&quot; class=&quot;headerlink&quot; title=&quot;迭代器（Iterator）&quot;&gt;&lt;/a&gt;迭代器（Iterator）&lt;/h3&gt;&lt;h4 id=&quot;ES5实现迭代器&quot;&gt;&lt;a href=&quot;#ES5实现迭代器&quot; class=&quot;headerlink&quot; title=&quot;ES5实现迭代器&quot;&gt;&lt;/a&gt;ES5实现迭代器&lt;/h4&gt;&lt;p&gt;迭代器是什么？遇到这种新的概念，莫慌张。&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;迭代器是一种特殊对象，每一个迭代器对象都有一个next()，该方法返回一个对象，包括value和done属性。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ES5实现迭代器的代码如下：&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第七章-Set集合与Map集合</title>
    <link href="https://wiestlee.github.io/2017/06/26/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E4%B8%83%E7%AB%A0%E3%80%8B%E2%80%94Set%E9%9B%86%E5%90%88%E4%B8%8EMap%E9%9B%86%E5%90%88/"/>
    <id>https://wiestlee.github.io/2017/06/26/《深入理解ES6第七章》—Set集合与Map集合/</id>
    <published>2017-06-25T16:00:00.000Z</published>
    <updated>2017-12-03T04:55:04.118Z</updated>
    
    <content type="html"><![CDATA[<p>Map和Set都叫做集合，但是他们也有所不同。Set常被用来检查对象中是否存在某个键名，Map集合常被用来获取已存的信息。</p>
<h3 id="Set"><a href="#Set" class="headerlink" title="Set"></a>Set</h3><h4 id="Set是有序列表，含有相互独立的非重复值。"><a href="#Set是有序列表，含有相互独立的非重复值。" class="headerlink" title="Set是有序列表，含有相互独立的非重复值。"></a>Set是有序列表，含有相互独立的非重复值。</h4><a id="more"></a>
<h4 id="创建Set"><a href="#创建Set" class="headerlink" title="创建Set"></a>创建Set</h4><p>既然我们现在不知道Set长什么样，有什么价值，那么何不创建一个Set集合看看呢？</p>
<p><strong>创建一个Set集合，你可以这样做：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line"><span class="built_in">console</span>.log(set);</div><div class="line"></div><div class="line"><span class="comment">//在浏览器控制台的输出结果</span></div><div class="line"><span class="built_in">Set</span>(<span class="number">0</span>) &#123;&#125;</div><div class="line">    size:(...)</div><div class="line">    __proto__:<span class="built_in">Set</span></div><div class="line">    [[Entries]]:<span class="built_in">Array</span>(<span class="number">0</span>)</div><div class="line">    length:<span class="number">0</span></div></pre></td></tr></table></figure>
<p>看起来像个对象，那么现在我们在控制台打印一个对象，对比一下两者有什么不同。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = <span class="keyword">new</span> <span class="built_in">Object</span>()</div><div class="line"><span class="built_in">console</span>.log(obj)</div><div class="line"></div><div class="line"><span class="comment">//在控制台输出对象</span></div><div class="line"><span class="built_in">Object</span> &#123;&#125;</div><div class="line">    __proto__:</div></pre></td></tr></table></figure>
<p>从输出结果看，Set和Object有明显的区别，反正他们就不是一个东西。</p>
<p><strong>接着，我们看一下Set的原型有哪些：</strong></p>
<p><img src="https://segmentfault.com/img/bVRqlN?w=858&amp;h=652" alt="clipboard.png"></p>
<p>这里主要介绍几个基础原型的作用，想要了解全部请前往 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Set" target="_blank" rel="external">Set集合之家</a> 查看：</p>
<p>Set.prototype.size<br>返回Set对象的值的个数。</p>
<p>Set.prototype.add(value)<br>在Set对象尾部添加一个元素。返回该Set对象。</p>
<p>Set.prototype.entries()<br>返回一个新的迭代器对象，该对象包含Set对象中的按插入顺序排列的所有元素的值的[value, value]数组。为了使这个方法和Map对象保持相似， 每个值的键和值相等。</p>
<p>Set.prototype.forEach(callbackFn[, thisArg])<br>按照插入顺序，为Set对象中的每一个值调用一次callBackFn。如果提供了thisArg参数，回调中的this会是这个参数。</p>
<p>Set.prototype.has(value)<br>返回一个布尔值，表示该值在Set中存在与否。</p>
<p><strong>在例子中使用这几个方法测试一下：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">set.add(<span class="string">'haha'</span>);</div><div class="line">set.add(<span class="built_in">Symbol</span>(<span class="string">'haha'</span>));</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(set.size); <span class="comment">//2</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(set); </div><div class="line"><span class="built_in">Set</span>(<span class="number">2</span>) &#123;<span class="string">"haha"</span>, <span class="built_in">Symbol</span>(haha)&#125;</div><div class="line">    size:(...)</div><div class="line">    __proto__:<span class="built_in">Set</span></div><div class="line">    [[Entries]]:<span class="built_in">Array</span>(<span class="number">2</span>)</div><div class="line">        <span class="number">0</span>:<span class="string">"haha"</span></div><div class="line">        <span class="number">1</span>:<span class="built_in">Symbol</span>(haha)</div><div class="line">    length:<span class="number">2</span></div><div class="line">    </div><div class="line"><span class="built_in">console</span>.log(set.has(<span class="string">'haha'</span>)) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<p>到这里，你会发现Set像数组，又像一个对象，但又不完全是。</p>
<h4 id="迭代Set"><a href="#迭代Set" class="headerlink" title="迭代Set"></a>迭代Set</h4><p>Set既然提供了entries和forEach方法，那么他就是可迭代的。</p>
<p>但如果你使用for in来迭代Set，你不能这样做：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i <span class="keyword">in</span> sets) &#123;</div><div class="line">  <span class="built_in">console</span>.log(i); <span class="comment">//不存在</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>for in迭代的是对象的key，而在Set中的元素没有key，<strong>使用for of来遍历</strong>：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> sets) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value);</div><div class="line">&#125;</div><div class="line"><span class="comment">//"haha"</span></div><div class="line"><span class="comment">//Symbol(haha)</span></div><div class="line"></div><div class="line"><span class="comment">//如果你需要key，则使用下面这种方法</span></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> [key, value] <span class="keyword">of</span> sets.entries()) &#123;</div><div class="line">  <span class="built_in">console</span>.log(value, key);</div><div class="line">&#125; </div><div class="line"><span class="comment">//"haha" "haha"</span></div><div class="line"><span class="comment">//Symbol(haha) Symbol(haha)</span></div></pre></td></tr></table></figure>
<p><strong>forEach操作Set：</strong>Set本身没有key，而forEach方法中的key被设置成了元素本身。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">sets.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(value, key);</div><div class="line">&#125;);</div><div class="line"><span class="comment">//"haha" "haha"</span></div><div class="line"><span class="comment">//Symbol(haha) Symbol(haha)</span></div><div class="line"></div><div class="line">sets.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(value, key));</div><div class="line">&#125;); </div><div class="line"><span class="comment">//true true</span></div></pre></td></tr></table></figure>
<h4 id="Set和Array的转换"><a href="#Set和Array的转换" class="headerlink" title="Set和Array的转换"></a>Set和Array的转换</h4><p>Set和数组太像了，Set集合的特点是没有key，没有下标，只有size和原型以及一个可迭代的不重复元素的类数组。既然这样，我们就可以把一个Set集合转换成数组，也可以把数组转换成Set。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//数组转换成Set</span></div><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">2</span>, <span class="string">'3'</span>, <span class="string">'3'</span>]</div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line"><span class="built_in">console</span>.log(set) <span class="comment">// Set(3) &#123;1, 2, "3"&#125;</span></div><div class="line"></div><div class="line"><span class="comment">//Set转换成数组</span></div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>();</div><div class="line">set.add(<span class="number">1</span>);</div><div class="line">set.add(<span class="string">'2'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set)) <span class="comment">// (2) [1, "2"]</span></div></pre></td></tr></table></figure>
<p>js面试中，经常会考的一道数组去重题目，就可以使用Set集合的不可重复性来处理。经测试只能去重下面3种类型的数据。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">1</span>, <span class="number">1</span>, <span class="string">'haha'</span>, <span class="string">'haha'</span>, <span class="literal">null</span>, <span class="literal">null</span>]</div><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);</div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(set)) <span class="comment">// [1, 'haha', null]</span></div><div class="line"><span class="built_in">console</span>.log([...set]) <span class="comment">// [1, 'haha', null]</span></div></pre></td></tr></table></figure>
<h3 id="Weak-Set集合"><a href="#Weak-Set集合" class="headerlink" title="Weak Set集合"></a>Weak Set集合</h3><p>Set集合本身是强引用，只要new Set()实例化的引用存在，就不释放内存，这样一刀切肯定不好啊，比如你定义了一个DOM元素的Set集合，然后在某个js中引用了该实例，但是当页面关闭或者跳转时，你希望该引用应立即释放内存，Set不听话，那好，你还可以使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/WeakSet" target="_blank" rel="external">Weak Set</a></p>
<p><strong>语法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">new</span> <span class="built_in">WeakSet</span>([iterable]);</div></pre></td></tr></table></figure>
<p><strong>和Set的区别：</strong></p>
<p>1、<strong>WeakSet 对象中只能存放对象值</strong>, 不能存放原始值, 而 Set 对象都可以.</p>
<p>2、WeakSet 对象中存储的对象值都是被弱引用的, 如果没有其他的变量或属性引用这个对象值, 则这个对象值会被当成垃圾回收掉. 正因为这样, <strong>WeakSet 对象是无法被枚举的</strong>, 没有办法拿到它包含的所有元素.</p>
<p><strong>使用：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> set = <span class="keyword">new</span> <span class="built_in">WeakSet</span>();</div><div class="line"><span class="keyword">const</span> class_1 = &#123;&#125;, class_2 = &#123;&#125;;</div><div class="line">set.add(class_1);</div><div class="line">set.add(class_2);</div><div class="line"><span class="built_in">console</span>.log(set) <span class="comment">// WeakSet &#123;Object &#123;&#125;, Object &#123;&#125;&#125;</span></div><div class="line"><span class="built_in">console</span>.log(set.has(class_1)) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(set.has(class_2)) <span class="comment">// true</span></div></pre></td></tr></table></figure>
<h3 id="Map"><a href="#Map" class="headerlink" title="Map"></a>Map</h3><h4 id="Map是存储许多键值对的有序列表，key和value支持所有数据类型。"><a href="#Map是存储许多键值对的有序列表，key和value支持所有数据类型。" class="headerlink" title="Map是存储许多键值对的有序列表，key和value支持所有数据类型。"></a>Map是存储许多键值对的有序列表，key和value支持所有数据类型。</h4><h4 id="创建Map"><a href="#创建Map" class="headerlink" title="创建Map"></a>创建Map</h4><p>如果说Set像数组，那么Map更像对象。而对象中的key只支持字符串，Map更加强大，支持所有数据类型，不管是数字、字符串、Symbol等。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 一个空Map集合</span></div><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>()</div><div class="line"><span class="built_in">console</span>.log(map)</div></pre></td></tr></table></figure>
<p><img src="https://segmentfault.com/img/bVRqxA?w=548&amp;h=188" alt="clipboard.png"></p>
<p><strong>Map的所有原型方法：</strong><br><img src="https://segmentfault.com/img/bVRqxE?w=874&amp;h=654" alt="clipboard.png"></p>
<p>对比Set集合的原型，<strong>Map集合的原型多了set()和get()方法</strong>，注意set()和Set集合不是一个东西。Map没有add，使用set()添加key，value，在Set集合中，使用add()添加value，没有key。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line">map.set(<span class="string">'name'</span>, <span class="string">'haha'</span>);</div><div class="line">map.set(<span class="string">'id'</span>, <span class="number">10</span>);</div><div class="line"><span class="built_in">console</span>.log(map)</div><div class="line"><span class="comment">// 输出结果</span></div><div class="line"><span class="built_in">Map</span>(<span class="number">2</span>) &#123;<span class="string">"name"</span> =&gt; <span class="string">"haha"</span>, <span class="string">"id"</span> =&gt; <span class="number">10</span>&#125;</div><div class="line">    size:(...)</div><div class="line">    __proto__:<span class="built_in">Map</span></div><div class="line">    [[Entries]]:<span class="built_in">Array</span>(<span class="number">2</span>)</div><div class="line">        <span class="number">0</span>:&#123;<span class="string">"name"</span> =&gt; <span class="string">"haha"</span>&#125;</div><div class="line">        <span class="number">1</span>:&#123;<span class="string">"id"</span> =&gt; <span class="number">10</span>&#125;</div><div class="line">    length:<span class="number">2</span></div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(map.get(<span class="string">'id'</span>)) <span class="comment">// 10</span></div><div class="line"><span class="built_in">console</span>.log(map.get(<span class="string">'name'</span>)) <span class="comment">// "haha"</span></div></pre></td></tr></table></figure>
<p><strong>使用对象做key</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">const</span> key = &#123;&#125;;</div><div class="line">map.set(key, <span class="string">'谁知道这是个什么玩意'</span>);</div><div class="line"><span class="built_in">console</span>.log(map.get(key)) <span class="comment">// 谁知道这是个什么玩意</span></div></pre></td></tr></table></figure>
<p><strong>Map同样可以使用forEach遍历key、value</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">Map</span>();</div><div class="line"><span class="keyword">const</span> key = &#123;&#125;;</div><div class="line">map.set(key, <span class="string">'这是个什么玩意'</span>);</div><div class="line">map.set(<span class="string">'name'</span>, <span class="string">'haha'</span>);</div><div class="line">map.set(<span class="string">'id'</span>, <span class="number">1</span>);</div><div class="line">map.forEach(<span class="function">(<span class="params">value, key</span>) =&gt;</span> &#123;</div><div class="line">  <span class="built_in">console</span>.log(key, value)</div><div class="line">&#125;)</div><div class="line"></div><div class="line"><span class="comment">//Object &#123;&#125; "这是个什么玩意"</span></div><div class="line"><span class="comment">//"name" "haha"</span></div><div class="line"><span class="comment">//"id" 1</span></div></pre></td></tr></table></figure>
<p>其他Map的使用方法可以前往 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Map" target="_blank" rel="external">Map之家</a> 学习。</p>
<h3 id="Weak-Map"><a href="#Weak-Map" class="headerlink" title="Weak Map"></a>Weak Map</h3><p>有强Map，就有弱鸡Map。</p>
<p>和Set要解决的问题一样，希望不再引用Map的时候自动触发垃圾回收机制。那么，你就需要Weak Map。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> map = <span class="keyword">new</span> <span class="built_in">WeakMap</span>();</div><div class="line"><span class="keyword">const</span> key = <span class="built_in">document</span>.querySelector(<span class="string">'.header'</span>);</div><div class="line">map.set(key, <span class="string">'这是个什么玩意'</span>);</div><div class="line"></div><div class="line">map.get(key) <span class="comment">// "这是个什么玩意"</span></div><div class="line"></div><div class="line"><span class="comment">//移除该元素</span></div><div class="line">key.parentNode.removeChild(key);</div><div class="line">key = <span class="literal">null</span>;</div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Set集合可以用来过滤数组中重复的元素，只能通过has方法检测指定的值是否存在，或者是通过forEach处理每个值。</p>
<p>Weak Set集合存放对象的弱引用，当该对象的其他强引用被清除时，集合中的弱引用也会自动被垃圾回收机制回收，追踪成组的对象是该集合最好的使用方式。</p>
<p>Map集合通过set()添加键值对，通过get()获取键值，各种方法的使用查看文章教程，你可以把它看成是比Object更加强大的对象。</p>
<p>Weak Map集合只支持对象类型的key，所有key都是弱引用，当该对象的其他强引用被清除时，集合中的弱引用也会自动被垃圾回收机制回收，为那些实际使用与生命周期管理分离的对象添加额外信息是非常适合的使用方式。</p>
<p>记得刚开始学习JavaScript的时候，不知道各种数据类型有什么用，如果你现在刚学习Map和Set也是这种不知道能用来干什么的想法，那么，恭喜，他们已经开始走入你的编程生涯，慢慢的你就会熟悉他们。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Map和Set都叫做集合，但是他们也有所不同。Set常被用来检查对象中是否存在某个键名，Map集合常被用来获取已存的信息。&lt;/p&gt;
&lt;h3 id=&quot;Set&quot;&gt;&lt;a href=&quot;#Set&quot; class=&quot;headerlink&quot; title=&quot;Set&quot;&gt;&lt;/a&gt;Set&lt;/h3&gt;&lt;h4 id=&quot;Set是有序列表，含有相互独立的非重复值。&quot;&gt;&lt;a href=&quot;#Set是有序列表，含有相互独立的非重复值。&quot; class=&quot;headerlink&quot; title=&quot;Set是有序列表，含有相互独立的非重复值。&quot;&gt;&lt;/a&gt;Set是有序列表，含有相互独立的非重复值。&lt;/h4&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第六章-Symbol和Symbol属性</title>
    <link href="https://wiestlee.github.io/2017/06/25/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E5%85%AD%E7%AB%A0%E3%80%8B%E2%80%94Symbol%E5%92%8CSymbol%E5%B1%9E%E6%80%A7/"/>
    <id>https://wiestlee.github.io/2017/06/25/《深入理解ES6第六章》—Symbol和Symbol属性/</id>
    <published>2017-06-24T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:59.530Z</updated>
    
    <content type="html"><![CDATA[<p>还记得对象Object吗？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>对象的格式：</p>
<a id="more"></a>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span> &#123;</div><div class="line">    <span class="attr">key</span>: value</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在ES5的时代，对象的key只能是字符串String类型。有人就想搞事，把key改成其他数据类型，这不是瞎折腾吗？ES组织的大神们为了对付这类搞事的人，就指定了一个新的数据类型：Symbol。</p>
<h3 id="原始数据类型"><a href="#原始数据类型" class="headerlink" title="原始数据类型"></a>原始数据类型</h3><p>学习Symbol之前，让我们回忆一下你曾经用过的原始数据类型，只有5个，别搞错了。</p>
<p><strong>null、undefined</strong></p>
<p>是不是面试的时候有人问过你这两者的区别？问这种问题的人很无聊，你要是和他当同事，真是受罪。</p>
<p><strong>Number 数字类型</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="number">10</span></div><div class="line"><span class="keyword">typeof</span> a <span class="comment">// number</span></div></pre></td></tr></table></figure></p>
<p><strong>String 字符串</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="string">'haha'</span></div><div class="line"><span class="keyword">typeof</span> a <span class="comment">// string</span></div></pre></td></tr></table></figure></p>
<p><strong>boolean 布尔型</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> a = <span class="literal">true</span>, b = <span class="literal">false</span></div></pre></td></tr></table></figure>
<h3 id="Symbol"><a href="#Symbol" class="headerlink" title="Symbol"></a>Symbol</h3><p>Symbol到底长啥样？又该怎么用呢？我们一起来探索一下。</p>
<p><strong>在MDN文档中，关于Symbol的说明是这样的：</strong></p>
<p>Symbol 是一种特殊的、不可变的数据类型，可以作为对象属性的标识符使用。Symbol 对象是一个 symbol primitive data type 的隐式对象包装器。</p>
<p>symbol 数据类型是一个原始数据类型。</p>
<p><strong>Symbol的语法格式：</strong></p>
<p>Symbol([description])  //description是可选的</p>
<p><strong>创建一个Symbol：</strong></p>
<p>看了Symbol的描述，不知道是什么鬼？长得像个函数。</p>
<p>我们开始按照语法创建一个Symbol来研究一下</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="built_in">Symbol</span>();</div><div class="line"><span class="keyword">const</span> name1 = <span class="built_in">Symbol</span>(<span class="string">'sym1'</span>);</div><div class="line"><span class="built_in">console</span>.log(name, name1) <span class="comment">// Symbol() Symbol(sym1)</span></div></pre></td></tr></table></figure>
<p>Symbol不能使用new</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="keyword">new</span> <span class="built_in">Symbol</span>(); <span class="comment">//不可以这样做。</span></div><div class="line"><span class="comment">//Symbol is not a constructor</span></div></pre></td></tr></table></figure>
<p><strong>使用Symbol：</strong></p>
<p>使用Number的时候，我们可以这样写：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> b = <span class="built_in">Number</span>(<span class="number">10</span>) <span class="comment">// 10</span></div><div class="line"><span class="comment">//简写</span></div><div class="line"><span class="keyword">const</span> b = <span class="number">10</span></div></pre></td></tr></table></figure>
<p>同理，使用Symbol，我们可以这样：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name1 = <span class="built_in">Symbol</span>(<span class="string">'sym1'</span>); <span class="comment">// Symbol(sym1)</span></div></pre></td></tr></table></figure>
<p>在所有使用可计算属性名的地方，都能使用Symbol类型。比如在对象中的key。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> name = <span class="built_in">Symbol</span>(<span class="string">'name'</span>);</div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  [name]: <span class="string">"haha"</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj[name]) <span class="comment">// haha</span></div></pre></td></tr></table></figure>
<p>你还可以使用Object.defineProperty()和Object.defineProperties()方法。这2个方法是对象的方法，但是作为Symbol类型key，也不影响使用。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// 设置对象属性只读。</span></div><div class="line"><span class="built_in">Object</span>.defineProperty(obj, name, &#123;<span class="attr">writable</span>: <span class="literal">false</span>&#125;)</div></pre></td></tr></table></figure>
<p>这2个方法非常有用，在react源码中，使用了大量的只读属性的对象。以下是从react源码截取的一段代码，设置了props对象只读。但是react仍旧使用字符串作为key，并不用Symbol。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Object</span>.defineProperty(props, <span class="string">'key'</span>, &#123;</div><div class="line">    <span class="attr">get</span>: warnAboutAccessingKey,</div><div class="line">    <span class="attr">configurable</span>: <span class="literal">true</span></div><div class="line">  &#125;);</div></pre></td></tr></table></figure>
<h4 id="Symbol全局共享"><a href="#Symbol全局共享" class="headerlink" title="Symbol全局共享"></a>Symbol全局共享</h4><p>Symbol有点特殊，在js文件中定义的Symbol，并不能在其他文件直接共享。</p>
<p>ES6提供了一个注册机制，当你注册Symbol之后，就能在全局共享注册表里面的Symbol。Symbol的注册表和对象表很像，都是key、value结构，只不过这个value是Symbol值。<br>（key, Symbol）<br>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>.for() <span class="comment">//只有一个参数</span></div></pre></td></tr></table></figure>
<p>还有一个方法是获取注册表的Symbol。</p>
<p>语法：</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">Symbol</span>.keyFor() <span class="comment">//只有一个参数，返回的是key</span></div></pre></td></tr></table></figure>
<p>从注册表获取全局共享的Symbol<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> name = <span class="built_in">Symbol</span>.for(<span class="string">'name'</span>);</div><div class="line"><span class="keyword">let</span> name1 = <span class="built_in">Symbol</span>.for(<span class="string">'name1'</span>);</div><div class="line"><span class="keyword">let</span> name2 = <span class="built_in">Symbol</span>.for(<span class="string">'name2'</span>);</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(name)) <span class="comment">// name</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(name1)) <span class="comment">// name1</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Symbol</span>.keyFor(name2)) <span class="comment">// name2</span></div></pre></td></tr></table></figure></p>
<p>注意：如果要防止Symbol命名重复问题，可以加上前缀。如：hyy.name</p>
<h4 id="Symbol与类型强制转换"><a href="#Symbol与类型强制转换" class="headerlink" title="Symbol与类型强制转换"></a>Symbol与类型强制转换</h4><p>JavaScript中的类型可以自动转换。比如Number转换成字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>;</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a); <span class="comment">// number</span></div><div class="line"><span class="built_in">console</span>.log(a + <span class="string">' haha'</span>) <span class="comment">// '1haha'</span></div></pre></td></tr></table></figure>
<p>但是注意了，Symbol不支持这种转换。Symbol就是这么拽啊！</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</div><div class="line"><span class="built_in">console</span>.log(<span class="keyword">typeof</span> a);</div><div class="line"><span class="built_in">console</span>.log(a + <span class="string">' haha'</span>) <span class="comment">// Cannot convert a Symbol value to a string</span></div></pre></td></tr></table></figure>
<h4 id="Symbol检索"><a href="#Symbol检索" class="headerlink" title="Symbol检索"></a>Symbol检索</h4><p>在对象中获取字符串的key时，可以使用Object.keys()或Object.getOwnPropertyNames()方法获取key，但是使用Symbol做key是，你就只能使用ES6新增的方法来获取了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="built_in">Symbol</span>(<span class="string">'a'</span>);</div><div class="line"><span class="keyword">let</span> b = <span class="built_in">Symbol</span>(<span class="string">'b'</span>);</div><div class="line"></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  [a]: <span class="string">"123"</span>,</div><div class="line">  [b]: <span class="number">45</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> symbolsKey = <span class="built_in">Object</span>.getOwnPropertySymbols(obj);</div><div class="line"></div><div class="line"><span class="keyword">for</span>(<span class="keyword">let</span> value <span class="keyword">of</span> symbolsKey) &#123;</div><div class="line">  <span class="built_in">console</span>.log(obj[value]) </div><div class="line">&#125;</div><div class="line"><span class="comment">//"123"</span></div><div class="line"><span class="comment">//45</span></div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>Symbol还提供了多个方法给开发者使用，我们不再一一研究每个方法的用途，你想要了解全面可以查看 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Symbol" target="_blank" rel="external">Symbol MDN文档</a></p>
<p>我们只需要知道Symbol如何定义，如何在全局共享，如果在对象中替代key即可应付基本的开发需求了。</p>
<p>最后再回顾一下Symbol是什么：Symbol是JavaScript的原始数据类型，一个全新的数据类型，和对象、数字、字符串等完全不一样，它必须通过Symbol()创建。它的使用看上面的详细介绍。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;还记得对象Object吗？&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;a&lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对象的格式：&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>了解Node.js</title>
    <link href="https://wiestlee.github.io/2017/06/25/%E4%BA%86%E8%A7%A3nodejs/"/>
    <id>https://wiestlee.github.io/2017/06/25/了解nodejs/</id>
    <published>2017-06-24T16:00:00.000Z</published>
    <updated>2017-12-03T04:57:07.357Z</updated>
    
    <content type="html"><![CDATA[<h2 id="什么是node-js"><a href="#什么是node-js" class="headerlink" title="什么是node.js"></a>什么是node.js</h2><p>node.js是一个用C++语言编写而成，是一个Javascript的运行环境。它支持的系统包括（linux，Windows），这意味着你可以编写系统级或者服务器端的Javascript代码，交给Node.js来解释执行。<br>官网的描述：Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。<br><a id="more"></a></p>
<h2 id="node-js与javascript的区别"><a href="#node-js与javascript的区别" class="headerlink" title="node.js与javascript的区别"></a>node.js与javascript的区别</h2><blockquote>
<p>一个是基于浏览器端的javascript（前端js）<br>一个是基于服务器端的javascript（后端Node.js）<br>相同点：语法一样<br>不同点：组成不一样</p>
</blockquote>
<p><strong>Javascript：</strong></p>
<blockquote>
<p>ECMAScript(语言基础，如：语法、数据类型结构以及一些内置对象)<br>DOM(一些操作页面元素的方法)<br>BOM(一些操作浏览器的方法)</p>
</blockquote>
<p><strong>Node.js</strong></p>
<blockquote>
<p>ECMAScript(语言基础，如:语法、数据类型结构以及一些内置对象)<br>OS(操作系统)<br>file(文件系统)<br>net(网络系统)<br>database(数据库)</p>
</blockquote>
<h2 id="node-js的优缺点"><a href="#node-js的优缺点" class="headerlink" title="node.js的优缺点"></a>node.js的优缺点</h2><p> <strong>优点：</strong></p>
<blockquote>
<p> 1、采用事件驱动、异步编程、为网络服务而设计<br>   node.js有非阻塞，事件驱动I/O等特性，从而让高并发（high concurrency）在的轮询（Polling）和comet构建的应用中成为可能。</p>
<p>2、node.js非阻塞模式的IO处理给node.js而带来的相对较低的资源耗用下的高性能与出众的负载能力</p>
<p>3、node.js轻量高效、可以认为是数据密集型的实时应用系统的完美解决方案。</p>
<p>4、js语言适合前端工程师上手。</p>
<p>5、社区活跃发展速度快</p>
</blockquote>
<p> <strong> 缺点：</strong></p>
<blockquote>
<p>1、单线程、单进程、只支持单核的cpu、不能充分的利用多核CPU服务器</p>
<p>2、对程序要求高一些一旦进程崩溃、那么整个的web服务器就崩溃了</p>
<p>3、不适合做复杂性很高的计算</p>
</blockquote>
<h2 id="解释非阻塞和事件驱动"><a href="#解释非阻塞和事件驱动" class="headerlink" title="解释非阻塞和事件驱动"></a>解释非阻塞和事件驱动</h2><ul>
<li>浏览器给网站发请求的过程一直没怎么变过。当浏览器给网站发了请求。服务器收到了请求，然后开始搜寻被请求的资源。如果有需要，服务器还会查询一下数据库，最后把响应结果传回浏览器。不过，在传统的web服务器中（比如Apache），每一个请求都会让服务器创建一个新的进程来处理这个请求。</li>
<li>后来有了Ajax。有了Ajax，我们就不用每次都请求一个完整的新页面了，取而代之的是，每次只请求需要的部分页面信息就可以了。这显然是一个进步。但是比如你要建一个FriendFeed这样的社交网站（类似人人网那样的刷朋友新鲜事的网站），你的好友会随时的推送新的状态，然后你的新鲜事会实时自动刷新。要达成这个需求，我们需要让用户一直与服务器保持一个有效连接。目前最简单的实现方法，就是让用户和服务器之间保持长轮询（long polling）。</li>
<li>HTTP请求不是持续的连接，你请求一次，服务器响应一次，然后就完了。长轮训是一种利用HTTP模拟持续连接的技巧。具体来说，只要页面载入了，不管你需不需要服务器给你响应信息，你都会给服务器发一个Ajax请求。这个请求不同于一般的Ajax请求，服务器不会直接给你返回信息，而是它要等着，直到服务器觉得该给你发信息了，它才会响应。比如，你的好友发了一条新鲜事，服务器就会把这个新鲜事当做响应发给你的浏览器，然后你的浏览器就刷新页面了。浏览器收到响应刷新完之后，再发送一条新的请求给服务器，这个请求依然不会立即被响应。于是就开始重复以上步骤。利用这个方法，可以让浏览器始终保持等待响应的状态。虽然以上过程依然只有非持续的Http参与，但是我们模拟出了一个看似持续的连接状态。</li>
<li>我们再看传统的服务器（比如Apache）。每次一个新用户连到你的网站上，你的服务器就得开一个连接。每个连接都需要占一个进程，这些进程大部分时间都是闲着的（比如等着你好友发新鲜事，等好友发完才给用户响应信息。或者等着数据库返回查询结果什么的）。虽然这些进程闲着，但是照样占用内存。这意味着，如果用户连接数的增长到一定规模，你服务器没准就要耗光内存直接瘫了。<br>这种情况怎么解决？解决方法就是刚才上边说的：非阻塞和事件驱动。这些概念在我们谈的这个情景里面其实没那么难理解。你把非阻塞的服务器想象成一个loop循环，这个loop会一直跑下去。一个新请求来了，这个loop就接了这个请求，把这个请求传给其他的进程（比如传给一个搞数据库查询的进程），然后响应一个回调（callback）。完事了这loop就接着跑，接其他的请求。这样下来。服务器就不会像之前那样傻等着数据库返回结果了。</li>
<li>如果数据库把结果返回来了，loop就把结果传回用户的浏览器，接着继续跑。在这种方式下，你的服务器的进程就不会闲着等着。从而在理论上说，同一时刻的数据库查询数量，以及用户的请求数量就没有限制了。服务器只在用户那边有事件发生的时候才响应，这就是事件驱动。</li>
<li>FriendFeed是用基于Python的非阻塞框架Tornado (知乎也用了这个框架) 来实现上面说的新鲜事功能的。不过，Node.js就比前者更妙了。Node.js的应用是通过javascript开发的，然后直接在Google的变态V8引擎上跑。用了Node.js，你就不用担心用户端的请求会在服务器里跑了一段能够造成阻塞的代码了。因为javascript本身就是事件驱动的脚本语言。你回想一下，在给前端写javascript的时候，更多时候你都是在搞事件处理和回调函数。javascript本身就是给事件处理量身定制的语言。<br>Node.js还是处于初期阶段。如果你想开发一个基于Node.js的应用，你应该会需要写一些很底层代码。但是下一代浏览器很快就要采用WebSocket技术了，从而长轮询也会消失。在Web开发里，Node.js这种类型的技术只会变得越来越重要。</li>
</ul>
<p><strong><a href="http://www.ruanyifeng.com/blog/2013/04/processes_and_threads.html" target="_blank" rel="external">解释：线程与进程</a></strong>（来源：阮一峰）</p>
<h2 id="node-js-的十五个应用场景-文章来源-DevStore"><a href="#node-js-的十五个应用场景-文章来源-DevStore" class="headerlink" title="node.js 的十五个应用场景(文章来源:DevStore)"></a>node.js 的十五个应用场景(文章来源:<a href="http://www.devstore.cn/essay/essayInfo/2199.html" target="_blank" rel="external">DevStore</a>)</h2><h3 id="1、Web开发：Express-EJS-Mongoose-MySQL"><a href="#1、Web开发：Express-EJS-Mongoose-MySQL" class="headerlink" title="1、Web开发：Express + EJS + Mongoose/MySQL"></a>1、Web开发：Express + EJS + Mongoose/MySQL</h3><p>express 是轻量灵活的Nodejs Web应用框架，它可以快速地搭建网站。Express框架建立在Nodejs内置的Http模块上，并对Http模块再包装，从而实际Web请求处理的功能。</p>
<p>ejs是一个嵌入的Javascript模板引擎，通过编译生成HTML的代码。</p>
<p>mongoose 是MongoDB的对象模型工具，通过Mongoose框架，可以进行访问MongoDB的操作。</p>
<p>mysql 是连接MySQL数据库的通信API，可以进行访问MySQL的操作。</p>
<p>通常用Nodejs做Web开发，需要3个框架配合使用，就像Java中的SSH。</p>
<h3 id="2、REST开发：Restify"><a href="#2、REST开发：Restify" class="headerlink" title="2、REST开发：Restify"></a>2、REST开发：Restify</h3><p>restify 是一个基于Nodejs的REST应用框架，支持服务器端和客户端。restify比起express更专注于REST服务，去掉了express中的template, render等功能，同时强化了REST协议使用，版本化支持，HTTP的异常处理。</p>
<h3 id="3、Web聊天室-IM-：Express-Socket-io"><a href="#3、Web聊天室-IM-：Express-Socket-io" class="headerlink" title="3、Web聊天室(IM)：Express + Socket.io"></a>3、Web聊天室(IM)：Express + Socket.io</h3><p>socket.io一个是基于Nodejs架构体系的，支持websocket的协议用于时时通信的一个软件包。socket.io 给跨浏览器构建实时应用提供了完整的封装，socket.io完全由javascript实现。</p>
<h3 id="4、Web爬虫：Cheerio-Request"><a href="#4、Web爬虫：Cheerio-Request" class="headerlink" title="4、Web爬虫：Cheerio/Request"></a>4、Web爬虫：Cheerio/Request</h3><p>cheerio 是一个为服务器特别定制的，快速、灵活、封装jQuery核心功能工具包。Cheerio包括了 jQuery核心的子集，从jQuery库中去除了所有DOM不一致性和浏览器不兼容的部分，揭示了它真正优雅的API。Cheerio工作在一个非常简 单，一致的DOM模型之上，解析、操作、渲染都变得难以置信的高效。基础的端到端的基准测试显示Cheerio大约比JSDOM快八倍(8x)。 Cheerio封装了@FB55兼容的htmlparser，几乎能够解析任何的 HTML 和 XML document。</p>
<h3 id="5、-Web博客：Hexo"><a href="#5、-Web博客：Hexo" class="headerlink" title="5、 Web博客：Hexo"></a>5、 Web博客：Hexo</h3><p>Hexo 是一个简单地、轻量地、基于Node的一个静态博客框架。通过Hexo我们可以快速创建自己的博客，仅需要几条命令就可以完成。</p>
<p>发布时，Hexo可以部署在自己的Node服务器上面，也可以部署github上面。对于个人用户来说，部署在github上好处颇多，不仅可以省 去服务器的成本，还可以减少各种系统运维的麻烦事(系统管理、备份、网络)。所以，基于github的个人站点，正在开始流行起来….</p>
<h3 id="6、Web论坛-nodeclub"><a href="#6、Web论坛-nodeclub" class="headerlink" title="6、Web论坛: nodeclub"></a>6、Web论坛: nodeclub</h3><p>Node Club 是用 Node.js 和 MongoDB 开发的新型社区软件，界面优雅，功能丰富，小巧迅速， 已在Node.js 中文技术社区 CNode 得到应用，但你完全可以用它搭建自己的社区。</p>
<h3 id="7、-Web幻灯片：Cleaver"><a href="#7、-Web幻灯片：Cleaver" class="headerlink" title="7、 Web幻灯片：Cleaver"></a>7、 Web幻灯片：Cleaver</h3><p>Cleaver 可以生成基于Markdown的演示文稿。如果你已经有了一个Markdown的文档，30秒就可以制作成幻灯片。Cleaver是为Hacker准备的工具。</p>
<h3 id="8、前端包管理平台-bower-js"><a href="#8、前端包管理平台-bower-js" class="headerlink" title="8、前端包管理平台: bower.js"></a>8、前端包管理平台: bower.js</h3><p>Bower 是 twitter 推出的一款包管理工具，基于nodejs的模块化思想，把功能分散到各个模块中，让模块和模块之间存在联系，通过 Bower 来管理模块间的这种联系。</p>
<h3 id="9、-OAuth认证：Passport"><a href="#9、-OAuth认证：Passport" class="headerlink" title="9、 OAuth认证：Passport"></a>9、 OAuth认证：Passport</h3><p>Passport项 目是一个基于Nodejs的认证中间件。Passport目的只是为了“登陆认证”，因此，代码干净，易维护，可以方便地集成到其他的应用中。Web应用 一般有2种登陆认证的形式：用户名和密码认证登陆,OAuth认证登陆。Passport可以根据应用程序的特点，配置不同的认证机制。本文将介绍，用户 名和密码的认证登陆。</p>
<h3 id="10、-定时任务工具-later"><a href="#10、-定时任务工具-later" class="headerlink" title="10、 定时任务工具: later"></a>10、 定时任务工具: later</h3><p>Later 是一个基于Nodejs的工具库，用最简单的方式执行定时任务。Later可以运行在Node和浏览器中。</p>
<h3 id="11、-浏览器环境工具-browserify"><a href="#11、-浏览器环境工具-browserify" class="headerlink" title="11、 浏览器环境工具: browserify"></a>11、 浏览器环境工具: browserify</h3><p>Browserify 的出现可以让Nodejs模块跑在浏览器中，用require()的语法格式来组织前端的代码，加载npm的模块。在浏览器中，调用browserify编译后的代码，同样写在script标签中。</p>
<p>用 Browserify 的操作，分为3个步骤。1. 写node程序或者模块, 2. 用Browserify 预编译成 bundle.js, 3. 在HTML页面中加载bundle.js。</p>
<h3 id="12、-命令行编程工具：Commander"><a href="#12、-命令行编程工具：Commander" class="headerlink" title="12、 命令行编程工具：Commander"></a>12、 命令行编程工具：Commander</h3><p>commander 是一个轻巧的nodejs模块，提供了用户命令行输入和参数解析强大功能。commander源自一个同名的Ruby项目。commander的特性：自 记录代码,自动生成帮助,合并短参数（“ABC”==“-A-B-C”）,默认选项,强制选项,命令解析,提示符。</p>
<h3 id="13、-Web控制台工具-tty-js"><a href="#13、-Web控制台工具-tty-js" class="headerlink" title="13、 Web控制台工具: tty.js"></a>13、 Web控制台工具: tty.js</h3><p>tty.js 是一个支持在浏览器中运行的命令行窗口，基于node.js平台，依赖socket.io库，通过websocket与Linux系统通信。特性：支持多 tab窗口模型; 支持vim,mc,irssi,vifm语法; 支持xterm鼠标事件; 支持265色显示; 支持session。</p>
<h3 id="14、-客户端应用工具-node-webwit"><a href="#14、-客户端应用工具-node-webwit" class="headerlink" title="14、 客户端应用工具: node-webwit"></a>14、 客户端应用工具: node-webwit</h3><p>Node-Webkit 是NodeJS与WebKit技术的融合，提供一个跨Windows、Linux平台的客户端应用开发的底层框架，利用流行的Web技术 （Node.JS，JavaScript，HTML5）来编写应用程序的平台。应用程序开发人员可以轻松的利用Web技术来实现各种应用程序。Node- Webkit性能和特色已经让它成为当今世界领先的Web技术应用程序平台。</p>
<h3 id="15、-操作系统-node-os"><a href="#15、-操作系统-node-os" class="headerlink" title="15、 操作系统: node-os"></a>15、 操作系统: node-os</h3><p>NodeOS 是采用NodeJS开发的一款友好的操作系统，该操作系统是完全建立在Linux内核之上的，并且采用shell和NPM进行包管理，采用NodeJS不 仅可以很好地进行包管理，还可以很好的管理脚本、接口等。目前，Docker和Vagrant都是采用NodeOS的首个版本进行构建的.</p>
]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;什么是node-js&quot;&gt;&lt;a href=&quot;#什么是node-js&quot; class=&quot;headerlink&quot; title=&quot;什么是node.js&quot;&gt;&lt;/a&gt;什么是node.js&lt;/h2&gt;&lt;p&gt;node.js是一个用C++语言编写而成，是一个Javascript的运行环境。它支持的系统包括（linux，Windows），这意味着你可以编写系统级或者服务器端的Javascript代码，交给Node.js来解释执行。&lt;br&gt;官网的描述：Node.js 是一个基于 Chrome V8 引擎的 JavaScript 运行环境。Node.js 使用了一个事件驱动、非阻塞式 I/O 的模型，使其轻量又高效。&lt;br&gt;
    
    </summary>
    
    
      <category term="Node.js" scheme="https://wiestlee.github.io/tags/Node-js/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第五章-解构</title>
    <link href="https://wiestlee.github.io/2017/06/24/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E4%BA%94%E7%AB%A0%E3%80%8B%E2%80%94%E8%A7%A3%E6%9E%84%EF%BC%9A%E4%BD%BF%E6%95%B0%E6%8D%AE%E8%AE%BF%E9%97%AE%E6%9B%B4%E4%BE%BF%E6%8D%B7/"/>
    <id>https://wiestlee.github.io/2017/06/24/《深入理解ES6第五章》—解构：使数据访问更便捷/</id>
    <published>2017-06-23T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:39.752Z</updated>
    
    <content type="html"><![CDATA[<p>解构，一种黑魔法</p>
<p><strong>解构是从对象中提取出更小元素的过程。赋值是对解构出来的元素进行重新赋值。</strong></p>
<p><strong>下面的代码你可能无法在浏览器上实时测试，推荐在babel官网在线测试代码：<a href="https://babeljs.io/repl/#?babili=false&amp;evaluate=true&amp;lineWrap=true&amp;presets=env,es2015,es2015-loose,es2016,es2017,stage-0,stage-1,stage-2,stage-3&amp;targets=&amp;browsers=%3E%202%25,%20ie%209,&amp;builtIns=false&amp;debug=false&amp;code_lz=DYUwLgBADgTg9lAzhAvBA3gKAhAhgLggEYAabCAI0ICZMBfM3VCAZjIuZYG5MAKdPCUoQ6zWAkQBKTAGM4AO0RxQAOmBwA5r1xCKkoA" target="_blank" rel="external">在线测试ES6代码网址</a></strong></p>
<a id="more"></a>
<h3 id="解构的分类"><a href="#解构的分类" class="headerlink" title="解构的分类"></a>解构的分类</h3><p>1、对象解构</p>
<p>2、数组解构</p>
<p>3、混合解构</p>
<p>4、解构参数</p>
<h3 id="对象解构"><a href="#对象解构" class="headerlink" title="对象解构"></a>对象解构</h3><p><strong>对象解构简单的例子</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">b</span>: [<span class="number">1</span>, <span class="number">2</span>]</div><div class="line">&#125;</div><div class="line"><span class="comment">// 对象解构</span></div><div class="line"><span class="keyword">const</span> &#123; a, b &#125; = obj</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">//1  [1, 2]</span></div></pre></td></tr></table></figure></p>
<p><strong>在函数中使用解构赋值</strong></p>
<p>解构是将对象或者数组的元素一个个提取出来，而赋值是给元素赋值，解构赋值的作用就是给对象或者数组的元素赋值。</p>
<p>在调用test()函数的时候，我们给参数设置了默认值3，如果不重新赋值，则打印出3,3，但是进行解构赋值后，将props对象的参数解构赋值给a和b，所以打印结果是{a: 1, b: 2}<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> props = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">b</span>: <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params">value</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(value)</div><div class="line">&#125;</div><div class="line">test(&#123;a=<span class="number">3</span>, b=<span class="number">3</span>&#125; = props) <span class="comment">// &#123;a: 1, b: 2&#125;</span></div></pre></td></tr></table></figure></p>
<p>下面这个例子定义了a = 3,b = 3两个变量，现在我们想修改这2个变量的值，采用解构赋值的方式可以这样做：定义一个props对象，该对象包含2个属性a和b，然后进行解构赋值，这时就能更新变量a和b的value。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> props = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">b</span>: <span class="number">2</span></div><div class="line">&#125;,</div><div class="line">a = <span class="number">3</span>,</div><div class="line">b = <span class="number">3</span>;</div><div class="line"><span class="comment">//解构赋值</span></div><div class="line">(&#123; a, b &#125; = props)</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 1, 2</span></div></pre></td></tr></table></figure></p>
<p><strong>在react的父子组件传递参数过程中，也使用到了解构赋值。</strong><a href="https://codepen.io/gaearon/pen/ZpvBNJ?editors=0010" target="_blank" rel="external">react demo在线测试</a></p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Parent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">const</span> &#123;a = <span class="number">3</span>, b = <span class="number">3</span>&#125; = <span class="keyword">this</span>.props</div><div class="line">    <span class="keyword">return</span> &lt;h1&gt;&#123;a&#125;-&#123;b&#125;&lt;/h1&gt;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line">ReactDOM.render(</div><div class="line">  &lt;Parent a="1" b="2" /&gt;,</div><div class="line">  document.getElementById('root')</div><div class="line">);</div><div class="line">//在浏览器渲染 1-2，默认值是 3-3，但是因为传递了新的props进来，执行了解构赋值之后a和b更新了。</div></pre></td></tr></table></figure>
<p><strong>嵌套对象解构</strong></p>
<p>当对象层次较深时，你也可以解构出来。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: &#123;</div><div class="line">    <span class="attr">b</span>: &#123;</div><div class="line">      <span class="attr">c</span>: <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">const</span> &#123;<span class="attr">a</span>: &#123;b&#125;&#125; = obj</div><div class="line"><span class="built_in">console</span>.log(b.c) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<h3 id="数组解构"><a href="#数组解构" class="headerlink" title="数组解构"></a>数组解构</h3><p>数组解构比对象解构简单，因为数组只有数组字面量，不需要像对象一个使用key属性。</p>
<p><strong>数组解构</strong><br>你可以选择性的解构元素，不需要解构的元素就使用逗号代替。</p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>]</div><div class="line"></div><div class="line"><span class="comment">//解构前2个元素</span></div><div class="line"><span class="keyword">const</span> [a, b] = arr</div><div class="line"><span class="built_in">console</span>.log(a,b) <span class="comment">//1 2</span></div><div class="line"></div><div class="line"><span class="comment">//解构中间的元素</span></div><div class="line"><span class="keyword">const</span> [, b,] = arr</div><div class="line"><span class="built_in">console</span>.log(b) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p><strong>解构赋值</strong><br>如果你没有看明白上面说到的对象解构赋值的含义，那么看完下面的数组解构赋值，或许你会有比较清晰的理解。</p>
<p>这个例子中，正常情况下打印a的值是haha，但是将数组arr的第一个元素解构赋值给a，a的值就变成了1。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//初始化一个变量a</span></div><div class="line"><span class="keyword">let</span> a = <span class="string">"haha"</span>;</div><div class="line"><span class="comment">//定义一个数组</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>];</div><div class="line"><span class="comment">//解构赋值a，将arr数组的第一个元素解构赋值给a，</span></div><div class="line">[a] = arr;</div><div class="line"><span class="built_in">console</span>.log(a); <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<p>使用解构赋值，还可以调换2个变量的值。</p>
<figure class="highlight jsx"><figcaption><span>harmony</span></figcaption><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>, b = <span class="number">2</span>;</div><div class="line">[a, b] = [b, a];</div><div class="line"><span class="built_in">console</span>.log(a, b); <span class="comment">// 2 1</span></div></pre></td></tr></table></figure>
<p><strong>嵌套数组解构</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, [<span class="number">2</span>, <span class="number">3</span>], <span class="number">4</span>];</div><div class="line"><span class="keyword">let</span> [a, [,b]] = arr;</div><div class="line"><span class="built_in">console</span>.log(a, b) <span class="comment">// 1 3</span></div><div class="line"></div><div class="line"><span class="comment">//实际解构过程，左边的变量和右边的数组元素一一对应下标。</span></div><div class="line"><span class="keyword">var</span> a = arr[<span class="number">0</span>],</div><div class="line">_arr$ = arr[<span class="number">1</span>],</div><div class="line">b = _arr$[<span class="number">1</span>];</div></pre></td></tr></table></figure>
<p><strong>不定元素解构</strong><br>三个点的解构赋值必须放在所有解构元素的最末尾，否则报错。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> arr = [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>];</div><div class="line"><span class="keyword">let</span> [...a] = arr;</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">//[1,2,3,4] 这种做法就是克隆arr数组。</span></div></pre></td></tr></table></figure>
<h3 id="混合解构"><a href="#混合解构" class="headerlink" title="混合解构"></a>混合解构</h3><p>混合解构指的是对象和数组混合起来，执行解构操作，没什么难度。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: &#123;</div><div class="line">    <span class="attr">id</span>: <span class="number">1</span></div><div class="line">  &#125;,</div><div class="line">  <span class="attr">b</span>: [<span class="number">2</span>, <span class="number">3</span>]</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">const</span> &#123;</div><div class="line">  <span class="attr">a</span>: &#123;id&#125;,</div><div class="line">  <span class="attr">b</span>:[...arr]</div><div class="line">&#125; = obj;</div><div class="line"><span class="built_in">console</span>.log(id, arr) <span class="comment">//id = 1, arr = [2, 3]</span></div></pre></td></tr></table></figure>
<h3 id="解构参数"><a href="#解构参数" class="headerlink" title="解构参数"></a>解构参数</h3><p>当给函数传递参数时，我们可以对每个参数进行解构，我给option的参数设置了默认值，这样可以防止没有给option传参导致的报错情况。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">Ajax</span>(<span class="params">url, options</span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> &#123;timeout = <span class="number">0</span>, jsonp = <span class="literal">true</span>&#125; = options</div><div class="line">  <span class="built_in">console</span>.log(url, timeout, jsonp)</div><div class="line">&#125;;</div><div class="line">Ajax(<span class="string">'baidu.com'</span>, &#123;</div><div class="line">  <span class="attr">timeout</span>: <span class="number">1000</span>,</div><div class="line">  <span class="attr">jsonp</span>: <span class="literal">false</span></div><div class="line">&#125;) <span class="comment">// "baidu.com" 1000 false</span></div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本章讲解了对象解构赋值和数组解构赋值，以及对象和数组混合情况下的解构赋值操作，最后一个知识点是解构函数的参数。每一个都是重点，特别是最后一个，解构参数恐怕你经常在用了，只是通常你没发现。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;解构，一种黑魔法&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;解构是从对象中提取出更小元素的过程。赋值是对解构出来的元素进行重新赋值。&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;下面的代码你可能无法在浏览器上实时测试，推荐在babel官网在线测试代码：&lt;a href=&quot;https://babeljs.io/repl/#?babili=false&amp;amp;evaluate=true&amp;amp;lineWrap=true&amp;amp;presets=env,es2015,es2015-loose,es2016,es2017,stage-0,stage-1,stage-2,stage-3&amp;amp;targets=&amp;amp;browsers=%3E%202%25,%20ie%209,&amp;amp;builtIns=false&amp;amp;debug=false&amp;amp;code_lz=DYUwLgBADgTg9lAzhAvBA3gKAhAhgLggEYAabCAI0ICZMBfM3VCAZjIuZYG5MAKdPCUoQ6zWAkQBKTAGM4AO0RxQAOmBwA5r1xCKkoA&quot;&gt;在线测试ES6代码网址&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第四章-拓展对象的功能性</title>
    <link href="https://wiestlee.github.io/2017/06/23/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E5%9B%9B%E7%AB%A0%E3%80%8B%E2%80%94%E6%89%A9%E5%B1%95%E5%AF%B9%E8%B1%A1%E7%9A%84%E5%8A%9F%E8%83%BD%E6%80%A7/"/>
    <id>https://wiestlee.github.io/2017/06/23/《深入理解ES6第四章》—扩展对象的功能性/</id>
    <published>2017-06-22T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:35.703Z</updated>
    
    <content type="html"><![CDATA[<p>变量功能被加强了、函数功能被加强了，那么作为JavaScript中最普遍的对象，不加强对得起观众吗？</p>
<h3 id="对象类别"><a href="#对象类别" class="headerlink" title="对象类别"></a>对象类别</h3><p>在ES6中，对象分为下面几种叫法。（不需要知道概念）</p>
<a id="more"></a>
<p>1、普通对象</p>
<p>2、特异对象</p>
<p>3、标准对象</p>
<p>4、内建对象</p>
<h3 id="对象字面量语法拓展"><a href="#对象字面量语法拓展" class="headerlink" title="对象字面量语法拓展"></a>对象字面量语法拓展</h3><p>随便打开一个js文件，对象都无处不在，看一个简单的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">2</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ES6针对对象的语法扩展了一下功能</strong></p>
<p>1、属性初始值简写<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">id</span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    <span class="attr">id</span>: id</div><div class="line">  &#125;;</div><div class="line">&#125;;</div><div class="line"></div><div class="line"><span class="comment">//ES6</span></div><div class="line"><span class="keyword">const</span> a = <span class="function">(<span class="params">id</span>) =&gt;</span> (&#123;</div><div class="line">  id</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>2、对象方法简写</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">// ES5</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">printId</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// ES6</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  printId() &#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.id)</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>3、属性名可计算</p>
<p>属性名可以传入变量或者常量，而不只是一个固定的字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> id = <span class="number">5</span></div><div class="line"><span class="keyword">const</span> obj = &#123;</div><div class="line">  [<span class="string">`my-<span class="subst">$&#123;id&#125;</span>`</span>]: id</div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(obj[<span class="string">'my-5'</span>]) <span class="comment">// 5</span></div></pre></td></tr></table></figure>
<h3 id="ES6对象新增方法"><a href="#ES6对象新增方法" class="headerlink" title="ES6对象新增方法"></a>ES6对象新增方法</h3><p>在Object原始对象上新增方法，原则上来说不可取，但是为了解决全世界各地提交的issue，在ES6中的全局Object对象上新增了一些方法。</p>
<p><strong>1、Object.is()</strong></p>
<p>用来解决JavaScript中特殊类型 == 或者 === 异常的情况。</p>
<p>下面是一些异常情况</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//实际出现了异常(错误输出)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>) <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">-0</span>) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">5</span> == <span class="string">"5"</span>) <span class="comment">//true</span></div><div class="line"></div><div class="line"><span class="comment">//我们期望的目标输出(正确输出)</span></div><div class="line"><span class="built_in">console</span>.log(<span class="literal">NaN</span> === <span class="literal">NaN</span>) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(+<span class="number">0</span> === <span class="number">-0</span>) <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="number">5</span> == <span class="string">"5"</span>) <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p>为了解决历遗留问题，<strong>新增了Object.is()来处理2个值的比较。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="literal">NaN</span>, <span class="literal">NaN</span>)) <span class="comment">// true</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(+<span class="number">0</span>, <span class="number">-0</span>)) <span class="comment">// false</span></div><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(<span class="number">5</span>, <span class="string">"5"</span>)) <span class="comment">//false</span></div></pre></td></tr></table></figure>
<p><strong>2、Object.assign()</strong></p>
<p>也许你已经见过或者使用过这个方法了，那这个新增的方法解决了什么问题呢？</p>
<p>答：混合（Mixin）。</p>
<p>mixin是一个方法，实现了拷贝一个对象给另外一个对象，返回一个新的对象。</p>
<p>下面是一个mixin方法的实现，这个方法实现的是浅拷贝。将b对象的属性拷贝到了a对象，合并成一个新的对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//mixin不只有这一种实现方法。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">mixin</span>(<span class="params">receiver, supplier</span>) </span>&#123;</div><div class="line">  <span class="built_in">Object</span>.keys(supplier).forEach(<span class="function">(<span class="params">key</span>) =&gt;</span> &#123;</div><div class="line">    receiver[key] = supplier[key]</div><div class="line">  &#125;)</div><div class="line">  <span class="keyword">return</span> receiver</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> a = &#123;<span class="attr">name</span>: <span class="string">'sb'</span>&#125;;</div><div class="line"><span class="keyword">let</span> b = &#123;</div><div class="line">  <span class="attr">c</span>: &#123;</div><div class="line">    <span class="attr">d</span>: <span class="number">5</span></div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line"><span class="built_in">console</span>.log(mixin(a, b)) <span class="comment">// &#123;"name":"sb","c":&#123;"d":5&#125;&#125;</span></div></pre></td></tr></table></figure>
<p>写这样一个mixin方法是不是很烦，而且每个项目都得引入这个方法，现在，ES6给我们提供了一个现成的方法Object.assign()来做mixin的事情。</p>
<p>假设要实现上面的mixin方法，你只需要给Object.assign()传入参数即可。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.assign(a, b))<span class="comment">// &#123;"name":"sb","c":&#123;"d":5&#125;&#125;</span></div></pre></td></tr></table></figure>
<p>使用Object.assign()，你就可以不是有继承就能获得另一个对象的所有属性，快捷好用。</p>
<p><strong>看一个实现Component的例子。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//声明一个构造函数Component</span></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Component</span> </span>&#123;&#125;</div><div class="line"><span class="comment">//给构造函数设置原型方法</span></div><div class="line">Component.prototype = &#123;</div><div class="line">  componentWillMount() &#123;&#125;,</div><div class="line">  componentDidMount() &#123;&#125;,</div><div class="line">  render() &#123;<span class="built_in">console</span>.log(<span class="string">'render'</span>)&#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//定义一个新的对象</span></div><div class="line"><span class="keyword">let</span> MyComponent = &#123;&#125;</div><div class="line"><span class="comment">//新对象继承了Component的所有方法和属性。</span></div><div class="line"><span class="built_in">Object</span>.assign(MyComponent, Component.prototype)</div><div class="line"></div><div class="line"><span class="built_in">console</span>.log(MyComponent.render()) <span class="comment">// render</span></div></pre></td></tr></table></figure>
<p><strong>在react的reducer中，每次传入新的参数返回新的state，你都可能用到Object.assign()方法。</strong></p>
<h3 id="重复的对象字面量属性"><a href="#重复的对象字面量属性" class="headerlink" title="重复的对象字面量属性"></a>重复的对象字面量属性</h3><p>ES5的严格模式下，如果你的对象中出现了key相同的情况，那么就会抛出错误。而在ES6的严格模式下，不会报错，后面的key会覆盖掉前面相同的key。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">id</span>: <span class="number">2</span></div><div class="line">&#125;</div><div class="line"><span class="built_in">console</span>.log(state.id) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<h3 id="自有属性枚举顺序"><a href="#自有属性枚举顺序" class="headerlink" title="自有属性枚举顺序"></a>自有属性枚举顺序</h3><p>这个概念看起来比较模糊，如果你看了下面的例子，你可能就会明白在说什么了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> state = &#123;</div><div class="line">  <span class="attr">id</span>: <span class="number">1</span>,</div><div class="line">  <span class="number">5</span>: <span class="number">5</span>,</div><div class="line">  <span class="attr">name</span>: <span class="string">"eryue"</span>,</div><div class="line">  <span class="number">3</span>: <span class="number">3</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">Object</span>.getOwnPropertyNames(state) </div><div class="line"><span class="comment">//["3","5","id","name"] 枚举key</span></div><div class="line"></div><div class="line"><span class="built_in">Object</span>.assign(state, <span class="literal">null</span>)</div><div class="line"><span class="comment">//&#123;"3":3,"5":5,"id":1,"name":"eryue"&#125;</span></div></pre></td></tr></table></figure>
<p>上面的例子的输出结果都有个规律，就是数字提前，按顺序排序，接着是字母排序。而这种行为也是ES6新增的标准。你还可以自己测试一下其他方法是不是也支持枚举自动排序。比如Object.keys(), for in 等。</p>
<h3 id="增强对象原型"><a href="#增强对象原型" class="headerlink" title="增强对象原型"></a>增强对象原型</h3><p>如果你想定义一个对象，你会想到很多方法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;&#125;</div><div class="line"></div><div class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.create(a)</div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">C</span>(<span class="params"></span>) </span>&#123;&#125;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">D</span> </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>那么，ES6是如何在这么强大的对象上面继续增强功能呢？</p>
<p>1、允许改变对象原型</p>
<p>改变对象原型，是指在对象实例化之后，可以改变对象原型。我们使用 <a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Object/setPrototypeOf" target="_blank" rel="external">Object.setPrototypeOf()</a> 来改变实例化后的对象原型。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;</div><div class="line">  name() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'eryue'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> b = <span class="built_in">Object</span>.create(a)</div><div class="line"><span class="built_in">console</span>.log(b.name()) <span class="comment">// eryue</span></div><div class="line">  </div><div class="line"><span class="comment">//使用setPrototypeOf改变b的原型</span></div><div class="line"><span class="keyword">let</span> c = &#123;</div><div class="line">  name() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">"sb"</span></div><div class="line">  &#125;</div><div class="line">&#125;    </div><div class="line"><span class="built_in">Object</span>.setPrototypeOf(b, c)    </div><div class="line"><span class="built_in">console</span>.log(b.name()) <span class="comment">//sb</span></div></pre></td></tr></table></figure>
<p>2、简化原型访问的super引用</p>
<p>这一个知识你可以看书籍原文，我目前想不到实际业务代码来分析。</p>
<h3 id="方法的定义"><a href="#方法的定义" class="headerlink" title="方法的定义"></a>方法的定义</h3><p>ES6明确了方法的定义。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = &#123;</div><div class="line">  <span class="comment">//方法</span></div><div class="line">  name() &#123;</div><div class="line">    <span class="keyword">return</span> <span class="string">'eryue'</span></div><div class="line">  &#125;</div><div class="line">&#125;</div><div class="line"><span class="comment">//函数</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">name</span>(<span class="params"></span>) </span>&#123;&#125;</div></pre></td></tr></table></figure>
<p>估计习惯了函数和方法切换的我们，还是不用太在意这些具体的叫法。</p>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本章讲解了对象字面量语法拓展，ES6新增方法，允许重复的对象字面量属性，自有枚举属性排序，增强对象原型，明确了方法的定义。</p>
<p>我们平时开发中比较常用的是前面4种新增的功能，尤其是Object.assign()的使用。但是，就算把全部新增的功能记住也不是难事。所以，全都记住吧！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;变量功能被加强了、函数功能被加强了，那么作为JavaScript中最普遍的对象，不加强对得起观众吗？&lt;/p&gt;
&lt;h3 id=&quot;对象类别&quot;&gt;&lt;a href=&quot;#对象类别&quot; class=&quot;headerlink&quot; title=&quot;对象类别&quot;&gt;&lt;/a&gt;对象类别&lt;/h3&gt;&lt;p&gt;在ES6中，对象分为下面几种叫法。（不需要知道概念）&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第三章-函数</title>
    <link href="https://wiestlee.github.io/2017/06/22/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E4%B8%89%E7%AB%A0%E3%80%8B%E2%80%94%E5%87%BD%E6%95%B0/"/>
    <id>https://wiestlee.github.io/2017/06/22/《深入理解ES6第三章》—函数/</id>
    <published>2017-06-21T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:14.009Z</updated>
    
    <content type="html"><![CDATA[<p>作为前端切图仔，越发觉得自己离不开函数了。</p>
<p>说到JavaScript函数，脑子里都是匿名函数、普通函数、闭包函数、构造函数……然后还能说出一大堆函数的概念。如果你达到这个水平，那么函数对你来说没有难度，是一个前端老鸟了。</p>
<a id="more"></a>
<p>当我闭上眼睛，不看键盘，手指在键盘上敲击出一个排序函数的时候，我在想，还是回顾一下函数的基本知识才有意思。</p>
<h3 id="函数的默认参数"><a href="#函数的默认参数" class="headerlink" title="函数的默认参数"></a>函数的默认参数</h3><p>在ES5中，我们给函数传参数，然后在函数体内设置默认值，如下面这种方式。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num, callback</span>) </span>&#123;</div><div class="line">  num = num || <span class="number">6</span></div><div class="line">  callback = callback || <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'ES5: '</span>, data)&#125;</div><div class="line">  callback(num * num)</div><div class="line">&#125;</div><div class="line">a() <span class="comment">//ES5: 36，不传参输出默认值</span></div><div class="line"></div><div class="line"><span class="comment">//你还可以这样使用callback</span></div><div class="line">a(<span class="number">10</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data * <span class="number">10</span>) <span class="comment">// 1000， 传参输出新数值</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>而在ES6中，我们使用新的默认值写法。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num = <span class="number">6</span>, callback = function (data</span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'ES6: '</span>, data)&#125;) &#123;</div><div class="line">  callback(num * num)</div><div class="line">&#125;</div><div class="line"></div><div class="line">a() <span class="comment">//ES6: 36， 不传参输出默认值</span></div><div class="line"></div><div class="line">a(<span class="number">10</span>, <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(data * <span class="number">10</span>) <span class="comment">// 1000，传参输出新数值</span></div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p><strong>使用ES6的默认值写法可以让函数体内部的代码更加简洁优雅</strong></p>
<p><strong>默认值对arguments对象的影响</strong></p>
<p>我们先要了解arguments对象是什么？准确一点来说它是一个类数组对象，它存在函数内部，它将当前函数的所有参数组成了一个类数组对象。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num, b</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>) <span class="comment">// &#123;"0": 6, "1": 10&#125;</span></div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>.length) <span class="comment">// 2</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">a(<span class="number">6</span>, <span class="number">10</span>)</div></pre></td></tr></table></figure>
<p>上面的输出结果看起来很正常，那么，如果我们加上参数默认值会怎样呢？</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num = <span class="number">1</span>, b = <span class="number">1</span></span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="built_in">arguments</span>)</div><div class="line">&#125;</div><div class="line">a() <span class="comment">// &#123;&#125; 默认值不能被arguments识别。</span></div><div class="line">a(<span class="number">6</span>, <span class="number">10</span>) <span class="comment">// &#123;"0":6,"1":10&#125;</span></div></pre></td></tr></table></figure>
<p>下面我们看一下修改参数默认值对arguments的影响。</p>
<p>1、在ES5的非严格模式下，一开始输入的参数是1，那么可以获取到arguments[0]（表示第一个参数）全等于num，修改num = 2之后，arguments[0]也能更新到2。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num === <span class="built_in">arguments</span>[<span class="number">0</span>]) <span class="comment">//true</span></div><div class="line">  num = <span class="number">2</span> <span class="comment">//修改参数默认值</span></div><div class="line">  <span class="built_in">console</span>.log(num === <span class="built_in">arguments</span>[<span class="number">0</span>]) <span class="comment">//true</span></div><div class="line">&#125;</div><div class="line">a(<span class="number">1</span>)</div></pre></td></tr></table></figure>
<p>2、在ES5的严格模式下，arguments就不能在函数内修改默认值后跟随着跟新了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>; <span class="comment">//严格模式   </span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num</span>) </span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num === <span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// true</span></div><div class="line">  num = <span class="number">2</span>;</div><div class="line">  <span class="built_in">console</span>.log(num === <span class="built_in">arguments</span>[<span class="number">0</span>]); <span class="comment">// false</span></div><div class="line">&#125;</div><div class="line">a(<span class="number">1</span>);</div></pre></td></tr></table></figure>
<p><strong>在ES6环境下，默认值对arguments的影响和ES5严格模式是同样的标准。</strong></p>
<p><strong>默认参数表达式</strong></p>
<p>参数不仅可以设置默认值为字符串，数字，数组或者对象，还可以是一个函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">10</span></div><div class="line">&#125;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">num = add(</span>))</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(num)</div><div class="line">&#125;</div><div class="line">a() <span class="comment">// 10</span></div></pre></td></tr></table></figure>
<p><strong>默认参数的临时死区</strong></p>
<p>第一章我们提到了let和const什么变量的临时死区（TDZ），默认参数既然是参数，那么也同样有临时死区，函数的作用域是独立的，a函数不能共享b函数的作用域参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//这是个默认参数临时死区的例子，当初始化a时，b还没有声明，所以第一个参数对b来说就是临时死区。</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">a = b, b</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a + b)</div><div class="line">&#125;</div><div class="line">add(<span class="literal">undefined</span>, <span class="number">2</span>) <span class="comment">// b is not define</span></div></pre></td></tr></table></figure>
<h3 id="无命名参数"><a href="#无命名参数" class="headerlink" title="无命名参数"></a>无命名参数</h3><p>上面说的参数都是命名参数，而无命名参数也是函数传参时经常用到的。当传入的参数是一个对象，不是一个具体的参数名，则是无命名参数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">object</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(object.a + object.b)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  <span class="attr">a</span>: <span class="number">1</span>,</div><div class="line">  <span class="attr">b</span>: <span class="number">2</span></div><div class="line">&#125;</div><div class="line">add(obj) <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p><strong>不定参数的使用：</strong>使用…（展开运算符）的参数就是不定参数，它表示一个数组。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...arr</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a + b)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>,b = <span class="number">2</span></div><div class="line">add(a, b) <span class="comment">// 3</span></div></pre></td></tr></table></figure>
<p><strong>不定参数的使用限制：</strong>必须放在所有参数的末尾，不能用于对象字面量setter中。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//错误的写法1</span></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">...arr, c</span>)</span>&#123;</div><div class="line">  <span class="built_in">console</span>.log(a + b)</div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="number">1</span>,b = <span class="number">2</span>,c = <span class="number">3</span></div><div class="line">add(a, b, c)</div><div class="line"></div><div class="line"><span class="comment">//错误的写法2</span></div><div class="line"><span class="keyword">let</span> obj = &#123;</div><div class="line">  set add(...arr) &#123;</div><div class="line">  </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>ES6中的构造函数Function新增了支持默认参数和不定参数。</strong></p>
<h3 id="展开运算符（…）"><a href="#展开运算符（…）" class="headerlink" title="展开运算符（…）"></a>展开运算符（…）</h3><p>展开运算符的作用是解构数组，然后将每个数组元素作为函数参数。</p>
<p>有了展开运算符，我们操作数组的时候，就可以不再使用apply来指定上下文环境了。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//ES5的写法</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>]</div><div class="line"><span class="keyword">let</span> a = <span class="built_in">Math</span>.max.apply(<span class="literal">null</span>, arr)</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 50</span></div><div class="line"></div><div class="line"><span class="comment">//ES6的写法</span></div><div class="line"><span class="keyword">let</span> arr = [<span class="number">10</span>, <span class="number">20</span>, <span class="number">50</span>, <span class="number">40</span>, <span class="number">30</span>]</div><div class="line"><span class="keyword">let</span> a = <span class="built_in">Math</span>.max(...arr)</div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">// 50</span></div></pre></td></tr></table></figure>
<h3 id="块级函数"><a href="#块级函数" class="headerlink" title="块级函数"></a>块级函数</h3><p><strong>严格模式下：</strong>在ES6中，你可以在块级作用域内声明函数，该函数的作用域只限于当前块，不能在块的外部访问。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">  <span class="keyword">const</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">  </div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p><strong>非严格模式：</strong>即使在ES6中，非严格模式下的块级函数，他的作用域也会被提升到父级函数的顶部。所以大家写代码尽量使用严格模式，避免这些奇葩情况。</p>
<h3 id="箭头函数（-gt-）"><a href="#箭头函数（-gt-）" class="headerlink" title="箭头函数（=&gt;）"></a>箭头函数（=&gt;）</h3><p>如果看到你这里，你发现你还没有在项目中使用过箭头函数，没关系，你并不low，而是学习不够努力。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">5</span>, <span class="number">10</span>]</div><div class="line"><span class="keyword">const</span> s = arr.reduce(<span class="function">(<span class="params">sum, item</span>) =&gt;</span> sum + item)</div><div class="line"><span class="built_in">console</span>.log(s) <span class="comment">// 15</span></div></pre></td></tr></table></figure>
<p><strong>箭头函数和普通函数的区别是：</strong></p>
<p>1、箭头函数没有this，函数内部的this来自于父级最近的非箭头函数，并且不能改变this的指向。</p>
<p>2、箭头函数没有super</p>
<p>3、箭头函数没有arguments</p>
<p>4、箭头函数没有new.target绑定。</p>
<p>5、不能使用new</p>
<p>6、没有原型</p>
<p>7、不支持重复的命名参数。</p>
<p><strong>箭头函数的简单理解</strong></p>
<p>1、箭头函数的左边表示输入的参数，右边表示输出的结果。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> s = <span class="function"><span class="params">a</span> =&gt;</span> a</div><div class="line"><span class="built_in">console</span>.log(s(<span class="number">2</span>)) <span class="comment">// 2</span></div></pre></td></tr></table></figure>
<p>2、箭头函数中，最重要的this报错将不再成为你每天都担心的bug。</p>
<p>3、箭头函数还可以输出对象，在react的action中就推荐这种写法。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> action = <span class="function">(<span class="params">type, a</span>) =&gt;</span> (&#123;</div><div class="line">  <span class="attr">type</span>: <span class="string">"TYPE"</span>,</div><div class="line">  a</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>4、支持立即执行函数表达式写法</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> test = <span class="function">(<span class="params">(id</span>) =&gt;</span> &#123;</div><div class="line">  <span class="keyword">return</span> &#123;</div><div class="line">    getId() &#123;</div><div class="line">      <span class="built_in">console</span>.log(id)</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">&#125;)(<span class="number">18</span>)</div><div class="line">test.getId() <span class="comment">// 18</span></div></pre></td></tr></table></figure>
<p>5、箭头函数给数组排序</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> arr = [<span class="number">10</span>, <span class="number">50</span>, <span class="number">30</span>, <span class="number">40</span>, <span class="number">20</span>]</div><div class="line"><span class="keyword">const</span> s = arr.sort(<span class="function">(<span class="params">a, b</span>) =&gt;</span> a - b)</div><div class="line"><span class="built_in">console</span>.log(s) <span class="comment">// [10,20,30,40,50]</span></div></pre></td></tr></table></figure>
<h3 id="尾调用优化"><a href="#尾调用优化" class="headerlink" title="尾调用优化"></a>尾调用优化</h3><p>尾调用是什么鬼？</p>
<p>尾调用是指在函数return的时候调用一个新的函数，由于尾调用的实现需要存储到内存中，在一个循环体中，如果存在函数的尾调用，你的内存可能爆满或溢出。</p>
<p>ES6中，引擎会帮你做好尾调用的优化工作，你不需要自己优化，但需要满足下面3个要求：</p>
<p>1、函数不是闭包</p>
<p>2、尾调用是函数最后一条语句</p>
<p>3、尾调用结果作为函数返回</p>
<p><strong>一个满足以上要求的函数如下所示：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="meta">"use strict"</span>;   </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> b();</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>下面的都是不满足的写法：</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//没有return不优化</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  b();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//不是直接返回函数不优化</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">return</span> <span class="number">1</span> + b();</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//尾调用是函数不是最后一条语句不优化</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> s = b();</div><div class="line">  <span class="keyword">return</span> s</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">//闭包不优化</span></div><div class="line"><span class="meta">"use strict"</span>;</div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">  <span class="keyword">const</span> num = <span class="number">1</span></div><div class="line">  <span class="function"><span class="keyword">function</span> <span class="title">b</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">return</span> num</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">return</span> b</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p><strong>尾调用实际用途——递归函数优化</strong></p>
<p>在ES5时代，我们不推荐使用递归，因为递归会影响性能。</p>
<p>但是有了尾调用优化之后，递归函数的性能有了提升。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//新型尾优化写法</span></div><div class="line"><span class="meta">"use strict"</span>;  </div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params">n, p = <span class="number">1</span></span>) </span>&#123;</div><div class="line">  <span class="keyword">if</span>(n &lt;= <span class="number">1</span>) &#123;</div><div class="line">    <span class="keyword">return</span> <span class="number">1</span> * p</div><div class="line">  &#125;</div><div class="line">  <span class="keyword">let</span> s = n * p</div><div class="line">  <span class="keyword">return</span> a(n - <span class="number">1</span>, s)</div><div class="line">&#125;</div><div class="line"><span class="comment">//求 1 x 2 x 3的阶乘</span></div><div class="line"><span class="keyword">let</span> sum = a(<span class="number">3</span>)</div><div class="line"><span class="built_in">console</span>.log(sum) <span class="comment">// 6</span></div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>函数这一章涉及到的知识点比较多，默认参数，命名参数，不定参数，展开运算符，箭头函数，尾调用优化。</p>
<p>第一次学习这些知识的人可以关注箭头函数和展开运算符的使用，这是最重要也最常用的知识，如果你已经在项目中使用过这些知识，那么作为巩固也是有帮助的，俗话说温故知新。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;作为前端切图仔，越发觉得自己离不开函数了。&lt;/p&gt;
&lt;p&gt;说到JavaScript函数，脑子里都是匿名函数、普通函数、闭包函数、构造函数……然后还能说出一大堆函数的概念。如果你达到这个水平，那么函数对你来说没有难度，是一个前端老鸟了。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第二章-字符串与正则表达式</title>
    <link href="https://wiestlee.github.io/2017/06/21/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E4%BA%8C%E7%AB%A0%E3%80%8B%E2%80%94%E5%AD%97%E7%AC%A6%E4%B8%B2%E5%92%8C%E6%AD%A3%E5%88%99%E8%A1%A8%E8%BE%BE%E5%BC%8F/"/>
    <id>https://wiestlee.github.io/2017/06/21/《深入理解ES6第二章》—字符串和正则表达式/</id>
    <published>2017-06-20T16:00:00.000Z</published>
    <updated>2017-12-03T04:54:48.597Z</updated>
    
    <content type="html"><![CDATA[<p>相比较于第一章变量的声明，这一章的内容有了一点深度提升，但还不至于很难理解。本章主要讲2个知识点，<strong>字符串</strong>、<strong>正则表达式</strong></p>
<h3 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h3><p>字符串（String）是JavaScript6大原始数据类型。其他几个分别是Boolean、Null、Undefined、Number、Symbol（es6新增）。</p>
<a id="more"></a>
<p>字符串类型在前端开发者，是使用最频繁的类型之一，网站上可见的各种文案，几乎都是字符串类型的数据。我们经常需要使用的操作无非是这么几点：读取字符串、转换字符串、清空字符串、拼接字符串、截取字符串。</p>
<p>在ES5中，字符串类型已经有了非常丰富的应用能力，那么，在ES6中，ECMA的专家们对字符串做了什么更新呢？</p>
<p>当Unicode引入扩展字符集之后，16位的字符已经不足以满足字符串的发展，所以才在ES6中更新了Unicode的支持。</p>
<p>我们看看ES6字符串新增的方法</p>
<p><strong>UTF-16码位：</strong>ES6强制使用UTF-16字符串编码。关于UTF-16的解释请自行百度了解。</p>
<p><strong>codePointAt()：</strong><br>该方法支持UTF-16，接受编码单元的位置而非字符串位置作为参数，返回与字符串中给定位置对应的码位，即一个整数值。</p>
<p><strong>String.fromCodePoiont()：</strong>作用与codePointAt相反，检索字符串中某个字符的码位，也可以根据指定的码位生成一个字符。</p>
<p><strong>normalize()</strong>：提供Unicode的标准形式，接受一个可选的字符串参数，指明应用某种Unicode标准形式。</p>
<h3 id="正则表达式"><a href="#正则表达式" class="headerlink" title="正则表达式"></a>正则表达式</h3><p><strong>正则表达式u修饰符：</strong><br>当给正则表达式添加u字符时，它就从编码单元操作模式切换为字符模式。</p>
<h3 id="其他新增的方法"><a href="#其他新增的方法" class="headerlink" title="其他新增的方法"></a>其他新增的方法</h3><p>上面提到的字符串和正则的新增方法只有在国际化的时候才用的到，我想，国内的很多网站还是不需要考虑国际化的问题，看不懂就先丢掉。下面讲到的新增的方法是实际开发中需求比较频繁的方法。</p>
<p><strong>字符串中的子串识别</strong>：</p>
<p>以前我们经常使用indexOf()来检测字符串中是否包含另外一段字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> t = <span class="string">'abcdefg'</span></div><div class="line"><span class="keyword">if</span>(t.indexOf(<span class="string">'cde'</span>) &gt; <span class="number">-1</span>) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//输出2，因为t字符串中包含cde字符串。</span></div></pre></td></tr></table></figure>
<p>在ES6中，新增了3个新方法。每个方法都接收2个参数，需要检测的子字符串，以及开始匹配的索引位置。</p>
<p><strong>includes(str, index)：</strong>如果在字符串中检测到指定文本，返回true，否则false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> t = <span class="string">'abcdefg'</span></div><div class="line"><span class="keyword">if</span>(t.includes(<span class="string">'cde'</span>)) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><strong>startsWith(str, index)</strong>：如果在字符串起始部分检测到指定文本，返回true，否则返回false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> t = <span class="string">'abcdefg'</span></div><div class="line"><span class="keyword">if</span>(t.startsWith(<span class="string">'ab'</span>)) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><strong>endsWith(str, index)</strong>：如果在字符串的结束部分检测到指定文本，返回true，否则返回false。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> t = <span class="string">'abcdefg'</span></div><div class="line"><span class="keyword">if</span>(t.endsWith(<span class="string">'fg'</span>)) &#123;</div><div class="line">  <span class="built_in">console</span>.log(<span class="number">2</span>)</div><div class="line">&#125;</div><div class="line"><span class="comment">//true</span></div></pre></td></tr></table></figure>
<p><strong>如果你只是需要匹配字符串中是否包含某子字符串，那么推荐使用新增的方法，如果需要找到匹配字符串的位置，使用indexOf()。</strong></p>
<p><strong>repeat(number)</strong></p>
<p>这个方法挺有意思的，接收一个Number类型的数据，返回一个重复N次的新字符串。即使这个字符串是空字符，也你能返回N个空字符的新字符串。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">'ba'</span>.repeat(<span class="number">3</span>)) <span class="comment">//bababa</span></div></pre></td></tr></table></figure>
<h3 id="正则表达式的其他更新"><a href="#正则表达式的其他更新" class="headerlink" title="正则表达式的其他更新"></a>正则表达式的其他更新</h3><p>正则表达式y修饰符、正则表达式的复制、flags属性……</p>
<p>由于这一块知识没用过，就不打算去研究实际用途。</p>
<h3 id="模板字面量"><a href="#模板字面量" class="headerlink" title="模板字面量"></a>模板字面量</h3><p>以前，我们用单引号或双引号表示字符串。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">'123'</span> <span class="comment">//单引号</span></div><div class="line"><span class="keyword">let</span> b = <span class="string">"123"</span> <span class="comment">//双引号</span></div></pre></td></tr></table></figure></p>
<p>现在，使用模板字面量反撇号``。在实际开发中，这是经常都要用到的方法。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> c = <span class="string">`123`</span> <span class="comment">//反撇号</span></div></pre></td></tr></table></figure></p>
<p>在字符串中使用反撇号，只需要加上转义符。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> d = <span class="string">`12\`3`</span> <span class="comment">//字符串内插入反撇号的方式。</span></div></pre></td></tr></table></figure></p>
<p><strong>在多行字符串的使用价值：</strong></p>
<p>模板字面量为解决多行字符串的一系列问题提供了一个非常好的机制。</p>
<p>如果不使用模板字面量，实现多行字符串，你可能会使用换行符。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">'123\n456'</span></div><div class="line"><span class="built_in">console</span>.log(a) </div><div class="line"><span class="comment">// 123</span></div><div class="line"><span class="comment">// 456</span></div></pre></td></tr></table></figure>
<p>使用模板字面量，就可以非常简单的实现需求。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> a = <span class="string">`123</span></div><div class="line">456</div><div class="line">`</div><div class="line"><span class="built_in">console</span>.log(a)</div><div class="line"><span class="comment">// 123</span></div><div class="line"><span class="comment">// 456</span></div></pre></td></tr></table></figure>
<p><strong>在模板字面量插入变量的方法。</strong></p>
<p>我们不再需要使用 +（加号）来向字符串插入变量，而是使用${params}直接插入你需要添加到字符串的位置。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">let</span> t = <span class="string">'haha'</span></div><div class="line"><span class="keyword">let</span> a = <span class="string">`123<span class="subst">$&#123;t&#125;</span>456`</span></div><div class="line"><span class="built_in">console</span>.log(a) <span class="comment">//123haha456</span></div></pre></td></tr></table></figure>
<p>这种方式也叫作字符串占位符。占位符支持互相嵌套模板字面量，强大吧。有了它，我们终于可以抛弃 + 拼接字符串的恶心做法了。</p>
<p><strong>模板字面量的终极用法</strong><br>tag是一个方法，方法名你可以任意命名，这种写法被称作标签模板。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">tag</span>(<span class="params">literals, ...substitutions</span>) </span>&#123;</div><div class="line">    <span class="comment">//literals是数组，第一个位置是""，第二个位置是占位符之间的字符串，在本例中是haha</span></div><div class="line">    <span class="comment">//substitutions是字符串中的模板字面量，可能多个</span></div><div class="line">    </div><div class="line">    <span class="comment">//函数最终返回字符串</span></div><div class="line">&#125;</div><div class="line"><span class="keyword">let</span> a = <span class="number">4</span></div><div class="line"><span class="keyword">let</span> t = tag<span class="string">`<span class="subst">$&#123;a&#125;</span> haha`</span></div><div class="line"><span class="built_in">console</span>.log(t) <span class="comment">//4 haha</span></div></pre></td></tr></table></figure>
<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>本章讲到了ES6中新增的Unicode方法，但是对于不需要做国际化处理的同学，这个功能就不会用到，需要<strong>关注的新增的字符串匹配的3个方法，以及模板字面量的使用。</strong>这2个知识点非常非常常用！</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;相比较于第一章变量的声明，这一章的内容有了一点深度提升，但还不至于很难理解。本章主要讲2个知识点，&lt;strong&gt;字符串&lt;/strong&gt;、&lt;strong&gt;正则表达式&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;字符串&quot;&gt;&lt;a href=&quot;#字符串&quot; class=&quot;headerlink&quot; title=&quot;字符串&quot;&gt;&lt;/a&gt;字符串&lt;/h3&gt;&lt;p&gt;字符串（String）是JavaScript6大原始数据类型。其他几个分别是Boolean、Null、Undefined、Number、Symbol（es6新增）。&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>深入了解ES6第一章-块级作用域</title>
    <link href="https://wiestlee.github.io/2017/06/20/%E3%80%8A%E6%B7%B1%E5%85%A5%E7%90%86%E8%A7%A3ES6%E7%AC%AC%E4%B8%80%E7%AB%A0%E3%80%8B%E2%80%94%E5%9D%97%E7%BA%A7%E4%BD%9C%E7%94%A8%E5%9F%9F%E7%BB%91%E5%AE%9A/"/>
    <id>https://wiestlee.github.io/2017/06/20/《深入理解ES6第一章》—块级作用域绑定/</id>
    <published>2017-06-19T16:00:00.000Z</published>
    <updated>2017-12-03T04:48:49.829Z</updated>
    
    <content type="html"><![CDATA[<p><strong>本章涉及3个知识点，var、let、const，现在让我们了解3个关键字的特性和使用方法。</strong></p>
<h3 id="var"><a href="#var" class="headerlink" title="var"></a>var</h3><p>JavaScript中，我们通常说的作用域是函数作用域，使用var声明的变量，无论是在代码的哪个地方声明的，都会提升到当前作用域的最顶部，这种行为叫做<strong>变量提升（Hoisting）</strong></p>
<a id="more"></a>
<p>也就是说，如果在函数内部声明的变量，都会被提升到该函数开头，而在全局声明的变量，就会提升到全局作用域的顶部。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1: '</span>, a) <span class="comment">//undefined</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line">      <span class="keyword">var</span> a = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'3: '</span>, a) <span class="comment">//undefined</span></div><div class="line">&#125;</div><div class="line"></div><div class="line">test()</div></pre></td></tr></table></figure>
<p>实际执行时，上面的代码中的变量a会提升到函数顶部声明，即使if语句的条件是false，也一样不影响a变量提升。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">var</span> a</div><div class="line">    <span class="comment">//a声明没有赋值</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'1: '</span>, a) <span class="comment">//undefined</span></div><div class="line">    <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line">      a = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="comment">//a声明没有赋值</span></div><div class="line">    <span class="built_in">console</span>.log(<span class="string">'3: '</span>, a) <span class="comment">//undefined</span></div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>在函数嵌套函数的场景下，变量只会提升到最近的一个函数顶部，而不会提升到外部函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//b提升到函数a顶部，但不会提升到函数test。</span></div><div class="line">    <span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="function"><span class="keyword">function</span> <span class="title">a</span>(<span class="params"></span>) </span>&#123;</div><div class="line">          <span class="keyword">if</span> (<span class="literal">false</span>) &#123;</div><div class="line">            <span class="keyword">var</span> b = <span class="number">2</span></div><div class="line">          &#125;</div><div class="line">        &#125;</div><div class="line">        <span class="built_in">console</span>.log(<span class="string">'b: '</span>, b)</div><div class="line">    &#125;</div><div class="line">    </div><div class="line">    test() <span class="comment">//b is not defined</span></div></pre></td></tr></table></figure>
<p>如果a没有声明，那么就会报错，<strong>没有声明和声明后没有赋值是不一样的</strong>，这点一定要区分开，有助于我们找bug。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="comment">//a没有声明的情况</span></div><div class="line">   a is not defined</div></pre></td></tr></table></figure>
<h3 id="let"><a href="#let" class="headerlink" title="let"></a>let</h3><p>let和const都能够声明块级作用域，用法和var是类似的，let的特点是不会变量提升，而是被锁在当前块中。</p>
<p>一个非常简单的例子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">      <span class="built_in">console</span>.log(a)<span class="comment">//TDZ，俗称临时死区，用来描述变量不提升的现象</span></div><div class="line">      <span class="keyword">let</span> a = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line">test()  <span class="comment">// a is not defined</span></div><div class="line"></div><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">      <span class="keyword">let</span> a = <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(a)</div><div class="line">&#125;    </div><div class="line">test() <span class="comment">// a is not defined</span></div></pre></td></tr></table></figure></p>
<p>唯一正确的使用方法：<strong>先声明，再访问。</strong></p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">test</span>(<span class="params"></span>) </span>&#123;</div><div class="line">        <span class="keyword">if</span>(<span class="literal">true</span>) &#123;</div><div class="line">          <span class="keyword">let</span> a = <span class="number">1</span></div><div class="line">          <span class="built_in">console</span>.log(a)</div><div class="line">        &#125;</div><div class="line">    &#125;</div><div class="line">    test() <span class="comment">// 1</span></div></pre></td></tr></table></figure>
<h3 id="const"><a href="#const" class="headerlink" title="const"></a>const</h3><p>声明常量，一旦声明，不可更改，而且常量必须初始化赋值。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> type = <span class="string">"ACTION"</span></div></pre></td></tr></table></figure>
<p>我们试试重新声明type，看看会报什么错：<br>​<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> type = <span class="string">"ACTION"</span></div><div class="line">    type = <span class="number">1</span></div><div class="line">    <span class="built_in">console</span>.log(type) <span class="comment">//"type" is read-only</span></div><div class="line">    </div><div class="line">    <span class="keyword">const</span> type = <span class="string">"ACTION"</span></div><div class="line">    <span class="keyword">let</span> type = <span class="number">1</span></div><div class="line">    <span class="built_in">console</span>.log(type) <span class="comment">//Duplicate declaration "type"</span></div></pre></td></tr></table></figure></p>
<p>const虽然是常量，不允许修改默认赋值，但如果定义的是对象Object，那么可以修改对象内部的属性值包括新增删除键值对也是可以的。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">const</span> type = &#123;</div><div class="line">      <span class="attr">a</span>: <span class="number">1</span></div><div class="line">    &#125;</div><div class="line">    type.a = <span class="number">2</span> <span class="comment">//没有直接修改type的值，而是修改type.a的属性值，这是允许的。</span></div><div class="line">    <span class="built_in">console</span>.log(type) <span class="comment">// &#123;a: 2&#125;</span></div><div class="line">    </div><div class="line">    type.b = <span class="number">3</span> <span class="comment">//拓展Object也是没有问题的</span></div><div class="line">    <span class="built_in">console</span>.log(type) <span class="comment">// &#123;a: 2 , b: 3&#125;</span></div><div class="line">    </div><div class="line">    <span class="keyword">delete</span> type.b=<span class="number">3</span> <span class="comment">//删除整个键值对也OK的</span></div><div class="line">    <span class="built_in">console</span>.log(type) <span class="comment">// &#123;a: 2&#125;</span></div><div class="line">    </div><div class="line">    <span class="comment">//如果重新定义数据结构~常量的内存地址值发生改变,这个是不可行的。</span></div><div class="line">    type=&#123;&#125;; <span class="comment">//Assignment to constant variable.</span></div><div class="line">    type=[]; <span class="comment">//Assignment to constant variable.</span></div></pre></td></tr></table></figure>
<h3 id="const和let的异同点"><a href="#const和let的异同点" class="headerlink" title="const和let的异同点"></a>const和let的异同点</h3><p><strong>相同点：</strong>const和let都是在当前块内有效，执行到块外会被销毁，也不存在变量提升（TDZ），不能重复声明。</p>
<p><strong>不同点：</strong>const不能再赋值，let声明的变量可以重复赋值。</p>
<h3 id="临时死区-TDZ"><a href="#临时死区-TDZ" class="headerlink" title="临时死区(TDZ)"></a>临时死区(TDZ)</h3><p>上面我们也提到了TDZ的场景，那么，有什么用呢？答案就是没什么用。</p>
<p>临时死区的意思是在当前作用域的块内，在声明变量前的区域叫做临时死区。<br>​<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">if</span> (<span class="literal">true</span>) &#123;</div><div class="line">      <span class="comment">//这块区域是TDZ</span></div><div class="line">      <span class="keyword">let</span> a = <span class="number">1</span></div><div class="line">    &#125;</div></pre></td></tr></table></figure></p>
<h3 id="块级作用域的使用场景"><a href="#块级作用域的使用场景" class="headerlink" title="块级作用域的使用场景"></a>块级作用域的使用场景</h3><p>除了上面提到的常用声明方式，我们还可以在循环中使用，最出名的一道面试题：循环中定时器闭包的考题</p>
<p>在for循环中使用var声明的循环变量，会跳出循环体污染当前的函数。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(i) <span class="comment">//5, 5, 5, 5, 5</span></div><div class="line">      &#125;, <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(i) <span class="comment">//5 i跳出循环体污染外部函数</span></div><div class="line">    </div><div class="line">    <span class="comment">//将var改成let之后</span></div><div class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">5</span>; i++) &#123;</div><div class="line">      setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</div><div class="line">        <span class="built_in">console</span>.log(i) <span class="comment">// 0,1,2,3,4</span></div><div class="line">      &#125;, <span class="number">0</span>)</div><div class="line">    &#125;</div><div class="line">    <span class="built_in">console</span>.log(i)<span class="comment">//i is not defined i无法污染外部函数</span></div></pre></td></tr></table></figure>
<p>关于这个使用场景的具体分析可以查看我写的另外一篇文章：<a href="https://segmentfault.com/a/1190000008922457" target="_blank" rel="external">JavaScript同步、异步、回调执行顺序之经典闭包setTimeout面试题分析</a></p>
<h3 id="在全局作用域声明"><a href="#在全局作用域声明" class="headerlink" title="在全局作用域声明"></a>在全局作用域声明</h3><p>如果在全局作用域使用let或者const声明，当声明的变量本身就是全局属性，比如closed。只会覆盖该全局变量，而不会替换它。</p>
<figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">window</span>.closed = <span class="literal">false</span></div><div class="line"><span class="keyword">let</span> closed = <span class="literal">true</span></div><div class="line"></div><div class="line">closed <span class="comment">// true</span></div><div class="line"><span class="built_in">window</span>.closed <span class="comment">// false</span></div></pre></td></tr></table></figure>
<h3 id="最佳实践"><a href="#最佳实践" class="headerlink" title="最佳实践"></a>最佳实践</h3><p>在实际开发中，我们选择使用var、let还是const，取决于我们的变量是不是需要更新，通常我们希望变量保证不被恶意修改，而使用大量的const，在react中，props传递的对象是不可更改的，所以使用const声明，声明一个对象的时候，也推荐使用const，当你需要修改声明的变量值时，使用let，var能用的场景都可以使用let替代。</p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;本章涉及3个知识点，var、let、const，现在让我们了解3个关键字的特性和使用方法。&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;var&quot;&gt;&lt;a href=&quot;#var&quot; class=&quot;headerlink&quot; title=&quot;var&quot;&gt;&lt;/a&gt;var&lt;/h3&gt;&lt;p&gt;JavaScript中，我们通常说的作用域是函数作用域，使用var声明的变量，无论是在代码的哪个地方声明的，都会提升到当前作用域的最顶部，这种行为叫做&lt;strong&gt;变量提升（Hoisting）&lt;/strong&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
  <entry>
    <title>React-native flux（alt）架构学习</title>
    <link href="https://wiestlee.github.io/2017/03/25/flux%E6%9E%B6%E6%9E%84%E5%AD%A6%E4%B9%A0/"/>
    <id>https://wiestlee.github.io/2017/03/25/flux架构学习/</id>
    <published>2017-03-24T16:00:00.000Z</published>
    <updated>2017-12-03T04:56:09.149Z</updated>
    
    <content type="html"><![CDATA[<h3 id="flux-框架介绍"><a href="#flux-框架介绍" class="headerlink" title="flux 框架介绍"></a>flux 框架介绍</h3><h3 id="flux的四大元素："><a href="#flux的四大元素：" class="headerlink" title="flux的四大元素："></a>flux的四大元素：</h3><ul>
<li>Dispatchre ： 根据注册派发动作（action）</li>
<li>Store ：（数据层）存储数据，用来存放应用的状态，一旦发生变动，就提醒Views要更新页面。</li>
<li>Action ：（动作）视图层发出的消息（比如onClick）。</li>
<li>View : 用户界面的视图层</li>
</ul>
<a id="more"></a>
<p><img src="http://www.ruanyifeng.com/blogimg/asset/2016/bg2016011503.png" alt="数据关系"></p>
<h4 id="Flux-的最大的特点就是”单向数据流动”。"><a href="#Flux-的最大的特点就是”单向数据流动”。" class="headerlink" title="Flux 的最大的特点就是”单向数据流动”。"></a>Flux 的最大的特点就是”单向数据流动”。</h4><ul>
<li>用户访问 View</li>
<li>View 发出用户的Action</li>
<li>Dispatcher 收到 Action，要求 Store 进行相应的更新</li>
<li>Store 更新后，发出一个”change”事件</li>
<li>View 收到”change”事件后，更新页面</li>
</ul>
<h2 id="Dispatcher"><a href="#Dispatcher" class="headerlink" title="Dispatcher"></a>Dispatcher</h2><p>是全局唯一的Dispather对象，关系网的中心<br>文件： <strong>AppDispather.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> &#123;Dispather&#125; <span class="keyword">from</span> <span class="string">'flux'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Dispather();</div></pre></td></tr></table></figure></p>
<p>AppDispather.register() 方法用来登记各种Action的回调函数<br>文件： AppDispatcher.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> Counterstore <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</div><div class="line"><span class="keyword">import</span> ActionTypes <span class="keyword">from</span> <span class="string">'./ActionTypes'</span>;</div><div class="line">AppDispatcher.register(<span class="function">(<span class="params">action</span>)=&gt;</span>&#123;</div><div class="line">    <span class="keyword">switch</span>(action.type) &#123;</div><div class="line">        <span class="attr">case</span>:ActionTypes.INCREMENT:</div><div class="line">        Counterstore.increment();</div><div class="line">        Counterstore.emitChange();</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">        <span class="keyword">default</span>:</div><div class="line">        <span class="comment">// no op</span></div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Store"><a href="#Store" class="headerlink" title="Store"></a>Store</h2><p>Store 保存整个应用的状态。他的角色有点像MVC 架构中的 Model。<br>所有的数据都存放在哪里。<br>注册（register）:把当前的Store注册到Dispather下，加入Dispather关系网通过emit广播、on挂载事件，Store需要注册到全局唯一的Dispather上才有效。<br><strong>flux核心部分</strong>：当register函数把一个回调函数注册到Dispather后,所有派发Dispather的Action对象，都会传递到这个回调函数中。<br><strong>文件：<br>        CounterStore.js<br>        声明、生成Store对象</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div><div class="line">35</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">const CounterStore = object.assign(&#123;&#125;,EventEmitter.prototype,&#123;</div><div class="line">  couterValue = &#123;</div><div class="line">          First: 0,</div><div class="line">          Second: 10,</div><div class="line">          Third: 30</div><div class="line">  &#125;;</div><div class="line">  getCounterValues: function()&#123;</div><div class="line">     return this.counterValues;</div><div class="line">  &#125;,</div><div class="line">  increment: function()&#123;</div><div class="line">     this.couterValue.First++;</div><div class="line">  &#125;,</div><div class="line">  emitChange: function()&#123;</div><div class="line">     this.emit(CHANGE_EVENT); // 广播事件</div><div class="line">  &#125;,</div><div class="line">  addChangeListener: function()&#123;</div><div class="line">      this.on(CHANGE_EVENT,callback); //挂载事件</div><div class="line">  &#125;,</div><div class="line">  removeChangeListener: function ()&#123;</div><div class="line">    this.removeListener(CHANGE_EVENT,callback);     //移除监听</div><div class="line">  &#125;</div><div class="line">  /* 把CounterStore 注册到全局唯一的Dispather上，register函数接受一个回调函数做参数 */</div><div class="line">  /* 注册token(控制权令牌) */</div><div class="line">  CounterStore.dispatchToken = AppDispather.register((action)=&gt;&#123;</div><div class="line">   if(action.type === ActionTypes.INCREMENT)&#123;</div><div class="line">    /* do increment */</div><div class="line">    /* 根据action对象，修改当前Store中的counterValue变量 */</div><div class="line">       CounterStore.increment();</div><div class="line">   &#125;else if (action.type === ActionTypes.DECREMENT)&#123;</div><div class="line">    /* do decrement */</div><div class="line">    /* 根据 action的对象,修改当前Store中的counterValues变量 */</div><div class="line">&#125;</div><div class="line">  &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<h2 id="Action"><a href="#Action" class="headerlink" title="Action"></a>Action</h2><p>代表一个动作的纯数据对象<br>是js对象，且不自带方法，用于驱动Dispather，来自用户的请求<br>Action并不包含数据处理逻辑，而是调用函数，来创建对应的action对象<br>文件： <strong>// ActionTypes.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> INCREMENT = <span class="string">'increment'</span>;</div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> DECREMENT = <span class="string">'decrement'</span>;</div></pre></td></tr></table></figure></p>
<p>文件：<strong>// action.js</strong><br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"><span class="keyword">import</span> * <span class="keyword">as</span> ActionTypes form <span class="string">'./ActionTypes.js'</span>;</div><div class="line"><span class="keyword">import</span> AppDispatcher <span class="keyword">from</span> <span class="string">'./AppDispatcher.js'</span>;</div><div class="line"></div><div class="line"><span class="keyword">export</span> <span class="keyword">const</span> increment = <span class="function">(<span class="params">counterCaption</span>) =&gt;</span>&#123;</div><div class="line">  AppDispatcher.dispatch(&#123; </div><div class="line">     <span class="attr">type</span>: ActionTypes.INCREMENT, <span class="comment">// action对象类型</span></div><div class="line">     counterCaption:counterCaption <span class="comment">// 用于标识发出的action的来源（即网页元素）</span></div><div class="line">     </div><div class="line">  &#125;)</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h2 id="View"><a href="#View" class="headerlink" title="View"></a>View</h2><p>用户在界面中调用action</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span>  React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line">impor CounterStore <span class="keyword">from</span> <span class="string">'./CounterStore'</span>;</div><div class="line"><span class="keyword">import</span> Actions <span class="keyword">from</span> <span class="string">'./action'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">App</span> <span class="keyword">extends</span> <span class="title">Component</span> </span>&#123;</div><div class="line">   <span class="keyword">constructor</span>(props) &#123;</div><div class="line">        <span class="keyword">super</span>(props);</div><div class="line">        <span class="keyword">this</span>.state = &#123;</div><div class="line">          <span class="attr">couterValue</span>:CounterStore.getCounterValues(),</div><div class="line">        &#125;;</div><div class="line">    &#125;</div><div class="line">    </div><div class="line"> componentDidMount: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    CounterStore.addChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line"> <span class="attr">componentWillUnmount</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</div><div class="line">    CounterStore.removeChangeListener(<span class="keyword">this</span>._onChange);</div><div class="line">  &#125;,</div><div class="line"></div><div class="line"> <span class="attr">_onChange</span>: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</div><div class="line">    <span class="keyword">this</span>.setState(&#123;</div><div class="line">      <span class="attr">couterValue</span>:CounterStore.getCounterValues()</div><div class="line">    &#125;);</div><div class="line">  &#125;,</div><div class="line">    <span class="comment">/* react 组件中的事件 */</span></div><div class="line"> onClickBtn()&#123;</div><div class="line">    <span class="comment">/* increment 已经在对应的Store中完成注册，Dispather可识别 */</span></div><div class="line">    Actions.increment(<span class="keyword">this</span>.props.caption);</div><div class="line"> &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h2 id="Flux-的拟物化描述"><a href="#Flux-的拟物化描述" class="headerlink" title="Flux 的拟物化描述"></a>Flux 的拟物化描述</h2><h3 id="Dispather"><a href="#Dispather" class="headerlink" title="Dispather"></a><strong>Dispather</strong></h3><p>在十字路口中央指挥交通的交警，不会离开工作地点，是唯一的；<br>当有人督促我派发（Dispatch）一下action,我就要打电话给我的小协警了，叫他赶紧把这个家伙的事情处理一下</p>
<h3 id="Store-1"><a href="#Store-1" class="headerlink" title="Store"></a><strong>Store</strong></h3><p>注册：协警把自己的电话号码给了十字路口的交警并告诉他：”发生交通事故就打这个电话找我，我自己处理现场”<br>emit广播事件：如果有人叫我处理交通事故；<br>on 挂载事件：如果有人叫我处理交通事故，我要给出反应</p>
<h3 id="View-1"><a href="#View-1" class="headerlink" title="View"></a><strong>View</strong></h3><p>路上的车主，一旦和别人的车撞上了，我要发出一个Action（下车跑去找交警我的事故属于那种类型）让交警知道我撞车了，不然他会不理我的</p>
<h3 id="Action-1"><a href="#Action-1" class="headerlink" title="Action"></a><strong>Action</strong></h3><p>车督促交警，赶紧把我的action派发（Dispatch）出去，让交警快来处理一下</p>
<h2 id="Flux总结"><a href="#Flux总结" class="headerlink" title="Flux总结"></a><strong>Flux总结</strong></h2><ul>
<li><strong>flux的目的</strong> ：纠正MVC框架的无法禁绝View与model通信的缺点；</li>
<li><strong>flux的做法</strong> ：Store只有get方法，没有set方法；因此View只能通过get获取Store状态，不能修改状态；如果想要修改Store的状态，只能<strong>派发一个action给Dispatcher</strong>，由action中的ActionType对应的Store方法修改Store本身。</li>
<li><strong>flux的缺点</strong> ： <ul>
<li>Store之间相互依赖：需要建立依赖，需要token</li>
<li>可以但是很难进行服务器端的渲染（）</li>
<li>Store替换后，无法保持原有的存储状态（指在开发中，Store逻辑的修改无法热加载）</li>
</ul>
</li>
</ul>
<h2 id="ALt-是什么？"><a href="#ALt-是什么？" class="headerlink" title="ALt 是什么？"></a>ALt 是什么？</h2><p>解释： alt是flux的另一种实现方法<br>简单的实现就是四步：</p>
<ol>
<li>创建View，在View监听Store的变化</li>
<li>在View里，调用相应的action，在action里处理相应的逻辑，使用dispatcher把结果发送给Store</li>
<li>在Store里，做相应的处理，存储数据。</li>
<li>View监听到Store有变化，调用this.setState()或this.forceUpdate()触发render(),在render()根据不同的state渲染不同的页面。</li>
</ol>
<ul>
<li>ALT在各种flux的设计思路中是比较容易上手的。</li>
</ul>
<p><img src="http://upload-images.jianshu.io/upload_images/1847986-1a91b1a23f8b0b05.png?imageMogr2/auto-orient/strip" alt="ALT"></p>
<p>创建一个alt 把action和Store都放进去。</p>
<h2 id="alt使用方法"><a href="#alt使用方法" class="headerlink" title="alt使用方法"></a><strong>alt使用方法</strong></h2><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">npm install alt</div></pre></td></tr></table></figure>
<h3 id="文件夹的厄目录结构"><a href="#文件夹的厄目录结构" class="headerlink" title="文件夹的厄目录结构"></a>文件夹的厄目录结构</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">your_project</div><div class="line"> |--action/</div><div class="line">    |--MyActions.js</div><div class="line"> |--stores/</div><div class="line">    |--MyStore.js</div><div class="line"> |--components/</div><div class="line">    |--MyComponent.js</div><div class="line"> |--alt.js</div><div class="line"> |--app.js</div></pre></td></tr></table></figure>
<h3 id="创建一个alt"><a href="#创建一个alt" class="headerlink" title="创建一个alt"></a>创建一个alt</h3><p>在项目的根目录下创建一个名字为alt.js的文件<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Alt = <span class="built_in">require</span>(<span class="string">'alt'</span>);</div><div class="line"><span class="keyword">var</span> alt = <span class="keyword">new</span> Alt();</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = alt;</div></pre></td></tr></table></figure></p>
<h3 id="创建一个Action"><a href="#创建一个Action" class="headerlink" title="创建一个Action"></a>创建一个Action</h3><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="comment">/* actions/LocationAction.js */</span></div><div class="line"></div><div class="line"><span class="keyword">var</span> alt  = <span class="built_in">require</span>(<span class="string">'../alt'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationActions</span> </span>&#123;</div><div class="line">    updateLocations(locations)&#123;</div><div class="line">      <span class="keyword">return</span> locations;</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = alt.createActions(LocaActions);</div></pre></td></tr></table></figure>
<h3 id="创建一个Store"><a href="#创建一个Store" class="headerlink" title="创建一个Store"></a>创建一个Store</h3><p>可以使用常规构造函数和原型</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> alt = <span class="built_in">require</span>(<span class="string">'../alt'</span>);</div><div class="line"><span class="keyword">var</span> LocationActions = <span class="built_in">require</span>(<span class="string">'../actions/LocationActions'</span>);</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationStore</span></span>&#123;</div><div class="line">   construtor()&#123;</div><div class="line">      <span class="keyword">this</span>.locations = [];</div><div class="line">      <span class="comment">/* 在构造函数中 我们将我们的的action绑定 */</span></div><div class="line">      <span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">        <span class="attr">handleUpdateLocations</span>: LocationActions.UPDATE_LOCATIONS</div><div class="line">      &#125;)</div><div class="line">   &#125;</div><div class="line">  <span class="comment">/* 接下来 我们在Store中定义处理这些操作的方法。*/</span></div><div class="line">  handleUpdateLocations(locations)&#123;</div><div class="line">     <span class="keyword">this</span>.locations = locations;</div><div class="line">     <span class="comment">/*可以返回 false 去抑制Store更改事件*/</span></div><div class="line">  &#125;</div><div class="line">  </div><div class="line">&#125;</div><div class="line"><span class="comment">// 导出创建的store</span></div><div class="line"><span class="built_in">module</span>.exports = alt.createStore(LocationStore,<span class="string">'LocationStore'</span>);</div></pre></td></tr></table></figure>
<h3 id="使用View"><a href="#使用View" class="headerlink" title="使用View"></a>使用View</h3><p>创建 components/Locations.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div><div class="line">32</div><div class="line">33</div><div class="line">34</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> React <span class="keyword">from</span> <span class="string">'react'</span>;</div><div class="line"><span class="keyword">import</span> LocationStore <span class="keyword">from</span> <span class="string">'../stores/LocationStore'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">Locations</span> <span class="keyword">extends</span> <span class="title">Component</span></span>&#123;</div><div class="line">   construtor()&#123;</div><div class="line">       <span class="keyword">super</span>();</div><div class="line">       <span class="keyword">this</span>.state=&#123;</div><div class="line">          <span class="attr">locations</span>:LocationStore.getState()</div><div class="line">       &#125;</div><div class="line">   &#125;</div><div class="line">   </div><div class="line">   componentDidMount() &#123;</div><div class="line">         LocationStore.listen(<span class="keyword">this</span>.onChange);</div><div class="line">   &#125;,</div><div class="line">   componentWillUnmount()&#123;</div><div class="line">         LocationStore.unlisten(<span class="keyword">this</span>.onchange);</div><div class="line">   &#125;,</div><div class="line">   onChange(state)&#123;</div><div class="line">     <span class="keyword">this</span>.setState(state);</div><div class="line">   &#125;,</div><div class="line">   render()&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">      &lt;ul&gt;</div><div class="line">         &#123;this.state.locations.map((location)=&gt;&#123;</div><div class="line">            return (</div><div class="line">              &lt;li&gt;&#123;location.name&#125;&lt;/li&gt;</div><div class="line">            );</div><div class="line">         &#125;)&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">      );</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="built_in">module</span>.exports = Locations;</div></pre></td></tr></table></figure></p>
<h3 id="获取数据"><a href="#获取数据" class="headerlink" title="获取数据"></a>获取数据</h3><p>使用异步的方法获取数据，你可以把它放在action或者Store，在这我们将放在action中进行异步请求数据</p>
<p>首先，创建source/LocationSource.js 你可以使用类似于fetch从服务器获取某些数据，在这里，我们将使用setTimeout和Promise模拟使用fetch API 进行资源请求；</p>
<p><strong>创建</strong> source/LocationSource.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div></pre></td><td class="code"><pre><div class="line"></div><div class="line"> <span class="comment">/*模拟数据*/</span></div><div class="line"><span class="keyword">var</span> mockData = [</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">0</span>, <span class="attr">name</span>: <span class="string">'Abu Dhabi'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">1</span>, <span class="attr">name</span>: <span class="string">'Berlin'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">2</span>, <span class="attr">name</span>: <span class="string">'Bogota'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">3</span>, <span class="attr">name</span>: <span class="string">'Buenos Aires'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">4</span>, <span class="attr">name</span>: <span class="string">'Cairo'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">5</span>, <span class="attr">name</span>: <span class="string">'Chicago'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">6</span>, <span class="attr">name</span>: <span class="string">'Lima'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">7</span>, <span class="attr">name</span>: <span class="string">'London'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">8</span>, <span class="attr">name</span>: <span class="string">'Miami'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">9</span>, <span class="attr">name</span>: <span class="string">'Moscow'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">10</span>, <span class="attr">name</span>: <span class="string">'Mumbai'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">11</span>, <span class="attr">name</span>: <span class="string">'Paris'</span> &#125;,</div><div class="line">  &#123; <span class="attr">id</span>: <span class="number">12</span>, <span class="attr">name</span>: <span class="string">'San Francisco'</span> &#125;</div><div class="line">];</div><div class="line"></div><div class="line"><span class="keyword">var</span> LocationSource = &#123;</div><div class="line">   <span class="attr">fetch</span>: <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">     <span class="keyword">return</span> <span class="keyword">new</span> <span class="built_in">Promise</span>(<span class="function"><span class="keyword">function</span>(<span class="params">resolve,reject</span>)</span>&#123;</div><div class="line">         setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">             resolve(mockData);</div><div class="line">         &#125;,<span class="number">250</span>)</div><div class="line">     &#125;)</div><div class="line">   &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>接下来我们需要更改action使用我们创建的这种新方法,我们将添加一个action调用这个方法,fetchLocations,它将获取location然后调用updateLocations，当完成之后，一个新的Action locationsFailed 来处理得不到的location 在这个class 添加这个方法;</p>
<p>文件： actions/LocationActions.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"> fetchLocations() &#123;</div><div class="line">     <span class="keyword">return</span> <span class="function">(<span class="params">dispatch</span>)=&gt;</span>&#123;</div><div class="line">         dispatch();</div><div class="line">         LocationSource.fetch()</div><div class="line">           .then(<span class="function">(<span class="params">locations</span>)=&gt;</span>&#123;</div><div class="line">               <span class="keyword">this</span>.updateLocations(locations);</div><div class="line">           &#125;)</div><div class="line">           .catch(<span class="function">(<span class="params">errorMessage</span>)=&gt;</span>&#123;</div><div class="line">                <span class="keyword">this</span>.locationsFailed(errorMessage);</div><div class="line">           &#125;)</div><div class="line">     &#125;</div><div class="line"> &#125;</div><div class="line">locationsFailed(errorMessage) &#123;</div><div class="line">     <span class="keyword">return</span> errorMessage;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>然后更新Store去处理新的action，这只是添加一个新的actions 通过bindListeners去处理,增加一个新的状态’errorMessage’去处理错误的信息,</p>
<p>文件: stores/LocationStore.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div></pre></td><td class="code"><pre><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">LocationStore</span> </span>&#123;</div><div class="line">   <span class="keyword">constructor</span>() &#123;</div><div class="line">      <span class="keyword">this</span>.locatoions = [];</div><div class="line">      <span class="keyword">this</span>.errorMessage = <span class="literal">null</span>;</div><div class="line">      <span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">          <span class="attr">handleUpdateLocations</span>: LocationActions.UPDATE_LOCATIONS,</div><div class="line">          <span class="attr">handleFetchLocations</span>: LocationActions.FETCH_LOCATIONS,</div><div class="line">          <span class="attr">handleLocationsFailed</span>: LocationActions.LOCATIONS_FAILED</div><div class="line">      &#125;)</div><div class="line">   &#125;  </div><div class="line">   </div><div class="line">  handleUpdateLocations(locations) &#123;</div><div class="line">        <span class="keyword">this</span>.locations = locations;</div><div class="line">        <span class="keyword">this</span>.errorMessage = <span class="literal">null</span>;</div><div class="line">   &#125;,</div><div class="line">  handleFetchLocations() &#123;</div><div class="line">        <span class="keyword">this</span>.locations = [];</div><div class="line">  &#125;,</div><div class="line"></div><div class="line">  handleLocationsFailed(errorMessage) &#123;</div><div class="line">        <span class="keyword">this</span>.errorMessage = errorMessage;</div><div class="line">  &#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<p>我们给View加上缓冲数据的动画：<br>文件： components/Locations.js<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">componentDidMount() &#123;</div><div class="line">  LocationStore.listen(<span class="keyword">this</span>.onChange);</div><div class="line">  </div><div class="line">  LocationActions.fetchLocations();</div><div class="line">&#125;</div><div class="line">render() &#123;</div><div class="line">   <span class="keyword">if</span>(<span class="keyword">this</span>.state.errorMessage)&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">      &lt;div&gt;Something is wrong&lt;/div&gt;</div><div class="line">      );</div><div class="line">   &#125;</div><div class="line">   <span class="keyword">if</span>(!<span class="keyword">this</span>.state.locations.length)&#123;</div><div class="line">      <span class="keyword">return</span> (</div><div class="line">        &lt;div&gt;</div><div class="line">          &lt;image src="/my-cool-spinner.gif" /&gt;</div><div class="line">        &lt;/div&gt;</div><div class="line">      );</div><div class="line">   &#125;</div><div class="line">   return (</div><div class="line">   &lt;ul&gt;</div><div class="line">     &#123;this.state.locations.map((location) =&gt; &#123;</div><div class="line">       return (</div><div class="line">         &lt;li&gt;&#123;location.name&#125;&lt;/li&gt;</div><div class="line">       );</div><div class="line">     &#125;)&#125;</div><div class="line">   &lt;/ul&gt;</div><div class="line"> );</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<h3 id="数据依赖"><a href="#数据依赖" class="headerlink" title="数据依赖"></a>数据依赖</h3><p>处理Store之间的数据依赖往往是一个棘手和耗时的工作，FLux提供的这种方法，称之为waitFor，哪个信号发送给调度程序，这个store就依赖于哪个store的数据。<br>我们新建一个FavoriteStore 可以标记你想要的location，只有在FavoriteStore获取更新后，才需要更新LocationStore。</p>
<ul>
<li><p>首先我们在LocationActions添加一个新的action。<br>文件： <strong>actions/LocationActions.js</strong></p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">favoriteLocation(locationId)&#123;</div><div class="line">   <span class="keyword">this</span>.dispatch(locationId);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
</li>
<li><p>接下来，新建一个store<br>文件： stores/FavoriteStore.js</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">import</span> alt form <span class="string">'../alt'</span>;</div><div class="line"><span class="keyword">import</span> LocationActions form <span class="string">'../actions/LocationActions'</span>;</div><div class="line"></div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">FavoritesStore</span> </span>&#123;</div><div class="line">    <span class="keyword">constructor</span>() &#123;</div><div class="line">       <span class="keyword">this</span>.locations = [];</div><div class="line">       </div><div class="line">       <span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">         <span class="attr">addFavoriteLocation</span>: LocationActions.FAVORITE_LOCATION</div><div class="line">       &#125;);</div><div class="line">    &#125;</div><div class="line">    addFavoriteLocation(locations)&#123;</div><div class="line">         <span class="keyword">this</span>.locations.push(location);</div><div class="line">    &#125;</div><div class="line">&#125;</div><div class="line"><span class="built_in">module</span>.exports = alt.creteStore(FavoritesStore,<span class="string">'FavoritesStore'</span>)</div></pre></td></tr></table></figure>
</li>
</ul>
<p>最后我们在LocationStore中设置waitFor 依赖关系，首先确保将新的action绑定到Store中</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">this</span>.bindListeners(&#123;</div><div class="line">  <span class="attr">handleUpdateLocations</span>: LocationActions.UPDATE_LOCATIONS,</div><div class="line">  <span class="attr">handleFetchLocations</span>: LocationActions.FETCH_LOCATIONS,</div><div class="line">  <span class="attr">handleLocationsFailed</span>: LocationActions.LOCATIONS_FAILED,</div><div class="line">  <span class="attr">setFavorites</span>: LocationActions.FAVORITE_LOCATION</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>创建一个action处理waitFor</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div></pre></td><td class="code"><pre><div class="line">resetAllFavorites() &#123;</div><div class="line">  <span class="keyword">this</span>.locations = <span class="keyword">this</span>.locations.map(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</div><div class="line">    <span class="keyword">return</span> &#123;</div><div class="line">      <span class="attr">id</span>: location.id,</div><div class="line">      <span class="attr">name</span>: location.name,</div><div class="line">      <span class="attr">has_favorite</span>: <span class="literal">false</span></div><div class="line">    &#125;;</div><div class="line">  &#125;);</div><div class="line">&#125;</div><div class="line"></div><div class="line">setFavorites(location) &#123;</div><div class="line">  <span class="keyword">this</span>.waitFor(FavoritesStore);</div><div class="line"></div><div class="line">  <span class="keyword">var</span> favoritedLocations = FavoritesStore.getState().locations;</div><div class="line"></div><div class="line">  <span class="keyword">this</span>.resetAllFavorites();</div><div class="line">favoritedLocations.forEach(<span class="function">(<span class="params">location</span>) =&gt;</span> &#123;</div><div class="line">    <span class="comment">// find each location in the array</span></div><div class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="keyword">this</span>.locations.length; i += <span class="number">1</span>) &#123;</div><div class="line"></div><div class="line">      <span class="comment">// set has_favorite to true</span></div><div class="line">      <span class="keyword">if</span> (<span class="keyword">this</span>.locations[i].id === location.id) &#123;</div><div class="line">        <span class="keyword">this</span>.locations[i].has_favorite = <span class="literal">true</span>;</div><div class="line">        <span class="keyword">break</span>;</div><div class="line">      &#125;</div><div class="line">    &#125;</div><div class="line">  &#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure>
<h3 id="容器组件（container-component）"><a href="#容器组件（container-component）" class="headerlink" title="容器组件（container component）"></a>容器组件（container component）</h3><p>什么是container component ？<br>它是负责管理你状态的组件，记得在View中我们如何进行混合状态渲染吗？<br><figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> Locations = React.createClass(&#123;</div><div class="line">     getInitialState() &#123;</div><div class="line">         <span class="keyword">return</span> LocationStore.getState();</div><div class="line">     &#125;,</div><div class="line">     componentDidMount() &#123;</div><div class="line">       LocationStore.listen(<span class="keyword">this</span>.onChange);</div><div class="line">     &#125;,</div><div class="line">     onChange(state)&#123;</div><div class="line">      <span class="keyword">this</span>.setState(state);</div><div class="line">     &#125;,</div><div class="line">     render() &#123;</div><div class="line">       <span class="keyword">return</span>(</div><div class="line">          &lt;ul&gt;</div><div class="line">             &#123;this.state.location.map((location)=&gt;&#123;</div><div class="line">               return (</div><div class="line">                 &lt;li&gt;&#123;location.name&#125;&lt;/li&gt;</div><div class="line">               );</div><div class="line">             &#125;)&#125;</div><div class="line">          &lt;/ul&gt;</div><div class="line">       );</div><div class="line">     &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure></p>
<p>这实际上是一个糟糕的模式，因为它很难复用。您的组件应分为两种类型：管理状态（状态组件）和处理数据显示（纯组件）的组件.</p>
<p>纯组件的目标是写它们，以便他们只接受props，并负责将这些props渲染成一个view。这样可以更容易地测试和重新使用这些组件。一个简单的例子是UserComponent，您可以将其与UserStore相结合.<br>纯location组件如下所示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line">var Locations = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    return (</div><div class="line">      &lt;ul&gt;</div><div class="line">        &#123;this.props.locations.map((location, i) =&gt; &#123;</div><div class="line">          return (</div><div class="line">            &lt;li key=&#123;i&#125;&gt;</div><div class="line">              &#123;location.name&#125;</div><div class="line">            &lt;/li&gt;</div><div class="line">          );</div><div class="line">        &#125;)&#125;</div><div class="line">      &lt;/ul&gt;</div><div class="line">    );</div><div class="line">  &#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p>
<p>看起来足够简单，我们真正做到了从this.state到this.props和移除所有store的监听，so，如何监听Store呢？<br>有两种方式去创建一个 container component 在alt，通过一个声明式,通过一个函数,我们可以看出两者的不同。  </p>
<h3 id="connectStores"><a href="#connectStores" class="headerlink" title="connectStores"></a>connectStores</h3><p>通过一个uilt我们将连接component到store</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> LocationsContainer = connectToStores(&#123;</div><div class="line">     getStore() &#123;</div><div class="line">        <span class="keyword">return</span> [locationStore]</div><div class="line">     &#125;,</div><div class="line">     getPropsFormStore() &#123;</div><div class="line">        <span class="keyword">var</span> locationState = LocationStore.getState()</div><div class="line">        <span class="keyword">return</span> &#123;</div><div class="line">           <span class="attr">locations</span>: locationState.locations</div><div class="line">        &#125;</div><div class="line">     &#125;,</div><div class="line">     React.createClass(&#123;</div><div class="line">        render() &#123;</div><div class="line">           <span class="keyword">return</span> &lt;Locations locations=&#123;this.props.locations&#125; /&gt;</div><div class="line">        &#125;</div><div class="line">     &#125;)</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>您可以看到，现在可以在其他地方重新使用location，因为它不会绑定到特定的store。所有的location都会接受一系列的location，并关心自己的render。这可能看起来像额外的样板，但是稍后再回到应用程序来维护它时，将会很方便。connectToStores处理store店的listen和unlisten。每次store改变时，getPropsFromStores都会被调用，其结果作为props传递给连接的组件。</p>
<p>请注意，如上所述，connectToStores实际上是使用一个容器组件来包装您的React组件，该容器组件处理监听存储并将该状态作为道具传递给组件。如果您正在使用connectToStores装饰器，您将需要确保它是最外面的装饰器，以确保其他装饰器应用于实际组件而不是包装组件。例如：</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">@connectToStores</div><div class="line">@someDecorator</div><div class="line">@anotherDecorator</div><div class="line"><span class="class"><span class="keyword">class</span> <span class="title">MyComponent</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</div><div class="line">  <span class="comment">// ...</span></div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="comment">// 等价于  connectToStores(someDecorator(anotherDecorator(MyComponent)))</span></div></pre></td></tr></table></figure>
<h3 id="AltContainer"><a href="#AltContainer" class="headerlink" title="AltContainer"></a>AltContainer</h3><p>这是一个可以用来声明性地connect一个store，或将action或上下文传递给纯组件的组件</p>
<figure class="highlight js"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line"><span class="keyword">var</span> LocationsContainer = React.createClass(&#123;</div><div class="line">  render() &#123;</div><div class="line">    <span class="keyword">return</span> (</div><div class="line">      &lt;AltContainer store=&#123;LocationStore&#125;&gt;</div><div class="line">        &lt;Locations /&gt;</div><div class="line">      &lt;/AltContainer&gt;</div><div class="line">    )</div><div class="line">  &#125;</div><div class="line">&#125;))</div></pre></td></tr></table></figure>
<p>使用AltContainer，将单个store连接到单个组件相当简单，我们使用store prop。这将自动listen和unlisten您的store，并且每当状态更改时，它将重新render子组件将整个store的状态作为props传递给每个组件。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;flux-框架介绍&quot;&gt;&lt;a href=&quot;#flux-框架介绍&quot; class=&quot;headerlink&quot; title=&quot;flux 框架介绍&quot;&gt;&lt;/a&gt;flux 框架介绍&lt;/h3&gt;&lt;h3 id=&quot;flux的四大元素：&quot;&gt;&lt;a href=&quot;#flux的四大元素：&quot; class=&quot;headerlink&quot; title=&quot;flux的四大元素：&quot;&gt;&lt;/a&gt;flux的四大元素：&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;Dispatchre ： 根据注册派发动作（action）&lt;/li&gt;
&lt;li&gt;Store ：（数据层）存储数据，用来存放应用的状态，一旦发生变动，就提醒Views要更新页面。&lt;/li&gt;
&lt;li&gt;Action ：（动作）视图层发出的消息（比如onClick）。&lt;/li&gt;
&lt;li&gt;View : 用户界面的视图层&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
    
      <category term="React" scheme="https://wiestlee.github.io/tags/React/"/>
    
  </entry>
  
  <entry>
    <title>初识Vue-简介</title>
    <link href="https://wiestlee.github.io/2017/03/20/%E5%88%9D%E8%AF%86vue/"/>
    <id>https://wiestlee.github.io/2017/03/20/初识vue/</id>
    <published>2017-03-19T16:00:00.000Z</published>
    <updated>2017-12-03T04:57:01.089Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Vue-js简介"><a href="#Vue-js简介" class="headerlink" title="Vue.js简介"></a>Vue.js简介</h3><p>Vue.js是一款轻量级的以数据驱动的前端JS框架，其和JQuery最大的不同点在于JQuery通过操作DOM来改变页面的显示，而Vue通过操作数据来实现页面的更新与展示。</p>
<p>Vue.js主要负责的是ViewModel的部分，其在View层（即DOM层）与Model层（即JSl逻辑层）之间通过ViewModel绑定了DOM Listeners与Data Bingings两个相当于监听器的东西。<br><a id="more"></a></p>
<p>当View层的视图发生改变时，Vue会通过DOM Listeners来监听并改变Model层的数据。相反，当Model层的数据发生改变时，其也会通过Data Bingings来监听并改变View层的展示。这样便实现了一个双向数据绑定的功能，也是Vue.js数据驱动的原理所在。</p>
<h3 id="Vue实例"><a href="#Vue实例" class="headerlink" title="Vue实例"></a>Vue实例</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line">var vm = new Vue(&#123;</div><div class="line">    el:&apos;#demo&apos;,</div><div class="line">    data:&#123;</div><div class="line">        a:1,</div><div class="line">        b:2</div><div class="line">    &#125;,</div><div class="line">    created:function()&#123;</div><div class="line">       //this 指向 vm 实例</div><div class="line">       console.log(&apos;a is&apos;+this.a)</div><div class="line">    &#125;</div><div class="line">&#125;)</div></pre></td></tr></table></figure>
<p>在一个html文件中，我们直接可以通过script标签引入Vue.js，然后就可以在页面里写Vue.js代码了。上图中我们通过new Vue()构建了一个Vue的实例，在实例中，可以包含挂在元素（el），数据（data），模板（template），方法（methods）与生命周期钩子（created等）等选项。不同的实例选项拥有不同的功能，如：</p>
<blockquote>
<ul>
<li>（1）el表明我们的Vue需要操作哪一个元素下的区域，’#demo’表示操作id为demo的元素下区域。</li>
<li>（2）data表示Vue 实例的数据对象，data 的属性能够响应数据的变化。</li>
<li>（3）created表示实例生命周期中创建完成的那一步，当实例已经创建完成之后将调用其方法。</li>
</ul>
</blockquote>
<h3 id="Vue常用指令"><a href="#Vue常用指令" class="headerlink" title="Vue常用指令"></a>Vue常用指令</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">&lt;div id=&quot;demo&quot;&gt;</div><div class="line">   &lt;p v-text=&quot;p1&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-html=&quot;p2&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-if=&quot;p3&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-else&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-show=&quot;p5&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-for=&quot;p in p6&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-on:click=&quot;showP3&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-bind:title=&quot;p7&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;input v-model=&quot;p8&quot;&gt;&lt;/p&gt;</div><div class="line">   &lt;p v-cloak&gt;&#123;&#123; p9 &#125;&#125;&lt;/p&gt;</div><div class="line">&lt;/div&gt;</div></pre></td></tr></table></figure>
<p>在Vue项目的开发中，我们使用的最多的应该就属Vue的指令了。通过Vue提供的常用指令，我们可以淋漓尽致地发挥Vue数据驱动的强大功能。以下便是图中常用指令的简单介绍：</p>
<p>（1）v-text: 用于更新绑定元素中的内容，类似于jQuery的text()方法<br>（2）v-html: 用于更新绑定元素中的html内容，类似于jQuery的html()方法<br>（3）v-if: 用于根据表达式的值的真假条件渲染元素，如果上图P3为false则不会渲染P标签<br>（4）v-show: 用于根据表达式的值的真假条件显示隐藏元素，切换元素的 display CSS 属性<br>（5）v-for: 用于遍历数据渲染元素或模板，如图中P6为[1,2,3]则会渲染3个P标签，内容依次为1，2，3<br>（6）v-on: 用于在元素上绑定事件，图中在P标签上绑定了showP3的点击事件</p>
<p>关于更多的Vue指令可以查看Vue2.0文档，地址：<a href="https://vuefe.cn/api/#指令" target="_blank" rel="external">https://vuefe.cn/api/#指令</a></p>
<h3 id="Vue-js技术栈"><a href="#Vue-js技术栈" class="headerlink" title="Vue.js技术栈"></a>Vue.js技术栈</h3><p>以上我们讲到可以直接在一个html页面里通过引入Vue.js来直接写Vue代码，但是这样的方式并不常用。因为如果我们的项目比较大，项目中会存在很多页面，一旦每个页面都引入一个Vue.js或者声明一个Vue实例，这样非常不利于后期的维护和代码的公用，也会存在实例名冲突的情况，所以我们需要用到Vue提供的技术栈来构建强大的前端项目。</p>
<p>除了Vue.js我们还需要用到：<br>（1）vue-cli：Vue的脚手架工具，用于自动生成Vue项目的目录及文件。<br>（2）vue-router： Vue提供的前端路由工具，利用其我们实现页面的路由控制，局部刷新及按需加载，构建单页应用，实现前后端分离。<br>（3）vuex：Vue提供的状态管理工具，用于同一管理我们项目中各种数据的交互和重用，存储我们需要用到数据对象。<br>（4）ES6：Javascript的新版本，ECMAScript6的简称。利用ES6我们可以简化我们的JS代码，同时利用其提供的强大功能来快速实现JS逻辑。<br>（5）NPM：node.js的包管理工具，用于同一管理我们前端项目中需要用到的包、插件、工具、命令等，便于开发和维护。<br>（6）webpack：一款强大的文件打包工具，可以将我们的前端项目文件同一打包压缩至js中，并且可以通过vue-loader等加载器实现语法转化与加载。<br>（7）Babel：一款将ES6代码转化为浏览器兼容的ES5代码的插件</p>
<p>利用以上等技术，我们便可以开始构建我们的Vue项目了。</p>
<h3 id="构建大型应用"><a href="#构建大型应用" class="headerlink" title="构建大型应用"></a>构建大型应用</h3><blockquote>
<ul>
<li>项目前端目录文件构建 (vue-cli)</li>
<li>组件编写及通信 （什么是组件）</li>
<li>插件使用与文件打包 （webpack）</li>
</ul>
</blockquote>
<p>在构建我们的中大型Vue项目中，我们主要介绍如何利用vue-cli来自动生成我们项目的前端目录及文件，了解Vue中一切皆组件的概念及父子组件的通信问题，讲解在Vue项目中我们如何使用第三方插件，最后利用webpack来打包及部署我们的项目。</p>
<h3 id="vue-cli-构建"><a href="#vue-cli-构建" class="headerlink" title="vue-cli 构建"></a>vue-cli 构建</h3><blockquote>
<ul>
<li>npm install -g vue-cli</li>
<li>vue init webpack my-project</li>
<li>cd my-project</li>
<li>npm install</li>
<li>npm run dev</li>
</ul>
</blockquote>
<p>在使用vue-cli之前我们需要安装node.js，利用其提供的npm命令来安装vue-cli。安装node.js只需去其官网下载软件并安装即可，地址为：<a href="https://nodejs.org/en/" target="_blank" rel="external">https://nodejs.org/en/</a></p>
<p>安装完成之后我们打开电脑的cmd命令行工具依次输入上图中的命令：</p>
<p>（1）npm install -g vue-cli：全局安装vue-cli<br>（2）vue init webpack my-project: 利用vue-cli在目录地址生成一个基于webpack的名为’my-project‘的Vue项目文件及目录<br>（3）cd my-project：打开刚刚创建的文件夹<br>（4）npm intall：安装项目所依赖的包文件<br>（5）npm run dev：利用本地node服务器在浏览器中打开并浏览项目页面</p>
<p>这样我们的一个基于webpack的vue项目目录就构建好了。</p>
<h3 id="单文件组件"><a href="#单文件组件" class="headerlink" title="单文件组件"></a>单文件组件</h3><p>在刚刚构建好的vue项目中，我们会发现一个App.vue和Hello.vue的文件，那么像这样的以.vue后缀结尾的文件便是我们Vue项目中常见的单文件组件。单文件组件包含了一个功能或模块的html、js及css。在.vue文件中，我们可以在template标签中写html，在script标签中写js，在style标签中写css。这样一个功能或模块就是一个.vue组件，对于组件公用和后期的维护也非常便捷。</p>
<h3 id="父子组件通信"><a href="#父子组件通信" class="headerlink" title="父子组件通信"></a>父子组件通信</h3><p>那么像这样在以单文件组件为核心的项目开发中，我们一定会想到一个问题，就是.vue父子组件之间是如何交换数据来实现通信的呢？在Vue2.0中提供了props来实现父组件向子组件传递数据，通过$emit来实现子组件向父组件传递数据。当然如果是较为复杂和普遍的数据交互，建议大家使用vuex来同一管理数据。详情请见：<a href="https://vuefe.cn/guide/components.html#使用Props传递数据" target="_blank" rel="external">https://vuefe.cn/guide/components.html#使用Props传递数据</a></p>
<h3 id="插件使用"><a href="#插件使用" class="headerlink" title="插件使用"></a>插件使用</h3><p>插件使用<br>接下来我们介绍下在基于webpack的vue项目中我们是如何使用插件的，主要有两种情况：</p>
<p>（一）全局使用<br>（1）在index.html引入：这样的方式不推荐使用，因为存在先后加载顺序的问题，有些插件不支持这一方式。<br>（2）通过webpack配置文件引入：主要通过plugin配置项的webpack.ProvidePlugin()方法实现，不过只适合支持CommonJs规范并提供一个全局变量的插件，如jQuery中的$。<br>（3）通过import + Vue.use()引入：这种方式需要在全局.vue文件中import需要加载的插件，然后通过Vue.use(‘插件变量名’)来实现，不过此方法只支持遵循Vue.js插件编写规范的插件使用，如vue-resourece。</p>
<p>（二）单文件使用<br>（1）通过import直接引入：这种方式可以在需要调用插件的.vue文件中使用，不过需要注意和实例的创建顺序问题，或者也可以通过require引入。<br>（2）import + components注册：此方式为Vue组件的使用方式，可以在一个组件中注册并使用一个子组件。</p>
<h3 id="部署及优化"><a href="#部署及优化" class="headerlink" title="部署及优化"></a>部署及优化</h3><blockquote>
<ul>
<li>使用Webpack的DefinePlugin来指定生产环境</li>
<li>使用UglifyJS自动删除代码块内的警告语句</li>
<li>使用v-if减少不必要的组件加载</li>
</ul>
</blockquote>
<p>当我们搞定整个Vue项目的前端编码阶段后，我们需要对我们的前端项目文件进行部署和优化工作，主要的几个方式如下：<br>（1）使用webpack的DefinePlugin指定生产环境：通过plugin中的DefinePlugin配置，我们可以声明’process.env’属性为’development’(开发环境)或者’production’(生产环境)，结合npm配置文件package.json中scripts的命令来切换环境模式十分方便。<br>（2）使用UglifyJs自动删除代码块内的警告语句：一般在生产环境的webpack配置文件中使用，通过new webpack.optimize.UglifyJsPlugin()来进行配置，删除警告语句可以缩减文件的体积。<br>（3）使用Webpack hash处理缓存：当我们需要对发布到线上的文件进行修改时，重新编译的文件名如果和之前版本的相同会引起浏览器无法识别而加载缓存文件的问题。这样我们需要自动的生成带hash值的文件名来阻止缓存。详见：<a href="https://segmentfault.com/a/1190000006178770#articleHeader7" target="_blank" rel="external">https://segmentfault.com/a/1190000006178770#articleHeader7</a><br>（4）使用v-if减少不必要的组件加载：v-if指令其实很有用处，它可以让我们项目中暂时不需要的组件不进行渲染，等需要用到的时候在渲染，比如某个弹窗组件等。这样我们可以减少页面首次加载的时间和文件量。</p>
<p>除了以上几点的优化，还有很多优化选择，有兴趣的可以好好地了解下webpack的API文档，毕竟webpack的功能十分强大。</p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Vue-js简介&quot;&gt;&lt;a href=&quot;#Vue-js简介&quot; class=&quot;headerlink&quot; title=&quot;Vue.js简介&quot;&gt;&lt;/a&gt;Vue.js简介&lt;/h3&gt;&lt;p&gt;Vue.js是一款轻量级的以数据驱动的前端JS框架，其和JQuery最大的不同点在于JQuery通过操作DOM来改变页面的显示，而Vue通过操作数据来实现页面的更新与展示。&lt;/p&gt;
&lt;p&gt;Vue.js主要负责的是ViewModel的部分，其在View层（即DOM层）与Model层（即JSl逻辑层）之间通过ViewModel绑定了DOM Listeners与Data Bingings两个相当于监听器的东西。&lt;br&gt;
    
    </summary>
    
    
      <category term="Vue" scheme="https://wiestlee.github.io/tags/Vue/"/>
    
  </entry>
  
  <entry>
    <title>HTML5前端性能优化-页面预加载</title>
    <link href="https://wiestlee.github.io/2017/03/18/HTML5%E5%89%8D%E7%AB%AF%E6%80%A7%E8%83%BD%E4%BC%98%E5%8C%96%E9%A1%B5%E9%9D%A2%E9%A2%84%E5%8A%A0%E8%BD%BD/"/>
    <id>https://wiestlee.github.io/2017/03/18/HTML5前端性能优化页面预加载/</id>
    <published>2017-03-17T16:00:00.000Z</published>
    <updated>2017-12-03T04:56:28.302Z</updated>
    
    <content type="html"><![CDATA[<p>当提到前端性能优化时，我们首先会联想到文件的合并、压缩，文件缓存和开启服务器端的 gzip压缩等，这使得页面加载更快。<br>现在，有很多已知的技术都可以让你的网站速度变得更快：使用CSS sprites，使用图片优化工具，使用.htaccess设置页面头信息和缓存时间，JavaScript压缩，使用CDN等。而在HTML5里，出现了一个新的用来优化网站速度的新功能：页面资源预加载/预读取(Link prefetch)。</p>
<a id="more"></a>
<h3 id="什么是资源预加载："><a href="#什么是资源预加载：" class="headerlink" title="什么是资源预加载："></a>什么是资源预加载：</h3><blockquote>
<p>预加载是浏览器对将来可能被使用资源的一种暗示，一些资源可以在当前页面使用到，一些可能在将来的某些页面中被使用。作为开发人员，我们比浏览器更加了解我们的应用，所以我们可以对我们的核心资源使用该技术。</p>
</blockquote>
<p>简单说来就是：让浏览器预先加载用户访问当前页后极有可能访问的其他资源(页面，图片，视频等)。</p>
<h4 id="HTML5页面资源预加载-Link-prefetch-写法"><a href="#HTML5页面资源预加载-Link-prefetch-写法" class="headerlink" title="HTML5页面资源预加载(Link prefetch)写法"></a>HTML5页面资源预加载(Link prefetch)写法</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line">&lt;!-- 预加载整个页面 --&gt;</div><div class="line">&lt;link rel=&quot;prefetch&quot; href=&quot;http://www.webhek.com/misc/3d-album/&quot; /&gt;</div><div class="line"></div><div class="line">&lt;!-- 预加载一个图片 --&gt;</div><div class="line">&lt;link rel=&quot;prefetch&quot; href=&quot; http://www.webhek.com/wordpress/</div><div class="line">wp-content/uploads/2014/04/b-334x193.jpg &quot; /&gt;</div></pre></td></tr></table></figure>
<p><strong><em> HTML5页面资源预加载/预读取(Link prefetch)功能是通过Link标记实现的，将rel属性指定为“prefetch”，在href属性里指定要加载资源的地址。火狐浏览器里还提供了一种额外的属性支持： </em></strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line">&lt;link rel=&quot;prefetch alternate stylesheet&quot; </div><div class="line">title=&quot;Designed for Mozilla&quot; href=&quot;mozspecific.css&quot; /&gt;</div><div class="line">&lt;link rel=&quot;next&quot; href=&quot;2.html&quot; /&gt;</div></pre></td></tr></table></figure></p>
<h3 id="什么情况下应该预加载页面资源"><a href="#什么情况下应该预加载页面资源" class="headerlink" title="什么情况下应该预加载页面资源"></a>什么情况下应该预加载页面资源</h3><p>在你的页面里加载什么样的资源，什么时候加载，这完全取决于你。下面是一些建议：</p>
<blockquote>
<ul>
<li>当页面有幻灯片类似的服务时，预加载/预读取接下来的1-3页和之前的1-3页。</li>
<li>预加载那些整个网站通用的图片。</li>
<li>预加载网站上搜索结果的下一页。</li>
</ul>
</blockquote>
<h3 id="页面资源预加载-Link-prefetch-注意事项"><a href="#页面资源预加载-Link-prefetch-注意事项" class="headerlink" title="页面资源预加载(Link prefetch)注意事项"></a>页面资源预加载(Link prefetch)注意事项</h3><p>下面是一些关于页面资源预加载(Link prefetch)的注意事项：</p>
<blockquote>
<ul>
<li>预加载(Link prefetch)不能跨域工作，包括跨域拉取cookies。</li>
<li>预加载(Link prefetch)会污染你的网站访问量统计，因为有些预加载到浏览器的页面用户可能并未真正访问。</li>
</ul>
</blockquote>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;当提到前端性能优化时，我们首先会联想到文件的合并、压缩，文件缓存和开启服务器端的 gzip压缩等，这使得页面加载更快。&lt;br&gt;现在，有很多已知的技术都可以让你的网站速度变得更快：使用CSS sprites，使用图片优化工具，使用.htaccess设置页面头信息和缓存时间，JavaScript压缩，使用CDN等。而在HTML5里，出现了一个新的用来优化网站速度的新功能：页面资源预加载/预读取(Link prefetch)。&lt;/p&gt;
    
    </summary>
    
    
      <category term="HTML" scheme="https://wiestlee.github.io/tags/HTML/"/>
    
  </entry>
  
  <entry>
    <title>HTML全局属性</title>
    <link href="https://wiestlee.github.io/2017/03/18/tags-%20%20%5BJavaScript%5D-3/"/>
    <id>https://wiestlee.github.io/2017/03/18/tags-  [JavaScript]-3/</id>
    <published>2017-03-17T16:00:00.000Z</published>
    <updated>2017-12-03T04:56:44.541Z</updated>
    
    <content type="html"><![CDATA[<p>HTML 定义了少量的属性，这些属性适用于所有的HTML elements，这些属性可以用在所有的element中，尽管有些属性对一些element没什么作用。</p>
<h3 id="accesskey"><a href="#accesskey" class="headerlink" title="accesskey"></a>accesskey</h3><p>这个属性提供了一种使用快捷键访问当前元素的途径。它是用一个字符（单个Unicode code）列表的独立规范构成。浏览器应该使用键盘的第一布局。<br><a id="more"></a></p>
<h3 id="class"><a href="#class" class="headerlink" title="class"></a>class</h3><p>这个属性是一个element的class的独立规范列表。class允许css和javascript通过class选择器或者类似下面的DOM方法来选择和访问element<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">Document.getElementsByClassName(&quot;className&quot;);</div></pre></td></tr></table></figure></p>
<h3 id="contenteditable"><a href="#contenteditable" class="headerlink" title="contenteditable"></a>contenteditable</h3><p>HTML5 :这个可枚举的属性表示这个<strong><em>element可以被用户编辑</em></strong>。如果是这样，浏览器会修改widget让它允许编辑。这个属性必须拥有以下值中的其中一个：</p>
<blockquote>
<ul>
<li>true 或者空字符串,表明这个element可编辑;</li>
<li>false, 表明这个element一定不能被编辑.</li>
</ul>
</blockquote>
<p>如果这个属性没有被设置，他的默认值会继承他父element的。<br><strong>使用说明: 这个属性是一个可枚举的属性，而不是一个布尔属性。这意味着true,false或空字符串的显式使用是强制的正确使用方式是：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line">&lt;div contenteditable=&quot;true&quot;&gt;Example Label&lt;/div&gt;</div></pre></td></tr></table></figure></p>
<h3 id="data"><a href="#data" class="headerlink" title="data-*"></a>data-*</h3><p>HTML5 这类的属性，被称为自定义属性，允许HTML与和它对应DOM表现形式之间的专有信息交换，这或许对script来说有用。这样被设置了这个属性的element就可以通过的HTMLElement的接口访问所有的自定义数据。HTMLElement.dataset属性提供了访问它们的权限。<br><strong><em> </em>可以被任何符合以下限制的the producton rule of xml names(xml的命名规则)代替：*</strong></p>
<blockquote>
<ul>
<li>名字不能以xml开头，除此之外其他任何情形都可是使用这3个字母； </li>
<li>名字不能含有分号；</li>
<li>名字不能含有大写字母。</li>
</ul>
</blockquote>
<p><strong><em> 注意：HTMLElement.dataset是一个 StringMap。一个名叫data-test-value的自定义属性可以通过HTMLElment.dataset.testValue来访问，属性的名字中的中线(U+002D)被挨着它字母的大写字母代替了（驼峰命名） </em></strong></p>
<h3 id="dir"><a href="#dir" class="headerlink" title="dir"></a>dir</h3><p>这个可枚举属性表明element的文本方向。它可以有以下值：</p>
<blockquote>
<ul>
<li>ltr, left to right，适用于从左向右写的语言（比如：英语）；</li>
<li>rtl, right to left，适用于从右向左写的语言（比如：阿拉伯语）</li>
<li>auto, 由代理决定。用一个最基础的算法来解析element中的字符，如果发现有一个字符具有很强的方向性，那么就把这个方向作为整个element的方向。<h3 id="draggable"><a href="#draggable" class="headerlink" title="draggable"></a>draggable</h3>这个可枚举的属性决定一个element是否能够被拖动，可以使用Drag and Drop API。它的能使用的值如下：</li>
<li>true, 表示这个element可以被拖动</li>
<li>false, 表示这个值不可以被拖动</li>
</ul>
</blockquote>
<p>如果这个属性没有被设置，默认是auto,这就意味着它的行为默认由浏览器定义。<br><strong><em> 这个属性是一个可枚举的属性，但不是一个布尔类型属性。这意味着显式使用true 或flase其中之一是强制性的，像这样的简写<label draggable="">Example Label</label>是不允许的。正确用法是<label draggable="true">Example Label</label>。 </em></strong></p>
<h3 id="dropzone"><a href="#dropzone" class="headerlink" title="dropzone"></a>dropzone</h3><p> 这个可枚举的属性决定丢到一个element上的内容类型，可以使用的Drag and Drop API。它能够使用的值如下：</p>
<blockquote>
<ul>
<li>copy, 表示丢放时会创建一个被拖拽element的副本；</li>
<li>move, 表示被拖拽的element被移动到这个新位置；</li>
<li>link, 将会给拖拽的数据（dragged data）创建一个链接；<h3 id="hidden"><a href="#hidden" class="headerlink" title="hidden"></a>hidden</h3>这个布尔（Boolean）属性表示element还没有或是不再存在，当然这都是相对的。例如，你经常在页面上使用隐藏element,只有在登录处理完成后才可以被使用。浏览器不渲染这样的element。<h3 id="id"><a href="#id" class="headerlink" title="id"></a>id</h3>这个属性是唯一的标识，它在整个document里应该是唯一的。当需要链接（使用片段标识符，锚点），执行脚本，控制样式时，可以用它来定位识别元素。<h3 id="lang"><a href="#lang" class="headerlink" title="lang"></a>lang</h3>这个属性用于定义element的语言。不管这个element能不能够被编辑，都应该写上这个属性。这个标签包含单个条目值，它的格式规范定义在 Tags for Identifying Languages (BCP47)(BCP47)IETF 文档中。如果标签的内容是空字符串，那么语言就会被设置为unknown；如果标签的内容是无效的，它就被设置为 invalid<h3 id="spellcheck"><a href="#spellcheck" class="headerlink" title="spellcheck"></a>spellcheck</h3>这个可枚举的属性定义element是否检查拼写错误。它的值可以是以下：</li>
<li>true, 表示如果可能的话，element应该被检查拼写错误；</li>
<li>false, 表示element不应该检查拼写错误；</li>
</ul>
</blockquote>
<p>如果这个属性没有被设置，他默认的值是element的类型以及浏览器定义的。它也可能是 inherited,这意味着element的元素内容将被检查拼写错误，如果离它最近的祖先元素有spellcheck并且值为true。<br><strong><em> 这个属性是可枚举的，不是一个布尔属性。这意味着显式使用true 或 false 其中之一是强制性的。这样简写<label spellcheck="">Example Label</label> 是不允许的。这确的写法应该是<label spellcheck="true">Example Label</label>。<br>对于浏览器来说，这个属性只是一个提示，浏览器并不需要能够去验证拼写错误。通常不可编辑的element是不检查拼写错误的，即使spellcheck的值是true并且浏览器也支持拼写检查。 </em></strong></p>
<h3 id="style"><a href="#style" class="headerlink" title="style"></a>style</h3><p>这个属性包含CSS样式声明，被应用到元素上。注意推荐将它定义在其他文件里。这个属性和<style>element主要的目的是快速编写样式，例如用来测试想要的效果。</p>
<h3 id="tabindex"><a href="#tabindex" class="headerlink" title="tabindex"></a>tabindex</h3><p>这个整数类型的属性决定element是否可以获得焦点，如果它参与到排序的键盘导航，就可以定位它。它可能需要几个值：</p>
<blockquote>
<ul>
<li>负数意味这element不可以获得焦点，也不可以通过排序的键盘导航到达；</li>
<li>0意味着element可以通过排序的键盘导航到达，但是相对顺序取决于平台惯例；</li>
<li>一个正数意味着可以通过排序的键盘导航获得焦点并到达。相对顺序去决议该属性的值，按照tabindex的增值排序。如果几个element有相同的tabindex,他们的相对顺序取决于他们在document中的位置。</li>
</ul>
</blockquote>
<p>在排序的键盘导航单上，如果一个元素的tabindex的值是一个0或者无效值或没有该属性，那么它应该被放在值是正数的element后边。</p>
<h3 id="title"><a href="#title" class="headerlink" title="title"></a>title</h3><p>这个属性包含的的是文本信息，这信息代表element自己包含的内容的公告。这样的信息一般会包含，但是不是必要的，作为用户一个提示工具。这是几个关于这个属性的用法：</p>
<blockquote>
<ul>
<li>Link: 关于被链接文档的一个标题或一段描述；</li>
<li>和图片类似的媒体element:一段描述或相关的可信度；</li>
<li>Paragraph: 脚注活评论；</li>
<li>Quotation: 关于作者等一些信息。</li>
</ul>
</blockquote>
<p>如果这个属性清除了，这意味着离它最近的祖先元素的title和它相关（能够相应地成为这个元素的提示工具）。如果这个属性是空字符串，这很明显的表示离它最近的父元素的title和它没关系（不能作为这个元素的提示工具）。</p>
<h3 id="translate"><a href="#translate" class="headerlink" title="translate"></a>translate</h3><p>这是一个可枚举的属性，用于确定当页面进行本地化(localized)时，元素的属性值以及元素的文本(Text)子节点中的内容是否要进行翻译。其可取的值如下：</p>
<blockquote>
<ul>
<li>空字符串(empty)或者 “yes”，表示这个元素相关的内容将会被翻译</li>
<li>“no”，表示这个元素相关的内容不会被翻译<br>这篇文章有帮助吗？</li>
</ul>
</blockquote>
</style></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;HTML 定义了少量的属性，这些属性适用于所有的HTML elements，这些属性可以用在所有的element中，尽管有些属性对一些element没什么作用。&lt;/p&gt;
&lt;h3 id=&quot;accesskey&quot;&gt;&lt;a href=&quot;#accesskey&quot; class=&quot;headerlink&quot; title=&quot;accesskey&quot;&gt;&lt;/a&gt;accesskey&lt;/h3&gt;&lt;p&gt;这个属性提供了一种使用快捷键访问当前元素的途径。它是用一个字符（单个Unicode code）列表的独立规范构成。浏览器应该使用键盘的第一布局。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://wiestlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>实现对象的深度clone</title>
    <link href="https://wiestlee.github.io/2017/03/16/%E5%AE%9E%E7%8E%B0%E5%AF%B9%E8%B1%A1%E7%9A%84%E6%B7%B1%E5%BA%A6%E5%85%8B%E9%9A%86/"/>
    <id>https://wiestlee.github.io/2017/03/16/实现对象的深度克隆/</id>
    <published>2017-03-15T16:00:00.000Z</published>
    <updated>2017-12-03T04:57:26.306Z</updated>
    
    <content type="html"><![CDATA[<p>简单来说，有个变量a，a的值是个对象（包括基本数据类型），现在我要创建一个变量b，使它拥有跟a一样的方法和属性等等。但是a和b之间不能相互影响，即a的值不会改变b值的变化。<br><a id="more"></a><br>干脆直接赋值不就行了嘛？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">var a = 1;</div><div class="line">var b = a;</div><div class="line">console.log(b);// 1</div><div class="line"></div><div class="line">var a = &apos;hello&apos;;</div><div class="line">var b = a;</div><div class="line">a = &apos;world&apos;;</div><div class="line">console.log(b); // hello</div><div class="line"></div><div class="line">var a = true;</div><div class="line">var b = a;</div><div class="line">a = false;</div><div class="line">console.log(b); // true</div></pre></td></tr></table></figure></p>
<p>实践证明某些Javascript的原始数据类型，如果克隆直接赋值即可。</p>
<p>关于function的深度复制：查阅了一些资料，function的深度复制和原始数类型的深度复制似乎和原始数据类型的深度复制一样。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = function()&#123; console.log(1); &#125;;</div><div class="line">var b = a;</div><div class="line">a = function()&#123; console.log(2); &#125;;</div><div class="line">b();// 1</div></pre></td></tr></table></figure></p>
<p>是吗？ 思考后觉得function和普通对象一样，只是我们在平常应用中习惯了整体的重新赋值，导致它在深度复制中的表现和原始类型一致：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var a = function()&#123; console.log(1); &#125;;</div><div class="line">a.tmp = 10;</div><div class="line">var b = a;</div><div class="line">a.tmp = 20;</div><div class="line">console.log(b.tmp); // 20</div></pre></td></tr></table></figure></p>
<p>于是乎对于function类型的深度克隆，直接赋值似乎并不是一种最好的方法（尽管实际应用中足矣）。那么如何克隆呢？<br>对象呢？<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div></pre></td><td class="code"><pre><div class="line">var a = [0,1,2,3];</div><div class="line">var b = a;</div><div class="line">a.push(4);</div><div class="line">console.log(b); //[0,1,2,3,4]</div></pre></td></tr></table></figure></p>
<p>虽然与预期不符，为什么会这样？因为原始数据类型存储的是对象的实际数据，而对象类型存储的是对象的引用地址。上面的例子也就是说a和b对象引用了同一个地址，无论改变a还是改变b，其实根本操作是一样的，都是对那块空间地址中的的改变。<br>于是我们知道了，对于基本的对象来说，不能只能用=赋值，然后看下面的代码：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line">function deepClone(obj)&#123;</div><div class="line">   var o = obj instanceof Array ? []:&#123;&#125;;</div><div class="line">   for (var k in obj)&#123;</div><div class="line">      o[k] = typeof obj[k] === Object ? deepClone(obj[k]):obj[k];</div><div class="line">      return o;</div><div class="line">   &#125;</div><div class="line">&#125;</div><div class="line">var a = [[1,2,3],[4,5,6,7]];</div><div class="line">var b = deepClone(a);</div><div class="line">console.log(b);</div></pre></td></tr></table></figure></p>
<p>或者：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">function DeepCopy(obj,newobj)&#123;</div><div class="line">  var newobj = newobj || &#123;&#125;;</div><div class="line">  for(var i in obj)&#123;</div><div class="line">   if(typeof obj[i]==&quot;object&quot;)&#123;</div><div class="line">     newobj[i]=(obj[i].constructor===Array)?[]:&#123;&#125;;</div><div class="line">     Deepcopy(obj[i],newobj[i]);</div><div class="line">   &#125;else&#123;</div><div class="line">      newobj[i]=obj[i];</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">  return newobj;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p>
<p>似乎可以解决一般的对象（包括Array）的深度克隆了，或许这会有个疑问，new String（…）这类的也是对象啊，可是你克隆不了啊，… 但是深度克隆的主要点不在这里，可能在于：</p>
<blockquote>
<ul>
<li>原始数据类型的直接赋值</li>
<li>function的exception</li>
<li>对象深度克隆中Array类型的判断</li>
<li>克隆函数的递归调用</li>
</ul>
</blockquote>
<p><a href="http://web.jobbole.com/82517/#article-comment" target="_blank" rel="external">分享来源</a></p>
]]></content>
    
    <summary type="html">
    
      &lt;p&gt;简单来说，有个变量a，a的值是个对象（包括基本数据类型），现在我要创建一个变量b，使它拥有跟a一样的方法和属性等等。但是a和b之间不能相互影响，即a的值不会改变b值的变化。&lt;br&gt;
    
    </summary>
    
    
      <category term="JavaScript" scheme="https://wiestlee.github.io/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JS数组哪些事</title>
    <link href="https://wiestlee.github.io/2017/03/16/3/"/>
    <id>https://wiestlee.github.io/2017/03/16/3/</id>
    <published>2017-03-15T16:00:00.000Z</published>
    <updated>2017-03-21T15:39:25.538Z</updated>
    
    <content type="html"><![CDATA[<h3 id="数组排序"><a href="#数组排序" class="headerlink" title="数组排序"></a>数组排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line">快速排序：</div><div class="line">var quickSort = function(arr) &#123;</div><div class="line">　　if (arr.length &lt;= 1) &#123; return arr; &#125;</div><div class="line">　　var pivotIndex = Math.floor(arr.length / 2);</div><div class="line">　　var pivot = arr.splice(pivotIndex, 1)[0];</div><div class="line">　　var left = [];</div><div class="line">　　var right = [];</div><div class="line">　　for (var i = 0; i &lt; arr.length; i++)&#123;</div><div class="line">　　　　if (arr[i] &lt; pivot) &#123;</div><div class="line">　　　　　　left.push(arr[i]);</div><div class="line">　　　　&#125; else &#123;</div><div class="line">　　　　　　right.push(arr[i]);</div><div class="line">　　　　&#125;</div><div class="line">　　&#125;</div><div class="line">　　return quickSort(left).concat([pivot], quickSort(right));</div><div class="line">&#125;;</div></pre></td></tr></table></figure>
<h3 id="数组随机排序"><a href="#数组随机排序" class="headerlink" title="数组随机排序"></a>数组随机排序</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line">var arr = [1,2,3,4,5,6,7,8,9,10];</div><div class="line">  		arr.sort(function()&#123;</div><div class="line">  			return Math.random() - 0.5;</div><div class="line">  		&#125;)</div><div class="line">  		console.log(arr);</div></pre></td></tr></table></figure>
<p>解释下：Math.random()得到的是0~1之间的随机数。sort()可以调用一个函数做为参数，如果这个函数返回的值为-1表示数组中的a项排在b项前。如此一来，可以写一个随机函数，让Math.random()随机出来的数与0.5做为一个比较，如果大于.5就返回 -1(a排在b前面)，反之返回1(b排在a前面)</p>
<h3 id="数组去重复"><a href="#数组去重复" class="headerlink" title="数组去重复"></a>数组去重复</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">第一种：</div><div class="line">var arr = [1,1,2,3,3,4,5,6,5];</div><div class="line">function noRepeat(arr)&#123;</div><div class="line">    var n = [];</div><div class="line">    for(var i=0;i&lt;arr.length;i++)&#123;</div><div class="line">        if(n.indexOf(arr[i])==-1)&#123;</div><div class="line">            n.push(arr[i]);</div><div class="line">        &#125;</div><div class="line">       </div><div class="line">    &#125;</div><div class="line">     console.log(n);</div><div class="line">&#125;</div><div class="line">noRepeat(arr);</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line">第二种：</div><div class="line">var arr = [1,2,&quot;a&quot;,&quot;a&quot;,&quot;a&quot;,&quot;b&quot;,&quot;b&quot;,&quot;b&quot;];</div><div class="line">Array.prototype.noRepeat =function()&#123;</div><div class="line">    this.sort();</div><div class="line">    var res = [];</div><div class="line">    for(var i=0;i&lt;this.length;i++)&#123;</div><div class="line">      if(this[i]!==res[res.length-1])&#123;</div><div class="line">        res.push(this[i]);</div><div class="line">    &#125;</div><div class="line">  &#125;</div><div class="line">        console.log(res);</div><div class="line">&#125;</div><div class="line">arr.noRepeat();</div></pre></td></tr></table></figure>
<h3 id="数组取最大值最小值"><a href="#数组取最大值最小值" class="headerlink" title="数组取最大值最小值"></a>数组取最大值最小值</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">取最大值：</div><div class="line">Array.prototype.max = function ()&#123; </div><div class="line">  var max = this[0]; </div><div class="line">  this.forEach (function(ele,index,arr)&#123; </div><div class="line">       if(ele &gt; max) &#123; </div><div class="line">           max = ele; </div><div class="line">         &#125; </div><div class="line">    &#125;) </div><div class="line">    return max; </div><div class="line">&#125; </div><div class="line">var arr = [1,45,23,3,6,2,7,234,56]; </div><div class="line">arr.max();</div></pre></td></tr></table></figure>
<figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div></pre></td><td class="code"><pre><div class="line">去最小值：</div><div class="line">Array.prototype.min = function ()&#123; </div><div class="line">  var max = this[0]; </div><div class="line">  this.forEach (function(ele,index,arr)&#123; </div><div class="line">       if(ele &lt; min) &#123; </div><div class="line">           min = ele; </div><div class="line">         &#125; </div><div class="line">    &#125;) </div><div class="line">    return min; </div><div class="line">&#125; </div><div class="line">var arr = [1,45,23,3,6,2,7,234,56]; </div><div class="line">arr.mii();</div></pre></td></tr></table></figure>
<p>内置函数：内置函数Math.max()和Math.min()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line">Math.max(1,2,5,6); //6</div><div class="line">Math.min(9,40,2,3); //2</div></pre></td></tr></table></figure></p>
]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;数组排序&quot;&gt;&lt;a href=&quot;#数组排序&quot; class=&quot;headerlink&quot; title=&quot;数组排序&quot;&gt;&lt;/a&gt;数组排序&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pr
    
    </summary>
    
    
      <category term="javascript" scheme="https://wiestlee.github.io/tags/javascript/"/>
    
  </entry>
  
</feed>
